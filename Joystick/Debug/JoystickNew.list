
JoystickNew.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e30  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a90  08005f3c  08005f3c  00015f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069cc  080069cc  0002018c  2**0
                  CONTENTS
  4 .ARM          00000000  080069cc  080069cc  0002018c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080069cc  080069cc  0002018c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080069cc  080069cc  000169cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080069d0  080069d0  000169d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000018c  20000000  080069d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000023c  2000018c  08006b60  0002018c  2**2
                  ALLOC
 10 ._user_heap_stack 00000a00  200003c8  08006b60  000203c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001391b  00000000  00000000  000201b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bd2  00000000  00000000  00033ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b8  00000000  00000000  000366a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f68  00000000  00000000  00037760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000198d5  00000000  00000000  000386c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001291f  00000000  00000000  00051f9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092293  00000000  00000000  000648bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f6b4f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004958  00000000  00000000  000f6ba4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000018c 	.word	0x2000018c
 8000128:	00000000 	.word	0x00000000
 800012c:	08005f24 	.word	0x08005f24

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000190 	.word	0x20000190
 8000148:	08005f24 	.word	0x08005f24

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <spi_write>:
/*
 * Writes a byte to SPI without changing chip select (CSX) state.
 * Called by the write_command() and write_data() functions which
 * control these pins as required.
 */
void spi_write(uint8_t* data, uint32_t size) {
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
 8000164:	6039      	str	r1, [r7, #0]


	HAL_SPI_Transmit_DMA(&hspi2, data, size);
 8000166:	683b      	ldr	r3, [r7, #0]
 8000168:	b29b      	uxth	r3, r3
 800016a:	461a      	mov	r2, r3
 800016c:	6879      	ldr	r1, [r7, #4]
 800016e:	4803      	ldr	r0, [pc, #12]	; (800017c <spi_write+0x20>)
 8000170:	f003 fe4c 	bl	8003e0c <HAL_SPI_Transmit_DMA>
}
 8000174:	bf00      	nop
 8000176:	3708      	adds	r7, #8
 8000178:	46bd      	mov	sp, r7
 800017a:	bd80      	pop	{r7, pc}
 800017c:	200001c0 	.word	0x200001c0

08000180 <lcd_write_data>:

/*
 * Writes a data byte to the display. Pulls CS low as required.
 */
void lcd_write_data(uint8_t* data, uint32_t size) {
 8000180:	b580      	push	{r7, lr}
 8000182:	b084      	sub	sp, #16
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
 8000188:	6039      	str	r1, [r7, #0]

    HAL_GPIO_WritePin(CMD_PORT, CMD_PIN, GPIO_PIN_SET);
 800018a:	2201      	movs	r2, #1
 800018c:	2120      	movs	r1, #32
 800018e:	4812      	ldr	r0, [pc, #72]	; (80001d8 <lcd_write_data+0x58>)
 8000190:	f002 fff3 	bl	800317a <HAL_GPIO_WritePin>



    while(size > 0) {
 8000194:	e018      	b.n	80001c8 <lcd_write_data+0x48>

    	HAL_GPIO_WritePin(CSX_PORT, CSX_PIN, GPIO_PIN_RESET);
 8000196:	2200      	movs	r2, #0
 8000198:	2180      	movs	r1, #128	; 0x80
 800019a:	480f      	ldr	r0, [pc, #60]	; (80001d8 <lcd_write_data+0x58>)
 800019c:	f002 ffed 	bl	800317a <HAL_GPIO_WritePin>
    	uint16_t chunk_size = size > 32768 ? 32768 : size;
 80001a0:	683b      	ldr	r3, [r7, #0]
 80001a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80001a6:	bf28      	it	cs
 80001a8:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 80001ac:	81fb      	strh	r3, [r7, #14]
            spi_write(data, chunk_size);
 80001ae:	89fb      	ldrh	r3, [r7, #14]
 80001b0:	4619      	mov	r1, r3
 80001b2:	6878      	ldr	r0, [r7, #4]
 80001b4:	f7ff ffd2 	bl	800015c <spi_write>

            data += chunk_size;
 80001b8:	89fb      	ldrh	r3, [r7, #14]
 80001ba:	687a      	ldr	r2, [r7, #4]
 80001bc:	4413      	add	r3, r2
 80001be:	607b      	str	r3, [r7, #4]
            size -= chunk_size;
 80001c0:	89fb      	ldrh	r3, [r7, #14]
 80001c2:	683a      	ldr	r2, [r7, #0]
 80001c4:	1ad3      	subs	r3, r2, r3
 80001c6:	603b      	str	r3, [r7, #0]
    while(size > 0) {
 80001c8:	683b      	ldr	r3, [r7, #0]
 80001ca:	2b00      	cmp	r3, #0
 80001cc:	d1e3      	bne.n	8000196 <lcd_write_data+0x16>
        }

}
 80001ce:	bf00      	nop
 80001d0:	bf00      	nop
 80001d2:	3710      	adds	r7, #16
 80001d4:	46bd      	mov	sp, r7
 80001d6:	bd80      	pop	{r7, pc}
 80001d8:	40010c00 	.word	0x40010c00

080001dc <lcd_write_command>:

/*
 * Writes a command byte to the display
 */
void lcd_write_command(uint8_t data) {
 80001dc:	b580      	push	{r7, lr}
 80001de:	b082      	sub	sp, #8
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	4603      	mov	r3, r0
 80001e4:	71fb      	strb	r3, [r7, #7]
    //Pull the command AND chip select lines LOW
    HAL_GPIO_WritePin(CMD_PORT, CMD_PIN, GPIO_PIN_RESET);
 80001e6:	2200      	movs	r2, #0
 80001e8:	2120      	movs	r1, #32
 80001ea:	4808      	ldr	r0, [pc, #32]	; (800020c <lcd_write_command+0x30>)
 80001ec:	f002 ffc5 	bl	800317a <HAL_GPIO_WritePin>
    //CSX = 0;
    HAL_GPIO_WritePin(CSX_PORT, CSX_PIN, GPIO_PIN_RESET);
 80001f0:	2200      	movs	r2, #0
 80001f2:	2180      	movs	r1, #128	; 0x80
 80001f4:	4805      	ldr	r0, [pc, #20]	; (800020c <lcd_write_command+0x30>)
 80001f6:	f002 ffc0 	bl	800317a <HAL_GPIO_WritePin>
    spi_write(&data, 1);
 80001fa:	1dfb      	adds	r3, r7, #7
 80001fc:	2101      	movs	r1, #1
 80001fe:	4618      	mov	r0, r3
 8000200:	f7ff ffac 	bl	800015c <spi_write>
    //Return the control lines to HIGH

}
 8000204:	bf00      	nop
 8000206:	3708      	adds	r7, #8
 8000208:	46bd      	mov	sp, r7
 800020a:	bd80      	pop	{r7, pc}
 800020c:	40010c00 	.word	0x40010c00

08000210 <lcd_write_register>:

/*
 * Writes data to a specific register.
 * Accepts a 16-bit register address, and 16-bits of data.
 */
void lcd_write_register(unsigned int reg, unsigned int data) {
 8000210:	b580      	push	{r7, lr}
 8000212:	b084      	sub	sp, #16
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
 8000218:	6039      	str	r1, [r7, #0]
    //Write each register byte, and each data byte seperately.

    lcd_write_command(reg >> 8); //regH
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	0a1b      	lsrs	r3, r3, #8
 800021e:	b2db      	uxtb	r3, r3
 8000220:	4618      	mov	r0, r3
 8000222:	f7ff ffdb 	bl	80001dc <lcd_write_command>
    lcd_write_command(reg & 0xFF); //regL
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	b2db      	uxtb	r3, r3
 800022a:	4618      	mov	r0, r3
 800022c:	f7ff ffd6 	bl	80001dc <lcd_write_command>
    uint8_t data_buff[] = {data >> 8, data & 0xFF};
 8000230:	683b      	ldr	r3, [r7, #0]
 8000232:	0a1b      	lsrs	r3, r3, #8
 8000234:	b2db      	uxtb	r3, r3
 8000236:	733b      	strb	r3, [r7, #12]
 8000238:	683b      	ldr	r3, [r7, #0]
 800023a:	b2db      	uxtb	r3, r3
 800023c:	737b      	strb	r3, [r7, #13]
    lcd_write_data(data_buff, sizeof(data_buff));
 800023e:	f107 030c 	add.w	r3, r7, #12
 8000242:	2102      	movs	r1, #2
 8000244:	4618      	mov	r0, r3
 8000246:	f7ff ff9b 	bl	8000180 <lcd_write_data>

}
 800024a:	bf00      	nop
 800024c:	3710      	adds	r7, #16
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}

08000252 <swap_char>:
}

/*
 * Swaps two 8-bit integers
 */
void swap_char(uint8_t *num1, uint8_t *num2) {
 8000252:	b480      	push	{r7}
 8000254:	b085      	sub	sp, #20
 8000256:	af00      	add	r7, sp, #0
 8000258:	6078      	str	r0, [r7, #4]
 800025a:	6039      	str	r1, [r7, #0]
    char temp = *num2;
 800025c:	683b      	ldr	r3, [r7, #0]
 800025e:	781b      	ldrb	r3, [r3, #0]
 8000260:	73fb      	strb	r3, [r7, #15]
    *num2 = *num1;
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	781a      	ldrb	r2, [r3, #0]
 8000266:	683b      	ldr	r3, [r7, #0]
 8000268:	701a      	strb	r2, [r3, #0]
    *num1 = temp;
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	7bfa      	ldrb	r2, [r7, #15]
 800026e:	701a      	strb	r2, [r3, #0]
}
 8000270:	bf00      	nop
 8000272:	3714      	adds	r7, #20
 8000274:	46bd      	mov	sp, r7
 8000276:	bc80      	pop	{r7}
 8000278:	4770      	bx	lr
	...

0800027c <lcd_init>:
/*
 * Initialisation routine for the LCD
 * I got this from the one of the ebay sellers which make them.
 * From Open-Smart
 */
void lcd_init() {
 800027c:	b580      	push	{r7, lr}
 800027e:	af00      	add	r7, sp, #0
    
    //SET control pins for the LCD HIGH (they are active LOW)
    HAL_GPIO_WritePin(CSX_PORT, CSX_PIN, GPIO_PIN_SET);
 8000280:	2201      	movs	r2, #1
 8000282:	2180      	movs	r1, #128	; 0x80
 8000284:	4811      	ldr	r0, [pc, #68]	; (80002cc <lcd_init+0x50>)
 8000286:	f002 ff78 	bl	800317a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CMD_PORT, CMD_PIN, GPIO_PIN_RESET); //Data / command select, the datasheet isn't clear on that.
 800028a:	2200      	movs	r2, #0
 800028c:	2120      	movs	r1, #32
 800028e:	480f      	ldr	r0, [pc, #60]	; (80002cc <lcd_init+0x50>)
 8000290:	f002 ff73 	bl	800317a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RESX_PORT, RESX_PIN, GPIO_PIN_SET); //RESET pin HIGH
 8000294:	2201      	movs	r2, #1
 8000296:	2140      	movs	r1, #64	; 0x40
 8000298:	480c      	ldr	r0, [pc, #48]	; (80002cc <lcd_init+0x50>)
 800029a:	f002 ff6e 	bl	800317a <HAL_GPIO_WritePin>
    
    //Cycle reset pin
    HAL_GPIO_WritePin(RESX_PORT, RESX_PIN, GPIO_PIN_RESET);
 800029e:	2200      	movs	r2, #0
 80002a0:	2140      	movs	r1, #64	; 0x40
 80002a2:	480a      	ldr	r0, [pc, #40]	; (80002cc <lcd_init+0x50>)
 80002a4:	f002 ff69 	bl	800317a <HAL_GPIO_WritePin>
    HAL_Delay(500);
 80002a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002ac:	f001 fda4 	bl	8001df8 <HAL_Delay>
    HAL_GPIO_WritePin(RESX_PORT, RESX_PIN, GPIO_PIN_SET);
 80002b0:	2201      	movs	r2, #1
 80002b2:	2140      	movs	r1, #64	; 0x40
 80002b4:	4805      	ldr	r0, [pc, #20]	; (80002cc <lcd_init+0x50>)
 80002b6:	f002 ff60 	bl	800317a <HAL_GPIO_WritePin>
    HAL_Delay(500);
 80002ba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002be:	f001 fd9b 	bl	8001df8 <HAL_Delay>
    
    lcd_init_command_list();
 80002c2:	f000 f805 	bl	80002d0 <lcd_init_command_list>
    
}
 80002c6:	bf00      	nop
 80002c8:	bd80      	pop	{r7, pc}
 80002ca:	bf00      	nop
 80002cc:	40010c00 	.word	0x40010c00

080002d0 <lcd_init_command_list>:
 * This is the magic initialisation routine. Supplied by Open-Smart
 * who sell cheap modules on eBay.
 * This routine works with OTM2201A and ILI9225.
 */
void lcd_init_command_list(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
    
    lcd_write_register(ILI9225_POWER_CTRL1, 0x0000); // Set SAP,DSTB,STB
 80002d4:	2100      	movs	r1, #0
 80002d6:	2010      	movs	r0, #16
 80002d8:	f7ff ff9a 	bl	8000210 <lcd_write_register>
    lcd_write_register(ILI9225_POWER_CTRL2, 0x0000); // Set APON,PON,AON,VCI1EN,VC
 80002dc:	2100      	movs	r1, #0
 80002de:	2011      	movs	r0, #17
 80002e0:	f7ff ff96 	bl	8000210 <lcd_write_register>
    lcd_write_register(ILI9225_POWER_CTRL3, 0x0000); // Set BT,DC1,DC2,DC3
 80002e4:	2100      	movs	r1, #0
 80002e6:	2012      	movs	r0, #18
 80002e8:	f7ff ff92 	bl	8000210 <lcd_write_register>
    lcd_write_register(ILI9225_POWER_CTRL4, 0x0000); // Set GVDD
 80002ec:	2100      	movs	r1, #0
 80002ee:	2013      	movs	r0, #19
 80002f0:	f7ff ff8e 	bl	8000210 <lcd_write_register>
    lcd_write_register(ILI9225_POWER_CTRL5, 0x0000); // Set VCOMH/VCOML voltage
 80002f4:	2100      	movs	r1, #0
 80002f6:	2014      	movs	r0, #20
 80002f8:	f7ff ff8a 	bl	8000210 <lcd_write_register>
    
    HAL_Delay(10);
 80002fc:	200a      	movs	r0, #10
 80002fe:	f001 fd7b 	bl	8001df8 <HAL_Delay>
    
    lcd_write_register(ILI9225_POWER_CTRL2, 0xFFFF); // EVERYTHING ON
 8000302:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000306:	2011      	movs	r0, #17
 8000308:	f7ff ff82 	bl	8000210 <lcd_write_register>
    lcd_write_register(ILI9225_POWER_CTRL3, 0x7000); // Set BT,DC1,DC2,DC3
 800030c:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8000310:	2012      	movs	r0, #18
 8000312:	f7ff ff7d 	bl	8000210 <lcd_write_register>
    lcd_write_register(ILI9225_POWER_CTRL4, 0x006F); // Set GVDD   /*007F 0088 */
 8000316:	216f      	movs	r1, #111	; 0x6f
 8000318:	2013      	movs	r0, #19
 800031a:	f7ff ff79 	bl	8000210 <lcd_write_register>
    lcd_write_register(ILI9225_POWER_CTRL5, 0x495F); // Set VCOMH/VCOML voltage
 800031e:	f644 115f 	movw	r1, #18783	; 0x495f
 8000322:	2014      	movs	r0, #20
 8000324:	f7ff ff74 	bl	8000210 <lcd_write_register>
    lcd_write_register(ILI9225_POWER_CTRL1, 0x0F00); // Set SAP,DSTB,STB
 8000328:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 800032c:	2010      	movs	r0, #16
 800032e:	f7ff ff6f 	bl	8000210 <lcd_write_register>
    
    HAL_Delay(10);
 8000332:	200a      	movs	r0, #10
 8000334:	f001 fd60 	bl	8001df8 <HAL_Delay>
    

    lcd_write_register(ILI9225_POWER_CTRL2, 0xFFFF); // Set APON,PON,AON,VCI1EN,VC
 8000338:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800033c:	2011      	movs	r0, #17
 800033e:	f7ff ff67 	bl	8000210 <lcd_write_register>

    HAL_Delay(50);
 8000342:	2032      	movs	r0, #50	; 0x32
 8000344:	f001 fd58 	bl	8001df8 <HAL_Delay>


    lcd_write_register(ILI9225_DRIVER_OUTPUT_CTRL, 0x011C); // set the display line number and display direction
 8000348:	f44f 718e 	mov.w	r1, #284	; 0x11c
 800034c:	2001      	movs	r0, #1
 800034e:	f7ff ff5f 	bl	8000210 <lcd_write_register>
    lcd_write_register(ILI9225_LCD_AC_DRIVING_CTRL, 0x0100); // set 1 line inversion
 8000352:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000356:	2002      	movs	r0, #2
 8000358:	f7ff ff5a 	bl	8000210 <lcd_write_register>
    lcd_write_register(ILI9225_ENTRY_MODE, 0x1038); // set GRAM write direction and BGR=1. 0x1030
 800035c:	f241 0138 	movw	r1, #4152	; 0x1038
 8000360:	2003      	movs	r0, #3
 8000362:	f7ff ff55 	bl	8000210 <lcd_write_register>
    lcd_write_register(ILI9225_DISP_CTRL1, 0x0000); // Display off
 8000366:	2100      	movs	r1, #0
 8000368:	2007      	movs	r0, #7
 800036a:	f7ff ff51 	bl	8000210 <lcd_write_register>
    lcd_write_register(ILI9225_BLANK_PERIOD_CTRL1, 0x0202); // set the back porch and front porch (2 lines, minimum)
 800036e:	f240 2102 	movw	r1, #514	; 0x202
 8000372:	2008      	movs	r0, #8
 8000374:	f7ff ff4c 	bl	8000210 <lcd_write_register>
    lcd_write_register(ILI9225_FRAME_CYCLE_CTRL, 0x0000); // set the clocks number per line
 8000378:	2100      	movs	r1, #0
 800037a:	200b      	movs	r0, #11
 800037c:	f7ff ff48 	bl	8000210 <lcd_write_register>
    lcd_write_register(ILI9225_INTERFACE_CTRL, 0x0000); // CPU interface
 8000380:	2100      	movs	r1, #0
 8000382:	200c      	movs	r0, #12
 8000384:	f7ff ff44 	bl	8000210 <lcd_write_register>
    lcd_write_register(ILI9225_OSC_CTRL, 0x0F01); // Set Osc
 8000388:	f640 7101 	movw	r1, #3841	; 0xf01
 800038c:	200f      	movs	r0, #15
 800038e:	f7ff ff3f 	bl	8000210 <lcd_write_register>
    lcd_write_register(ILI9225_VCI_RECYCLING, 0x0000); // Set VCI recycling
 8000392:	2100      	movs	r1, #0
 8000394:	2015      	movs	r0, #21
 8000396:	f7ff ff3b 	bl	8000210 <lcd_write_register>
    lcd_write_register(ILI9225_RAM_ADDR_SET1, 0xDB00); // RAM Address
 800039a:	f44f 415b 	mov.w	r1, #56064	; 0xdb00
 800039e:	2020      	movs	r0, #32
 80003a0:	f7ff ff36 	bl	8000210 <lcd_write_register>
    lcd_write_register(ILI9225_RAM_ADDR_SET2, 0x00AF); // RAM Address
 80003a4:	21af      	movs	r1, #175	; 0xaf
 80003a6:	2021      	movs	r0, #33	; 0x21
 80003a8:	f7ff ff32 	bl	8000210 <lcd_write_register>

    /* Set GRAM area */
    lcd_write_register(ILI9225_GATE_SCAN_CTRL, 0x0000); 
 80003ac:	2100      	movs	r1, #0
 80003ae:	2030      	movs	r0, #48	; 0x30
 80003b0:	f7ff ff2e 	bl	8000210 <lcd_write_register>
    lcd_write_register(ILI9225_VERTICAL_SCROLL_CTRL1, 0x00DB);
 80003b4:	21db      	movs	r1, #219	; 0xdb
 80003b6:	2031      	movs	r0, #49	; 0x31
 80003b8:	f7ff ff2a 	bl	8000210 <lcd_write_register>
    lcd_write_register(ILI9225_VERTICAL_SCROLL_CTRL2, 0x0000);
 80003bc:	2100      	movs	r1, #0
 80003be:	2032      	movs	r0, #50	; 0x32
 80003c0:	f7ff ff26 	bl	8000210 <lcd_write_register>
    lcd_write_register(ILI9225_VERTICAL_SCROLL_CTRL3, 0x0000);
 80003c4:	2100      	movs	r1, #0
 80003c6:	2033      	movs	r0, #51	; 0x33
 80003c8:	f7ff ff22 	bl	8000210 <lcd_write_register>
    lcd_write_register(ILI9225_PARTIAL_DRIVING_POS1, 0x00DB); //0x0000
 80003cc:	21db      	movs	r1, #219	; 0xdb
 80003ce:	2034      	movs	r0, #52	; 0x34
 80003d0:	f7ff ff1e 	bl	8000210 <lcd_write_register>
    lcd_write_register(ILI9225_PARTIAL_DRIVING_POS2, 0x0000);
 80003d4:	2100      	movs	r1, #0
 80003d6:	2035      	movs	r0, #53	; 0x35
 80003d8:	f7ff ff1a 	bl	8000210 <lcd_write_register>
    lcd_write_register(ILI9225_HORIZONTAL_WINDOW_ADDR1, 0x00AF);// 0x00AF
 80003dc:	21af      	movs	r1, #175	; 0xaf
 80003de:	2036      	movs	r0, #54	; 0x36
 80003e0:	f7ff ff16 	bl	8000210 <lcd_write_register>
    lcd_write_register(ILI9225_HORIZONTAL_WINDOW_ADDR2, 0x0000); //0x0000
 80003e4:	2100      	movs	r1, #0
 80003e6:	2037      	movs	r0, #55	; 0x37
 80003e8:	f7ff ff12 	bl	8000210 <lcd_write_register>
    lcd_write_register(ILI9225_VERTICAL_WINDOW_ADDR1, 0x00DB); //0x00DB
 80003ec:	21db      	movs	r1, #219	; 0xdb
 80003ee:	2038      	movs	r0, #56	; 0x38
 80003f0:	f7ff ff0e 	bl	8000210 <lcd_write_register>
    lcd_write_register(ILI9225_VERTICAL_WINDOW_ADDR2, 0x0000);
 80003f4:	2100      	movs	r1, #0
 80003f6:	2039      	movs	r0, #57	; 0x39
 80003f8:	f7ff ff0a 	bl	8000210 <lcd_write_register>

    /* Set GAMMA curve */
    lcd_write_register(ILI9225_GAMMA_CTRL1, 0x0000); 
 80003fc:	2100      	movs	r1, #0
 80003fe:	2050      	movs	r0, #80	; 0x50
 8000400:	f7ff ff06 	bl	8000210 <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL2, 0x0808); 
 8000404:	f640 0108 	movw	r1, #2056	; 0x808
 8000408:	2051      	movs	r0, #81	; 0x51
 800040a:	f7ff ff01 	bl	8000210 <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL3, 0x080A); 
 800040e:	f640 010a 	movw	r1, #2058	; 0x80a
 8000412:	2052      	movs	r0, #82	; 0x52
 8000414:	f7ff fefc 	bl	8000210 <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL4, 0x000A); 
 8000418:	210a      	movs	r1, #10
 800041a:	2053      	movs	r0, #83	; 0x53
 800041c:	f7ff fef8 	bl	8000210 <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL5, 0x0A08); 
 8000420:	f640 2108 	movw	r1, #2568	; 0xa08
 8000424:	2054      	movs	r0, #84	; 0x54
 8000426:	f7ff fef3 	bl	8000210 <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL6, 0x0808); 
 800042a:	f640 0108 	movw	r1, #2056	; 0x808
 800042e:	2055      	movs	r0, #85	; 0x55
 8000430:	f7ff feee 	bl	8000210 <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL7, 0x0000); 
 8000434:	2100      	movs	r1, #0
 8000436:	2056      	movs	r0, #86	; 0x56
 8000438:	f7ff feea 	bl	8000210 <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL8, 0x0A00); 
 800043c:	f44f 6120 	mov.w	r1, #2560	; 0xa00
 8000440:	2057      	movs	r0, #87	; 0x57
 8000442:	f7ff fee5 	bl	8000210 <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL9, 0x0710); 
 8000446:	f44f 61e2 	mov.w	r1, #1808	; 0x710
 800044a:	2058      	movs	r0, #88	; 0x58
 800044c:	f7ff fee0 	bl	8000210 <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL10, 0x0710); 
 8000450:	f44f 61e2 	mov.w	r1, #1808	; 0x710
 8000454:	2059      	movs	r0, #89	; 0x59
 8000456:	f7ff fedb 	bl	8000210 <lcd_write_register>

    lcd_write_register(ILI9225_DISP_CTRL1, 0x0012); 
 800045a:	2112      	movs	r1, #18
 800045c:	2007      	movs	r0, #7
 800045e:	f7ff fed7 	bl	8000210 <lcd_write_register>

    HAL_Delay(50);
 8000462:	2032      	movs	r0, #50	; 0x32
 8000464:	f001 fcc8 	bl	8001df8 <HAL_Delay>
    
    lcd_write_register(ILI9225_DISP_CTRL1, 0x1017);
 8000468:	f241 0117 	movw	r1, #4119	; 0x1017
 800046c:	2007      	movs	r0, #7
 800046e:	f7ff fecf 	bl	8000210 <lcd_write_register>

    
}
 8000472:	bf00      	nop
 8000474:	bd80      	pop	{r7, pc}
	...

08000478 <fill_rectangle>:
}

/*
 * Fills a rectangle with a given colour
 */
void fill_rectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, unsigned int colour) {
 8000478:	b590      	push	{r4, r7, lr}
 800047a:	b08b      	sub	sp, #44	; 0x2c
 800047c:	af00      	add	r7, sp, #0
 800047e:	4604      	mov	r4, r0
 8000480:	4608      	mov	r0, r1
 8000482:	4611      	mov	r1, r2
 8000484:	461a      	mov	r2, r3
 8000486:	4623      	mov	r3, r4
 8000488:	71fb      	strb	r3, [r7, #7]
 800048a:	4603      	mov	r3, r0
 800048c:	71bb      	strb	r3, [r7, #6]
 800048e:	460b      	mov	r3, r1
 8000490:	717b      	strb	r3, [r7, #5]
 8000492:	4613      	mov	r3, r2
 8000494:	713b      	strb	r3, [r7, #4]
 8000496:	466b      	mov	r3, sp
 8000498:	461c      	mov	r4, r3
	uint16_t delta_x, delta_y;
	delta_x = ABS(x2 - x1);
 800049a:	797a      	ldrb	r2, [r7, #5]
 800049c:	79fb      	ldrb	r3, [r7, #7]
 800049e:	1ad3      	subs	r3, r2, r3
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	bfb8      	it	lt
 80004a4:	425b      	neglt	r3, r3
 80004a6:	83fb      	strh	r3, [r7, #30]
	delta_y = ABS(y2 - y1);
 80004a8:	793a      	ldrb	r2, [r7, #4]
 80004aa:	79bb      	ldrb	r3, [r7, #6]
 80004ac:	1ad3      	subs	r3, r2, r3
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	bfb8      	it	lt
 80004b2:	425b      	neglt	r3, r3
 80004b4:	83bb      	strh	r3, [r7, #28]


    
    HAL_GPIO_WritePin(CSX_PORT, CSX_PIN, GPIO_PIN_RESET);
 80004b6:	2200      	movs	r2, #0
 80004b8:	2180      	movs	r1, #128	; 0x80
 80004ba:	4837      	ldr	r0, [pc, #220]	; (8000598 <fill_rectangle+0x120>)
 80004bc:	f002 fe5d 	bl	800317a <HAL_GPIO_WritePin>
    set_draw_window(x1, y1, x2, y2);
 80004c0:	793b      	ldrb	r3, [r7, #4]
 80004c2:	797a      	ldrb	r2, [r7, #5]
 80004c4:	79b9      	ldrb	r1, [r7, #6]
 80004c6:	79f8      	ldrb	r0, [r7, #7]
 80004c8:	f000 f868 	bl	800059c <set_draw_window>

    uint32_t data_size = delta_x * delta_y;
 80004cc:	8bfb      	ldrh	r3, [r7, #30]
 80004ce:	8bba      	ldrh	r2, [r7, #28]
 80004d0:	fb02 f303 	mul.w	r3, r2, r3
 80004d4:	623b      	str	r3, [r7, #32]
    //TODO: если при подключении какой то новой периферии контроллер начинает зависать - увеличить делитель в SQUARE_QUARTER
    const uint16_t SQUARE_QUARTER = (WIDTH) * (HEIGHT) / 16;
 80004d6:	f640 1374 	movw	r3, #2420	; 0x974
 80004da:	837b      	strh	r3, [r7, #26]
    uint16_t data_color_size = SQUARE_QUARTER;
 80004dc:	8b7b      	ldrh	r3, [r7, #26]
 80004de:	84bb      	strh	r3, [r7, #36]	; 0x24
    
    uint16_t data_color[SQUARE_QUARTER];
 80004e0:	8b7b      	ldrh	r3, [r7, #26]
 80004e2:	3b01      	subs	r3, #1
 80004e4:	617b      	str	r3, [r7, #20]
 80004e6:	8b78      	ldrh	r0, [r7, #26]
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	f04f 0200 	mov.w	r2, #0
 80004f0:	f04f 0300 	mov.w	r3, #0
 80004f4:	010b      	lsls	r3, r1, #4
 80004f6:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 80004fa:	0102      	lsls	r2, r0, #4
 80004fc:	8b78      	ldrh	r0, [r7, #26]
 80004fe:	f04f 0100 	mov.w	r1, #0
 8000502:	f04f 0200 	mov.w	r2, #0
 8000506:	f04f 0300 	mov.w	r3, #0
 800050a:	010b      	lsls	r3, r1, #4
 800050c:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8000510:	0102      	lsls	r2, r0, #4
 8000512:	8b7b      	ldrh	r3, [r7, #26]
 8000514:	005b      	lsls	r3, r3, #1
 8000516:	3307      	adds	r3, #7
 8000518:	08db      	lsrs	r3, r3, #3
 800051a:	00db      	lsls	r3, r3, #3
 800051c:	ebad 0d03 	sub.w	sp, sp, r3
 8000520:	466b      	mov	r3, sp
 8000522:	3301      	adds	r3, #1
 8000524:	085b      	lsrs	r3, r3, #1
 8000526:	005b      	lsls	r3, r3, #1
 8000528:	613b      	str	r3, [r7, #16]
    
	for (uint16_t i = 0; i < data_color_size; i++) {
 800052a:	2300      	movs	r3, #0
 800052c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800052e:	e011      	b.n	8000554 <fill_rectangle+0xdc>
		data_color[i] = ((colour & 0xFF00) >> 8) | ((colour & 0xFF) << 8);
 8000530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000532:	0a1b      	lsrs	r3, r3, #8
 8000534:	b29b      	uxth	r3, r3
 8000536:	b2db      	uxtb	r3, r3
 8000538:	b299      	uxth	r1, r3
 800053a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800053c:	b29b      	uxth	r3, r3
 800053e:	021b      	lsls	r3, r3, #8
 8000540:	b29b      	uxth	r3, r3
 8000542:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000544:	430b      	orrs	r3, r1
 8000546:	b299      	uxth	r1, r3
 8000548:	693b      	ldr	r3, [r7, #16]
 800054a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (uint16_t i = 0; i < data_color_size; i++) {
 800054e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000550:	3301      	adds	r3, #1
 8000552:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000554:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000556:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000558:	429a      	cmp	r2, r3
 800055a:	d3e9      	bcc.n	8000530 <fill_rectangle+0xb8>
	}
	while (data_size > 0)
 800055c:	e014      	b.n	8000588 <fill_rectangle+0x110>
			// делим заливку массива data_color на порции chunk_size размером не более четвертинки
			// логика: chunk_size равен прямоугольнику data_size, если он меньше четвертинки, а
			// если прямоугольник больше четвертинки, то chunk_size равен четвертинке
			// при следующем проходе цикла четвертинка из заливаемого массива вычитается

			uint16_t chunk_size = data_size > SQUARE_QUARTER ? SQUARE_QUARTER : data_size;
 800055e:	8b7a      	ldrh	r2, [r7, #26]
 8000560:	6a3b      	ldr	r3, [r7, #32]
 8000562:	4293      	cmp	r3, r2
 8000564:	bf28      	it	cs
 8000566:	4613      	movcs	r3, r2
 8000568:	81fb      	strh	r3, [r7, #14]

			lcd_write_data((uint8_t*)data_color, 2 * chunk_size);
 800056a:	693a      	ldr	r2, [r7, #16]
 800056c:	89fb      	ldrh	r3, [r7, #14]
 800056e:	005b      	lsls	r3, r3, #1
 8000570:	4619      	mov	r1, r3
 8000572:	4610      	mov	r0, r2
 8000574:	f7ff fe04 	bl	8000180 <lcd_write_data>

			data_color_size += chunk_size;
 8000578:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800057a:	89fb      	ldrh	r3, [r7, #14]
 800057c:	4413      	add	r3, r2
 800057e:	84bb      	strh	r3, [r7, #36]	; 0x24
			data_size -= chunk_size;
 8000580:	89fb      	ldrh	r3, [r7, #14]
 8000582:	6a3a      	ldr	r2, [r7, #32]
 8000584:	1ad3      	subs	r3, r2, r3
 8000586:	623b      	str	r3, [r7, #32]
	while (data_size > 0)
 8000588:	6a3b      	ldr	r3, [r7, #32]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d1e7      	bne.n	800055e <fill_rectangle+0xe6>
 800058e:	46a5      	mov	sp, r4
	}

}
 8000590:	bf00      	nop
 8000592:	372c      	adds	r7, #44	; 0x2c
 8000594:	46bd      	mov	sp, r7
 8000596:	bd90      	pop	{r4, r7, pc}
 8000598:	40010c00 	.word	0x40010c00

0800059c <set_draw_window>:
 * Should only be called within a function that draws something
 * to the display.
 * 
 * NOTE: This is 26 bytes. Use it sparingly (see draw_bitmap())
 */
void set_draw_window(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2) {
 800059c:	b590      	push	{r4, r7, lr}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4604      	mov	r4, r0
 80005a4:	4608      	mov	r0, r1
 80005a6:	4611      	mov	r1, r2
 80005a8:	461a      	mov	r2, r3
 80005aa:	4623      	mov	r3, r4
 80005ac:	71fb      	strb	r3, [r7, #7]
 80005ae:	4603      	mov	r3, r0
 80005b0:	71bb      	strb	r3, [r7, #6]
 80005b2:	460b      	mov	r3, r1
 80005b4:	717b      	strb	r3, [r7, #5]
 80005b6:	4613      	mov	r3, r2
 80005b8:	713b      	strb	r3, [r7, #4]
    
    //Check that the values are in order
    if(x2 < x1)
 80005ba:	797a      	ldrb	r2, [r7, #5]
 80005bc:	79fb      	ldrb	r3, [r7, #7]
 80005be:	429a      	cmp	r2, r3
 80005c0:	d205      	bcs.n	80005ce <set_draw_window+0x32>
        swap_char(&x2, &x1);
 80005c2:	1dfa      	adds	r2, r7, #7
 80005c4:	1d7b      	adds	r3, r7, #5
 80005c6:	4611      	mov	r1, r2
 80005c8:	4618      	mov	r0, r3
 80005ca:	f7ff fe42 	bl	8000252 <swap_char>
    if(y2 < y1)
 80005ce:	793a      	ldrb	r2, [r7, #4]
 80005d0:	79bb      	ldrb	r3, [r7, #6]
 80005d2:	429a      	cmp	r2, r3
 80005d4:	d205      	bcs.n	80005e2 <set_draw_window+0x46>
        swap_char(&y2, &y1);
 80005d6:	1dba      	adds	r2, r7, #6
 80005d8:	1d3b      	adds	r3, r7, #4
 80005da:	4611      	mov	r1, r2
 80005dc:	4618      	mov	r0, r3
 80005de:	f7ff fe38 	bl	8000252 <swap_char>

    lcd_write_register(ILI9225_HORIZONTAL_WINDOW_ADDR1,y2);//x2
 80005e2:	793b      	ldrb	r3, [r7, #4]
 80005e4:	4619      	mov	r1, r3
 80005e6:	2036      	movs	r0, #54	; 0x36
 80005e8:	f7ff fe12 	bl	8000210 <lcd_write_register>
    lcd_write_register(ILI9225_HORIZONTAL_WINDOW_ADDR2,y1);//x1
 80005ec:	79bb      	ldrb	r3, [r7, #6]
 80005ee:	4619      	mov	r1, r3
 80005f0:	2037      	movs	r0, #55	; 0x37
 80005f2:	f7ff fe0d 	bl	8000210 <lcd_write_register>

    lcd_write_register(ILI9225_VERTICAL_WINDOW_ADDR1,x2);//y2
 80005f6:	797b      	ldrb	r3, [r7, #5]
 80005f8:	4619      	mov	r1, r3
 80005fa:	2038      	movs	r0, #56	; 0x38
 80005fc:	f7ff fe08 	bl	8000210 <lcd_write_register>
    lcd_write_register(ILI9225_VERTICAL_WINDOW_ADDR2,x1);//y1
 8000600:	79fb      	ldrb	r3, [r7, #7]
 8000602:	4619      	mov	r1, r3
 8000604:	2039      	movs	r0, #57	; 0x39
 8000606:	f7ff fe03 	bl	8000210 <lcd_write_register>

    lcd_write_register(ILI9225_RAM_ADDR_SET1,y1);//x1
 800060a:	79bb      	ldrb	r3, [r7, #6]
 800060c:	4619      	mov	r1, r3
 800060e:	2020      	movs	r0, #32
 8000610:	f7ff fdfe 	bl	8000210 <lcd_write_register>
    lcd_write_register(ILI9225_RAM_ADDR_SET2,x1);//y1
 8000614:	79fb      	ldrb	r3, [r7, #7]
 8000616:	4619      	mov	r1, r3
 8000618:	2021      	movs	r0, #33	; 0x21
 800061a:	f7ff fdf9 	bl	8000210 <lcd_write_register>

    lcd_write_command(0x00);
 800061e:	2000      	movs	r0, #0
 8000620:	f7ff fddc 	bl	80001dc <lcd_write_command>
    lcd_write_command(0x22);
 8000624:	2022      	movs	r0, #34	; 0x22
 8000626:	f7ff fdd9 	bl	80001dc <lcd_write_command>
}
 800062a:	bf00      	nop
 800062c:	370c      	adds	r7, #12
 800062e:	46bd      	mov	sp, r7
 8000630:	bd90      	pop	{r4, r7, pc}

08000632 <draw_char>:
 * NOTE:
 * This sends approx. 800 bytes per char to the LCD, but it does preserver
 * the background image. Use the draw_fast_char() function where possible.
 */
void draw_char(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8000632:	b082      	sub	sp, #8
 8000634:	b590      	push	{r4, r7, lr}
 8000636:	b089      	sub	sp, #36	; 0x24
 8000638:	af00      	add	r7, sp, #0
 800063a:	637b      	str	r3, [r7, #52]	; 0x34
 800063c:	4603      	mov	r3, r0
 800063e:	80fb      	strh	r3, [r7, #6]
 8000640:	460b      	mov	r3, r1
 8000642:	80bb      	strh	r3, [r7, #4]
 8000644:	4613      	mov	r3, r2
 8000646:	70fb      	strb	r3, [r7, #3]
	uint32_t i, b, j;

	    set_draw_window(x, y, x+font.width-1, y+font.height-1);
 8000648:	88fb      	ldrh	r3, [r7, #6]
 800064a:	b2d8      	uxtb	r0, r3
 800064c:	88bb      	ldrh	r3, [r7, #4]
 800064e:	b2d9      	uxtb	r1, r3
 8000650:	88fb      	ldrh	r3, [r7, #6]
 8000652:	b2da      	uxtb	r2, r3
 8000654:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000658:	4413      	add	r3, r2
 800065a:	b2db      	uxtb	r3, r3
 800065c:	3b01      	subs	r3, #1
 800065e:	b2dc      	uxtb	r4, r3
 8000660:	88bb      	ldrh	r3, [r7, #4]
 8000662:	b2da      	uxtb	r2, r3
 8000664:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000668:	4413      	add	r3, r2
 800066a:	b2db      	uxtb	r3, r3
 800066c:	3b01      	subs	r3, #1
 800066e:	b2db      	uxtb	r3, r3
 8000670:	4622      	mov	r2, r4
 8000672:	f7ff ff93 	bl	800059c <set_draw_window>

	    for(i = 0; i < font.height; i++)
 8000676:	2300      	movs	r3, #0
 8000678:	61fb      	str	r3, [r7, #28]
 800067a:	e048      	b.n	800070e <draw_char+0xdc>
	    {
	        b = font.data[(ch - 32) * font.height + (font.height - i - 1)];
 800067c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800067e:	78fb      	ldrb	r3, [r7, #3]
 8000680:	3b20      	subs	r3, #32
 8000682:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8000686:	fb01 f303 	mul.w	r3, r1, r3
 800068a:	4619      	mov	r1, r3
 800068c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000690:	4618      	mov	r0, r3
 8000692:	69fb      	ldr	r3, [r7, #28]
 8000694:	1ac3      	subs	r3, r0, r3
 8000696:	440b      	add	r3, r1
 8000698:	3b01      	subs	r3, #1
 800069a:	005b      	lsls	r3, r3, #1
 800069c:	4413      	add	r3, r2
 800069e:	881b      	ldrh	r3, [r3, #0]
 80006a0:	617b      	str	r3, [r7, #20]
	        for(j = 0; j < font.width; j++)
 80006a2:	2300      	movs	r3, #0
 80006a4:	61bb      	str	r3, [r7, #24]
 80006a6:	e029      	b.n	80006fc <draw_char+0xca>
	        {
	            if((b << j) & 0x8000)
 80006a8:	697a      	ldr	r2, [r7, #20]
 80006aa:	69bb      	ldr	r3, [r7, #24]
 80006ac:	fa02 f303 	lsl.w	r3, r2, r3
 80006b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d00e      	beq.n	80006d6 <draw_char+0xa4>
	            {
	                uint8_t data[] = { color >> 8, color & 0xFF };
 80006b8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80006ba:	0a1b      	lsrs	r3, r3, #8
 80006bc:	b29b      	uxth	r3, r3
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	743b      	strb	r3, [r7, #16]
 80006c2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	747b      	strb	r3, [r7, #17]
	                lcd_write_data(data, sizeof(data));
 80006c8:	f107 0310 	add.w	r3, r7, #16
 80006cc:	2102      	movs	r1, #2
 80006ce:	4618      	mov	r0, r3
 80006d0:	f7ff fd56 	bl	8000180 <lcd_write_data>
 80006d4:	e00f      	b.n	80006f6 <draw_char+0xc4>
	            } else
	            {
	                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 80006d6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80006da:	0a1b      	lsrs	r3, r3, #8
 80006dc:	b29b      	uxth	r3, r3
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	733b      	strb	r3, [r7, #12]
 80006e2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	737b      	strb	r3, [r7, #13]
	                lcd_write_data(data, sizeof(data));
 80006ea:	f107 030c 	add.w	r3, r7, #12
 80006ee:	2102      	movs	r1, #2
 80006f0:	4618      	mov	r0, r3
 80006f2:	f7ff fd45 	bl	8000180 <lcd_write_data>
	        for(j = 0; j < font.width; j++)
 80006f6:	69bb      	ldr	r3, [r7, #24]
 80006f8:	3301      	adds	r3, #1
 80006fa:	61bb      	str	r3, [r7, #24]
 80006fc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000700:	461a      	mov	r2, r3
 8000702:	69bb      	ldr	r3, [r7, #24]
 8000704:	4293      	cmp	r3, r2
 8000706:	d3cf      	bcc.n	80006a8 <draw_char+0x76>
	    for(i = 0; i < font.height; i++)
 8000708:	69fb      	ldr	r3, [r7, #28]
 800070a:	3301      	adds	r3, #1
 800070c:	61fb      	str	r3, [r7, #28]
 800070e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000712:	461a      	mov	r2, r3
 8000714:	69fb      	ldr	r3, [r7, #28]
 8000716:	4293      	cmp	r3, r2
 8000718:	d3b0      	bcc.n	800067c <draw_char+0x4a>
	            }
	        }
	    }
}
 800071a:	bf00      	nop
 800071c:	bf00      	nop
 800071e:	3724      	adds	r7, #36	; 0x24
 8000720:	46bd      	mov	sp, r7
 8000722:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000726:	b002      	add	sp, #8
 8000728:	4770      	bx	lr

0800072a <draw_string>:
/*
 * Writes a string to the display as an array of chars at position x, y with 
 * a given colour and size.
 */
void draw_string(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 800072a:	b082      	sub	sp, #8
 800072c:	b580      	push	{r7, lr}
 800072e:	b086      	sub	sp, #24
 8000730:	af04      	add	r7, sp, #16
 8000732:	603a      	str	r2, [r7, #0]
 8000734:	617b      	str	r3, [r7, #20]
 8000736:	4603      	mov	r3, r0
 8000738:	80fb      	strh	r3, [r7, #6]
 800073a:	460b      	mov	r3, r1
 800073c:	80bb      	strh	r3, [r7, #4]
    
	while(*str)
 800073e:	e02d      	b.n	800079c <draw_string+0x72>
	{
	        if(x + font.width >= WIDTH)
 8000740:	88fb      	ldrh	r3, [r7, #6]
 8000742:	7d3a      	ldrb	r2, [r7, #20]
 8000744:	4413      	add	r3, r2
 8000746:	2bdb      	cmp	r3, #219	; 0xdb
 8000748:	dd13      	ble.n	8000772 <draw_string+0x48>
	        {
	            x = 0;
 800074a:	2300      	movs	r3, #0
 800074c:	80fb      	strh	r3, [r7, #6]
	            y -= font.height;
 800074e:	7d7b      	ldrb	r3, [r7, #21]
 8000750:	b29b      	uxth	r3, r3
 8000752:	88ba      	ldrh	r2, [r7, #4]
 8000754:	1ad3      	subs	r3, r2, r3
 8000756:	80bb      	strh	r3, [r7, #4]
	            if(y - font.height >= HEIGHT)
 8000758:	88bb      	ldrh	r3, [r7, #4]
 800075a:	7d7a      	ldrb	r2, [r7, #21]
 800075c:	1a9b      	subs	r3, r3, r2
 800075e:	2baf      	cmp	r3, #175	; 0xaf
 8000760:	dc21      	bgt.n	80007a6 <draw_string+0x7c>
	            {
	                break;
	            }

	            if(*str == ' ')
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	2b20      	cmp	r3, #32
 8000768:	d103      	bne.n	8000772 <draw_string+0x48>
	            {
	                // skip spaces in the beginning of the new line
	                str++;
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	3301      	adds	r3, #1
 800076e:	603b      	str	r3, [r7, #0]
	                continue;
 8000770:	e014      	b.n	800079c <draw_string+0x72>
	            }
	        }

	        draw_char(x, y, *str, font, color, bgcolor);
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	781a      	ldrb	r2, [r3, #0]
 8000776:	88b9      	ldrh	r1, [r7, #4]
 8000778:	88f8      	ldrh	r0, [r7, #6]
 800077a:	8c3b      	ldrh	r3, [r7, #32]
 800077c:	9302      	str	r3, [sp, #8]
 800077e:	8bbb      	ldrh	r3, [r7, #28]
 8000780:	9301      	str	r3, [sp, #4]
 8000782:	69bb      	ldr	r3, [r7, #24]
 8000784:	9300      	str	r3, [sp, #0]
 8000786:	697b      	ldr	r3, [r7, #20]
 8000788:	f7ff ff53 	bl	8000632 <draw_char>
	        x += font.width;
 800078c:	7d3b      	ldrb	r3, [r7, #20]
 800078e:	b29a      	uxth	r2, r3
 8000790:	88fb      	ldrh	r3, [r7, #6]
 8000792:	4413      	add	r3, r2
 8000794:	80fb      	strh	r3, [r7, #6]
	        str++;
 8000796:	683b      	ldr	r3, [r7, #0]
 8000798:	3301      	adds	r3, #1
 800079a:	603b      	str	r3, [r7, #0]
	while(*str)
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d1cd      	bne.n	8000740 <draw_string+0x16>
	    }

}
 80007a4:	e000      	b.n	80007a8 <draw_string+0x7e>
	                break;
 80007a6:	bf00      	nop
}
 80007a8:	bf00      	nop
 80007aa:	3708      	adds	r7, #8
 80007ac:	46bd      	mov	sp, r7
 80007ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80007b2:	b002      	add	sp, #8
 80007b4:	4770      	bx	lr

080007b6 <draw_bitmap>:
 * 
 * So the scaling is done strangely here because writing individual pixels 
 * has an overhead of 26 bytes each.
 */
void draw_bitmap(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data)
{
 80007b6:	b590      	push	{r4, r7, lr}
 80007b8:	b083      	sub	sp, #12
 80007ba:	af00      	add	r7, sp, #0
 80007bc:	4604      	mov	r4, r0
 80007be:	4608      	mov	r0, r1
 80007c0:	4611      	mov	r1, r2
 80007c2:	461a      	mov	r2, r3
 80007c4:	4623      	mov	r3, r4
 80007c6:	80fb      	strh	r3, [r7, #6]
 80007c8:	4603      	mov	r3, r0
 80007ca:	80bb      	strh	r3, [r7, #4]
 80007cc:	460b      	mov	r3, r1
 80007ce:	807b      	strh	r3, [r7, #2]
 80007d0:	4613      	mov	r3, r2
 80007d2:	803b      	strh	r3, [r7, #0]
    if((x >= WIDTH) || (y >= HEIGHT)) return;
 80007d4:	88fb      	ldrh	r3, [r7, #6]
 80007d6:	2bdb      	cmp	r3, #219	; 0xdb
 80007d8:	d82d      	bhi.n	8000836 <draw_bitmap+0x80>
 80007da:	88bb      	ldrh	r3, [r7, #4]
 80007dc:	2baf      	cmp	r3, #175	; 0xaf
 80007de:	d82a      	bhi.n	8000836 <draw_bitmap+0x80>
    if((x + w - 1) >= WIDTH) return;
 80007e0:	88fa      	ldrh	r2, [r7, #6]
 80007e2:	887b      	ldrh	r3, [r7, #2]
 80007e4:	4413      	add	r3, r2
 80007e6:	2bdc      	cmp	r3, #220	; 0xdc
 80007e8:	dc27      	bgt.n	800083a <draw_bitmap+0x84>
    if((y + h - 1) >= HEIGHT) return;
 80007ea:	88ba      	ldrh	r2, [r7, #4]
 80007ec:	883b      	ldrh	r3, [r7, #0]
 80007ee:	4413      	add	r3, r2
 80007f0:	2bb0      	cmp	r3, #176	; 0xb0
 80007f2:	dc24      	bgt.n	800083e <draw_bitmap+0x88>

//    ILI9341_Select();
    set_draw_window(x, y, x+w-1, y+h-1);
 80007f4:	88fb      	ldrh	r3, [r7, #6]
 80007f6:	b2d8      	uxtb	r0, r3
 80007f8:	88bb      	ldrh	r3, [r7, #4]
 80007fa:	b2d9      	uxtb	r1, r3
 80007fc:	88fb      	ldrh	r3, [r7, #6]
 80007fe:	b2da      	uxtb	r2, r3
 8000800:	887b      	ldrh	r3, [r7, #2]
 8000802:	b2db      	uxtb	r3, r3
 8000804:	4413      	add	r3, r2
 8000806:	b2db      	uxtb	r3, r3
 8000808:	3b01      	subs	r3, #1
 800080a:	b2dc      	uxtb	r4, r3
 800080c:	88bb      	ldrh	r3, [r7, #4]
 800080e:	b2da      	uxtb	r2, r3
 8000810:	883b      	ldrh	r3, [r7, #0]
 8000812:	b2db      	uxtb	r3, r3
 8000814:	4413      	add	r3, r2
 8000816:	b2db      	uxtb	r3, r3
 8000818:	3b01      	subs	r3, #1
 800081a:	b2db      	uxtb	r3, r3
 800081c:	4622      	mov	r2, r4
 800081e:	f7ff febd 	bl	800059c <set_draw_window>
    lcd_write_data((uint8_t*) data, sizeof(uint16_t)*w*h);
 8000822:	887b      	ldrh	r3, [r7, #2]
 8000824:	883a      	ldrh	r2, [r7, #0]
 8000826:	fb02 f303 	mul.w	r3, r2, r3
 800082a:	005b      	lsls	r3, r3, #1
 800082c:	4619      	mov	r1, r3
 800082e:	69b8      	ldr	r0, [r7, #24]
 8000830:	f7ff fca6 	bl	8000180 <lcd_write_data>
 8000834:	e004      	b.n	8000840 <draw_bitmap+0x8a>
    if((x >= WIDTH) || (y >= HEIGHT)) return;
 8000836:	bf00      	nop
 8000838:	e002      	b.n	8000840 <draw_bitmap+0x8a>
    if((x + w - 1) >= WIDTH) return;
 800083a:	bf00      	nop
 800083c:	e000      	b.n	8000840 <draw_bitmap+0x8a>
    if((y + h - 1) >= HEIGHT) return;
 800083e:	bf00      	nop
}
 8000840:	370c      	adds	r7, #12
 8000842:	46bd      	mov	sp, r7
 8000844:	bd90      	pop	{r4, r7, pc}
	...

08000848 <SwitchingModes>:
	{
		"Rain", "Wall", "Woop-woop", "Jumping cube", "Text", "Lit cube", "Walking cube", "Fading", "Clear Cube"
	};

void SwitchingModes()
{
 8000848:	b590      	push	{r4, r7, lr}
 800084a:	b08d      	sub	sp, #52	; 0x34
 800084c:	af04      	add	r7, sp, #16

    if (IsModeSwithced)
 800084e:	4ba5      	ldr	r3, [pc, #660]	; (8000ae4 <SwitchingModes+0x29c>)
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	2b00      	cmp	r3, #0
 8000854:	f000 80f4 	beq.w	8000a40 <SwitchingModes+0x1f8>
    {
	IsModeSwithced = 0;
 8000858:	4ba2      	ldr	r3, [pc, #648]	; (8000ae4 <SwitchingModes+0x29c>)
 800085a:	2200      	movs	r2, #0
 800085c:	701a      	strb	r2, [r3, #0]
//	fill_rectangle(0, 0, 220, 164, COLOR_RED); не работает

	for (int8_t j = TOTAL_MODES/2; j > -(TOTAL_MODES/2); --j)
 800085e:	2304      	movs	r3, #4
 8000860:	77fb      	strb	r3, [r7, #31]
 8000862:	e09b      	b.n	800099c <SwitchingModes+0x154>
	{
	    char str1[13] = "";	//строка для вывода
 8000864:	2300      	movs	r3, #0
 8000866:	613b      	str	r3, [r7, #16]
 8000868:	f107 0314 	add.w	r3, r7, #20
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
 8000870:	605a      	str	r2, [r3, #4]
 8000872:	721a      	strb	r2, [r3, #8]
	    char str2[13] = "";	//вспомогательная строка
 8000874:	2300      	movs	r3, #0
 8000876:	603b      	str	r3, [r7, #0]
 8000878:	1d3b      	adds	r3, r7, #4
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	605a      	str	r2, [r3, #4]
 8000880:	721a      	strb	r2, [r3, #8]
	    uint8_t i;
	    int8_t SubCurrentMode = (int8_t)CurrentMode + j < 0 ? (TOTAL_MODES + (int8_t)CurrentMode + j) % (TOTAL_MODES) : ((int8_t)CurrentMode + j) % (TOTAL_MODES);
 8000882:	4b99      	ldr	r3, [pc, #612]	; (8000ae8 <SwitchingModes+0x2a0>)
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	b25b      	sxtb	r3, r3
 8000888:	461a      	mov	r2, r3
 800088a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800088e:	4413      	add	r3, r2
 8000890:	2b00      	cmp	r3, #0
 8000892:	da10      	bge.n	80008b6 <SwitchingModes+0x6e>
 8000894:	4b94      	ldr	r3, [pc, #592]	; (8000ae8 <SwitchingModes+0x2a0>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	b25b      	sxtb	r3, r3
 800089a:	f103 0208 	add.w	r2, r3, #8
 800089e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80008a2:	4413      	add	r3, r2
 80008a4:	425a      	negs	r2, r3
 80008a6:	f003 0307 	and.w	r3, r3, #7
 80008aa:	f002 0207 	and.w	r2, r2, #7
 80008ae:	bf58      	it	pl
 80008b0:	4253      	negpl	r3, r2
 80008b2:	b25b      	sxtb	r3, r3
 80008b4:	e00e      	b.n	80008d4 <SwitchingModes+0x8c>
 80008b6:	4b8c      	ldr	r3, [pc, #560]	; (8000ae8 <SwitchingModes+0x2a0>)
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	b25b      	sxtb	r3, r3
 80008bc:	461a      	mov	r2, r3
 80008be:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80008c2:	4413      	add	r3, r2
 80008c4:	425a      	negs	r2, r3
 80008c6:	f003 0307 	and.w	r3, r3, #7
 80008ca:	f002 0207 	and.w	r2, r2, #7
 80008ce:	bf58      	it	pl
 80008d0:	4253      	negpl	r3, r2
 80008d2:	b25b      	sxtb	r3, r3
 80008d4:	777b      	strb	r3, [r7, #29]
	    for (i = 0; i < ((13 - strlen(ModesStrings[SubCurrentMode])) / 2); ++i)
 80008d6:	2300      	movs	r3, #0
 80008d8:	77bb      	strb	r3, [r7, #30]
 80008da:	e010      	b.n	80008fe <SwitchingModes+0xb6>
	    {
		str1[i] = ' ';
 80008dc:	7fbb      	ldrb	r3, [r7, #30]
 80008de:	f107 0220 	add.w	r2, r7, #32
 80008e2:	4413      	add	r3, r2
 80008e4:	2220      	movs	r2, #32
 80008e6:	f803 2c10 	strb.w	r2, [r3, #-16]
		str2[i] = ' ';
 80008ea:	7fbb      	ldrb	r3, [r7, #30]
 80008ec:	f107 0220 	add.w	r2, r7, #32
 80008f0:	4413      	add	r3, r2
 80008f2:	2220      	movs	r2, #32
 80008f4:	f803 2c20 	strb.w	r2, [r3, #-32]
	    for (i = 0; i < ((13 - strlen(ModesStrings[SubCurrentMode])) / 2); ++i)
 80008f8:	7fbb      	ldrb	r3, [r7, #30]
 80008fa:	3301      	adds	r3, #1
 80008fc:	77bb      	strb	r3, [r7, #30]
 80008fe:	7fbc      	ldrb	r4, [r7, #30]
 8000900:	f997 201d 	ldrsb.w	r2, [r7, #29]
 8000904:	4613      	mov	r3, r2
 8000906:	011b      	lsls	r3, r3, #4
 8000908:	1a9b      	subs	r3, r3, r2
 800090a:	005b      	lsls	r3, r3, #1
 800090c:	4a77      	ldr	r2, [pc, #476]	; (8000aec <SwitchingModes+0x2a4>)
 800090e:	4413      	add	r3, r2
 8000910:	4618      	mov	r0, r3
 8000912:	f7ff fc1b 	bl	800014c <strlen>
 8000916:	4603      	mov	r3, r0
 8000918:	f1c3 030d 	rsb	r3, r3, #13
 800091c:	085b      	lsrs	r3, r3, #1
 800091e:	429c      	cmp	r4, r3
 8000920:	d3dc      	bcc.n	80008dc <SwitchingModes+0x94>
	    }
	    str1[i + 1] = '\0';
 8000922:	7fbb      	ldrb	r3, [r7, #30]
 8000924:	3301      	adds	r3, #1
 8000926:	f107 0220 	add.w	r2, r7, #32
 800092a:	4413      	add	r3, r2
 800092c:	2200      	movs	r2, #0
 800092e:	f803 2c10 	strb.w	r2, [r3, #-16]
	    strcat(str1, ModesStrings[SubCurrentMode]);
 8000932:	f997 201d 	ldrsb.w	r2, [r7, #29]
 8000936:	4613      	mov	r3, r2
 8000938:	011b      	lsls	r3, r3, #4
 800093a:	1a9b      	subs	r3, r3, r2
 800093c:	005b      	lsls	r3, r3, #1
 800093e:	4a6b      	ldr	r2, [pc, #428]	; (8000aec <SwitchingModes+0x2a4>)
 8000940:	441a      	add	r2, r3
 8000942:	f107 0310 	add.w	r3, r7, #16
 8000946:	4611      	mov	r1, r2
 8000948:	4618      	mov	r0, r3
 800094a:	f004 fec3 	bl	80056d4 <strcat>
	    strcat(str1, str2);
 800094e:	463a      	mov	r2, r7
 8000950:	f107 0310 	add.w	r3, r7, #16
 8000954:	4611      	mov	r1, r2
 8000956:	4618      	mov	r0, r3
 8000958:	f004 febc 	bl	80056d4 <strcat>
	    draw_string(60, 83 + 10 * -j, str1, Font_7x10, COLOR_WHITE, COLOR_RED);
 800095c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000960:	b29b      	uxth	r3, r3
 8000962:	461a      	mov	r2, r3
 8000964:	0352      	lsls	r2, r2, #13
 8000966:	1ad2      	subs	r2, r2, r3
 8000968:	0092      	lsls	r2, r2, #2
 800096a:	1ad3      	subs	r3, r2, r3
 800096c:	005b      	lsls	r3, r3, #1
 800096e:	b29b      	uxth	r3, r3
 8000970:	3353      	adds	r3, #83	; 0x53
 8000972:	b299      	uxth	r1, r3
 8000974:	4b5e      	ldr	r3, [pc, #376]	; (8000af0 <SwitchingModes+0x2a8>)
 8000976:	f107 0010 	add.w	r0, r7, #16
 800097a:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800097e:	9202      	str	r2, [sp, #8]
 8000980:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000984:	9201      	str	r2, [sp, #4]
 8000986:	685a      	ldr	r2, [r3, #4]
 8000988:	9200      	str	r2, [sp, #0]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4602      	mov	r2, r0
 800098e:	203c      	movs	r0, #60	; 0x3c
 8000990:	f7ff fecb 	bl	800072a <draw_string>
	for (int8_t j = TOTAL_MODES/2; j > -(TOTAL_MODES/2); --j)
 8000994:	7ffb      	ldrb	r3, [r7, #31]
 8000996:	3b01      	subs	r3, #1
 8000998:	b2db      	uxtb	r3, r3
 800099a:	77fb      	strb	r3, [r7, #31]
 800099c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80009a0:	f113 0f03 	cmn.w	r3, #3
 80009a4:	f6bf af5e 	bge.w	8000864 <SwitchingModes+0x1c>


	}
	draw_char(50, 83, '>', Font_7x10, COLOR_WHITE, COLOR_RED);
 80009a8:	4b51      	ldr	r3, [pc, #324]	; (8000af0 <SwitchingModes+0x2a8>)
 80009aa:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80009ae:	9202      	str	r2, [sp, #8]
 80009b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009b4:	9201      	str	r2, [sp, #4]
 80009b6:	685a      	ldr	r2, [r3, #4]
 80009b8:	9200      	str	r2, [sp, #0]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	223e      	movs	r2, #62	; 0x3e
 80009be:	2153      	movs	r1, #83	; 0x53
 80009c0:	2032      	movs	r0, #50	; 0x32
 80009c2:	f7ff fe36 	bl	8000632 <draw_char>
	draw_char(153, 83, '<', Font_7x10, COLOR_WHITE, COLOR_RED);
 80009c6:	4b4a      	ldr	r3, [pc, #296]	; (8000af0 <SwitchingModes+0x2a8>)
 80009c8:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80009cc:	9202      	str	r2, [sp, #8]
 80009ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009d2:	9201      	str	r2, [sp, #4]
 80009d4:	685a      	ldr	r2, [r3, #4]
 80009d6:	9200      	str	r2, [sp, #0]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	223c      	movs	r2, #60	; 0x3c
 80009dc:	2153      	movs	r1, #83	; 0x53
 80009de:	2099      	movs	r0, #153	; 0x99
 80009e0:	f7ff fe27 	bl	8000632 <draw_char>


	draw_bitmap(0, 103, 7, 10, Up_PTR);
 80009e4:	4b43      	ldr	r3, [pc, #268]	; (8000af4 <SwitchingModes+0x2ac>)
 80009e6:	9300      	str	r3, [sp, #0]
 80009e8:	230a      	movs	r3, #10
 80009ea:	2207      	movs	r2, #7
 80009ec:	2167      	movs	r1, #103	; 0x67
 80009ee:	2000      	movs	r0, #0
 80009f0:	f7ff fee1 	bl	80007b6 <draw_bitmap>
	draw_string(8, 103, "LU", Font_7x10, COLOR_WHITE, COLOR_RED);
 80009f4:	4b3e      	ldr	r3, [pc, #248]	; (8000af0 <SwitchingModes+0x2a8>)
 80009f6:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80009fa:	9202      	str	r2, [sp, #8]
 80009fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a00:	9201      	str	r2, [sp, #4]
 8000a02:	685a      	ldr	r2, [r3, #4]
 8000a04:	9200      	str	r2, [sp, #0]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a3b      	ldr	r2, [pc, #236]	; (8000af8 <SwitchingModes+0x2b0>)
 8000a0a:	2167      	movs	r1, #103	; 0x67
 8000a0c:	2008      	movs	r0, #8
 8000a0e:	f7ff fe8c 	bl	800072a <draw_string>
	draw_bitmap(0, 63, 7, 10, Down_PTR);
 8000a12:	4b3a      	ldr	r3, [pc, #232]	; (8000afc <SwitchingModes+0x2b4>)
 8000a14:	9300      	str	r3, [sp, #0]
 8000a16:	230a      	movs	r3, #10
 8000a18:	2207      	movs	r2, #7
 8000a1a:	213f      	movs	r1, #63	; 0x3f
 8000a1c:	2000      	movs	r0, #0
 8000a1e:	f7ff feca 	bl	80007b6 <draw_bitmap>
	draw_string(8, 63, "LB", Font_7x10, COLOR_WHITE, COLOR_RED);
 8000a22:	4b33      	ldr	r3, [pc, #204]	; (8000af0 <SwitchingModes+0x2a8>)
 8000a24:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000a28:	9202      	str	r2, [sp, #8]
 8000a2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a2e:	9201      	str	r2, [sp, #4]
 8000a30:	685a      	ldr	r2, [r3, #4]
 8000a32:	9200      	str	r2, [sp, #0]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	4a32      	ldr	r2, [pc, #200]	; (8000b00 <SwitchingModes+0x2b8>)
 8000a38:	213f      	movs	r1, #63	; 0x3f
 8000a3a:	2008      	movs	r0, #8
 8000a3c:	f7ff fe75 	bl	800072a <draw_string>
    }

    if ((IsButtonsPressed >> LB) & 1)
 8000a40:	4b30      	ldr	r3, [pc, #192]	; (8000b04 <SwitchingModes+0x2bc>)
 8000a42:	881b      	ldrh	r3, [r3, #0]
 8000a44:	f003 0301 	and.w	r3, r3, #1
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d01f      	beq.n	8000a8c <SwitchingModes+0x244>
    {
	IsButtonsPressed &= ~(1 << LB);
 8000a4c:	4b2d      	ldr	r3, [pc, #180]	; (8000b04 <SwitchingModes+0x2bc>)
 8000a4e:	881b      	ldrh	r3, [r3, #0]
 8000a50:	f023 0301 	bic.w	r3, r3, #1
 8000a54:	b29a      	uxth	r2, r3
 8000a56:	4b2b      	ldr	r3, [pc, #172]	; (8000b04 <SwitchingModes+0x2bc>)
 8000a58:	801a      	strh	r2, [r3, #0]
	CurrentMode = ((int8_t)CurrentMode + 1) % TOTAL_MODES; //учет переполнения сверху
 8000a5a:	4b23      	ldr	r3, [pc, #140]	; (8000ae8 <SwitchingModes+0x2a0>)
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	b25b      	sxtb	r3, r3
 8000a60:	3301      	adds	r3, #1
 8000a62:	425a      	negs	r2, r3
 8000a64:	f003 0307 	and.w	r3, r3, #7
 8000a68:	f002 0207 	and.w	r2, r2, #7
 8000a6c:	bf58      	it	pl
 8000a6e:	4253      	negpl	r3, r2
 8000a70:	b2da      	uxtb	r2, r3
 8000a72:	4b1d      	ldr	r3, [pc, #116]	; (8000ae8 <SwitchingModes+0x2a0>)
 8000a74:	701a      	strb	r2, [r3, #0]
	Speed = Timers_cube[CurrentMode];
 8000a76:	4b1c      	ldr	r3, [pc, #112]	; (8000ae8 <SwitchingModes+0x2a0>)
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	461a      	mov	r2, r3
 8000a7c:	4b22      	ldr	r3, [pc, #136]	; (8000b08 <SwitchingModes+0x2c0>)
 8000a7e:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8000a82:	4b22      	ldr	r3, [pc, #136]	; (8000b0c <SwitchingModes+0x2c4>)
 8000a84:	801a      	strh	r2, [r3, #0]
	IsModeSwithced = 1;
 8000a86:	4b17      	ldr	r3, [pc, #92]	; (8000ae4 <SwitchingModes+0x29c>)
 8000a88:	2201      	movs	r2, #1
 8000a8a:	701a      	strb	r2, [r3, #0]
    }
    if ((IsButtonsPressed >> LU) & 1)
 8000a8c:	4b1d      	ldr	r3, [pc, #116]	; (8000b04 <SwitchingModes+0x2bc>)
 8000a8e:	881b      	ldrh	r3, [r3, #0]
 8000a90:	089b      	lsrs	r3, r3, #2
 8000a92:	b29b      	uxth	r3, r3
 8000a94:	f003 0301 	and.w	r3, r3, #1
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d01e      	beq.n	8000ada <SwitchingModes+0x292>
    {
	IsButtonsPressed &= ~(1 << LU);
 8000a9c:	4b19      	ldr	r3, [pc, #100]	; (8000b04 <SwitchingModes+0x2bc>)
 8000a9e:	881b      	ldrh	r3, [r3, #0]
 8000aa0:	f023 0304 	bic.w	r3, r3, #4
 8000aa4:	b29a      	uxth	r2, r3
 8000aa6:	4b17      	ldr	r3, [pc, #92]	; (8000b04 <SwitchingModes+0x2bc>)
 8000aa8:	801a      	strh	r2, [r3, #0]
	CurrentMode = (int8_t) CurrentMode - 1 < 0 ?
 8000aaa:	4b0f      	ldr	r3, [pc, #60]	; (8000ae8 <SwitchingModes+0x2a0>)
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	b25b      	sxtb	r3, r3
		       TOTAL_MODES - 1 : (int8_t) CurrentMode - 1; //учет переполнения снизу
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	dd04      	ble.n	8000abe <SwitchingModes+0x276>
 8000ab4:	4b0c      	ldr	r3, [pc, #48]	; (8000ae8 <SwitchingModes+0x2a0>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	3b01      	subs	r3, #1
 8000aba:	b2db      	uxtb	r3, r3
 8000abc:	e000      	b.n	8000ac0 <SwitchingModes+0x278>
 8000abe:	2307      	movs	r3, #7
	CurrentMode = (int8_t) CurrentMode - 1 < 0 ?
 8000ac0:	4a09      	ldr	r2, [pc, #36]	; (8000ae8 <SwitchingModes+0x2a0>)
 8000ac2:	7013      	strb	r3, [r2, #0]
	Speed = Timers_cube[CurrentMode];
 8000ac4:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <SwitchingModes+0x2a0>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	461a      	mov	r2, r3
 8000aca:	4b0f      	ldr	r3, [pc, #60]	; (8000b08 <SwitchingModes+0x2c0>)
 8000acc:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8000ad0:	4b0e      	ldr	r3, [pc, #56]	; (8000b0c <SwitchingModes+0x2c4>)
 8000ad2:	801a      	strh	r2, [r3, #0]
	IsModeSwithced = 1;				//Перерисовываем экран
 8000ad4:	4b03      	ldr	r3, [pc, #12]	; (8000ae4 <SwitchingModes+0x29c>)
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	701a      	strb	r2, [r3, #0]
    }

}
 8000ada:	bf00      	nop
 8000adc:	3724      	adds	r7, #36	; 0x24
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd90      	pop	{r4, r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	20000000 	.word	0x20000000
 8000ae8:	20000001 	.word	0x20000001
 8000aec:	20000004 	.word	0x20000004
 8000af0:	20000114 	.word	0x20000114
 8000af4:	08005fb8 	.word	0x08005fb8
 8000af8:	08005f3c 	.word	0x08005f3c
 8000afc:	08006044 	.word	0x08006044
 8000b00:	08005f40 	.word	0x08005f40
 8000b04:	200001b2 	.word	0x200001b2
 8000b08:	080060d0 	.word	0x080060d0
 8000b0c:	20000002 	.word	0x20000002

08000b10 <ShowingCurrentMode>:


void ShowingCurrentMode()
{
 8000b10:	b5b0      	push	{r4, r5, r7, lr}
 8000b12:	b098      	sub	sp, #96	; 0x60
 8000b14:	af04      	add	r7, sp, #16
//    static uint8_t IsFirstIt = 1;
    if (IsModeSwithced)
 8000b16:	4b87      	ldr	r3, [pc, #540]	; (8000d34 <ShowingCurrentMode+0x224>)
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d030      	beq.n	8000b80 <ShowingCurrentMode+0x70>
    {

	IsModeSwithced = 0;
 8000b1e:	4b85      	ldr	r3, [pc, #532]	; (8000d34 <ShowingCurrentMode+0x224>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	701a      	strb	r2, [r3, #0]
	//fill_rectangle(0, 0, 220, 164, COLOR_RED);
	//HAL_Delay(100);
	char str[] = "Current mode:     Speed:";
 8000b24:	4b84      	ldr	r3, [pc, #528]	; (8000d38 <ShowingCurrentMode+0x228>)
 8000b26:	463c      	mov	r4, r7
 8000b28:	461d      	mov	r5, r3
 8000b2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b2e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b32:	c403      	stmia	r4!, {r0, r1}
 8000b34:	7022      	strb	r2, [r4, #0]
	draw_string(20, 83, str, Font_7x10, COLOR_WHITE, COLOR_RED);
 8000b36:	4b81      	ldr	r3, [pc, #516]	; (8000d3c <ShowingCurrentMode+0x22c>)
 8000b38:	4639      	mov	r1, r7
 8000b3a:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000b3e:	9202      	str	r2, [sp, #8]
 8000b40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b44:	9201      	str	r2, [sp, #4]
 8000b46:	685a      	ldr	r2, [r3, #4]
 8000b48:	9200      	str	r2, [sp, #0]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	460a      	mov	r2, r1
 8000b4e:	2153      	movs	r1, #83	; 0x53
 8000b50:	2014      	movs	r0, #20
 8000b52:	f7ff fdea 	bl	800072a <draw_string>
	sprintf(str, "Press LL for synchro");
 8000b56:	463b      	mov	r3, r7
 8000b58:	4979      	ldr	r1, [pc, #484]	; (8000d40 <ShowingCurrentMode+0x230>)
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f004 fd9a 	bl	8005694 <siprintf>
	draw_string(20, 20, str, Font_7x10, COLOR_WHITE, COLOR_RED);
 8000b60:	4b76      	ldr	r3, [pc, #472]	; (8000d3c <ShowingCurrentMode+0x22c>)
 8000b62:	4639      	mov	r1, r7
 8000b64:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000b68:	9202      	str	r2, [sp, #8]
 8000b6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b6e:	9201      	str	r2, [sp, #4]
 8000b70:	685a      	ldr	r2, [r3, #4]
 8000b72:	9200      	str	r2, [sp, #0]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	460a      	mov	r2, r1
 8000b78:	2114      	movs	r1, #20
 8000b7a:	2014      	movs	r0, #20
 8000b7c:	f7ff fdd5 	bl	800072a <draw_string>

    }
    /*---------------Выравнивание по центру(Режим)---------------------*/
    char str[30] = "";
 8000b80:	2300      	movs	r3, #0
 8000b82:	633b      	str	r3, [r7, #48]	; 0x30
 8000b84:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	609a      	str	r2, [r3, #8]
 8000b90:	60da      	str	r2, [r3, #12]
 8000b92:	611a      	str	r2, [r3, #16]
 8000b94:	615a      	str	r2, [r3, #20]
 8000b96:	831a      	strh	r2, [r3, #24]
    char str1[20] = ""; //вспомогательная строка для выравнивания
 8000b98:	2300      	movs	r3, #0
 8000b9a:	61fb      	str	r3, [r7, #28]
 8000b9c:	f107 0320 	add.w	r3, r7, #32
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
    uint8_t i;
    for (i = 0; i < ((13 - strlen(ModesStrings[CurrentMode])) / 2); ++i)
 8000baa:	2300      	movs	r3, #0
 8000bac:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8000bb0:	e014      	b.n	8000bdc <ShowingCurrentMode+0xcc>
    {
	str[i] = ' ';
 8000bb2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000bb6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000bba:	4413      	add	r3, r2
 8000bbc:	2220      	movs	r2, #32
 8000bbe:	f803 2c20 	strb.w	r2, [r3, #-32]
	str1[i] = ' ';
 8000bc2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000bc6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000bca:	4413      	add	r3, r2
 8000bcc:	2220      	movs	r2, #32
 8000bce:	f803 2c34 	strb.w	r2, [r3, #-52]
    for (i = 0; i < ((13 - strlen(ModesStrings[CurrentMode])) / 2); ++i)
 8000bd2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8000bdc:	f897 404f 	ldrb.w	r4, [r7, #79]	; 0x4f
 8000be0:	4b58      	ldr	r3, [pc, #352]	; (8000d44 <ShowingCurrentMode+0x234>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	461a      	mov	r2, r3
 8000be6:	4613      	mov	r3, r2
 8000be8:	011b      	lsls	r3, r3, #4
 8000bea:	1a9b      	subs	r3, r3, r2
 8000bec:	005b      	lsls	r3, r3, #1
 8000bee:	4a56      	ldr	r2, [pc, #344]	; (8000d48 <ShowingCurrentMode+0x238>)
 8000bf0:	4413      	add	r3, r2
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f7ff faaa 	bl	800014c <strlen>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	f1c3 030d 	rsb	r3, r3, #13
 8000bfe:	085b      	lsrs	r3, r3, #1
 8000c00:	429c      	cmp	r4, r3
 8000c02:	d3d6      	bcc.n	8000bb2 <ShowingCurrentMode+0xa2>
    }
    str[i + 1] = '\0';
 8000c04:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000c08:	3301      	adds	r3, #1
 8000c0a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000c0e:	4413      	add	r3, r2
 8000c10:	2200      	movs	r2, #0
 8000c12:	f803 2c20 	strb.w	r2, [r3, #-32]
    strcat(str, ModesStrings[CurrentMode]);
 8000c16:	4b4b      	ldr	r3, [pc, #300]	; (8000d44 <ShowingCurrentMode+0x234>)
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	4613      	mov	r3, r2
 8000c1e:	011b      	lsls	r3, r3, #4
 8000c20:	1a9b      	subs	r3, r3, r2
 8000c22:	005b      	lsls	r3, r3, #1
 8000c24:	4a48      	ldr	r2, [pc, #288]	; (8000d48 <ShowingCurrentMode+0x238>)
 8000c26:	441a      	add	r2, r3
 8000c28:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c2c:	4611      	mov	r1, r2
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f004 fd50 	bl	80056d4 <strcat>
    strcat(str, str1);
 8000c34:	f107 021c 	add.w	r2, r7, #28
 8000c38:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c3c:	4611      	mov	r1, r2
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f004 fd48 	bl	80056d4 <strcat>
    draw_string(20, 73, str, Font_7x10, COLOR_WHITE, COLOR_RED);
 8000c44:	4b3d      	ldr	r3, [pc, #244]	; (8000d3c <ShowingCurrentMode+0x22c>)
 8000c46:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000c4a:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000c4e:	9202      	str	r2, [sp, #8]
 8000c50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c54:	9201      	str	r2, [sp, #4]
 8000c56:	685a      	ldr	r2, [r3, #4]
 8000c58:	9200      	str	r2, [sp, #0]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	460a      	mov	r2, r1
 8000c5e:	2149      	movs	r1, #73	; 0x49
 8000c60:	2014      	movs	r0, #20
 8000c62:	f7ff fd62 	bl	800072a <draw_string>
    /*---------------Выравнивание по центру(Режим)---------------------*/

    /*---------------Отображение скорости(без выравнивания)------------------*/
    if (CurrentMode == LIGHTCUBE || CurrentMode == CONST_CHANGE_BRIGHTNESS)
 8000c66:	4b37      	ldr	r3, [pc, #220]	; (8000d44 <ShowingCurrentMode+0x234>)
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	2b05      	cmp	r3, #5
 8000c6c:	d003      	beq.n	8000c76 <ShowingCurrentMode+0x166>
 8000c6e:	4b35      	ldr	r3, [pc, #212]	; (8000d44 <ShowingCurrentMode+0x234>)
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	2b07      	cmp	r3, #7
 8000c74:	d106      	bne.n	8000c84 <ShowingCurrentMode+0x174>
    {
	sprintf(str, "N/A");
 8000c76:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c7a:	4934      	ldr	r1, [pc, #208]	; (8000d4c <ShowingCurrentMode+0x23c>)
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f004 fd09 	bl	8005694 <siprintf>
 8000c82:	e008      	b.n	8000c96 <ShowingCurrentMode+0x186>

    }
    else
    {
	sprintf(str, "%d     ", Speed);
 8000c84:	4b32      	ldr	r3, [pc, #200]	; (8000d50 <ShowingCurrentMode+0x240>)
 8000c86:	881b      	ldrh	r3, [r3, #0]
 8000c88:	461a      	mov	r2, r3
 8000c8a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c8e:	4931      	ldr	r1, [pc, #196]	; (8000d54 <ShowingCurrentMode+0x244>)
 8000c90:	4618      	mov	r0, r3
 8000c92:	f004 fcff 	bl	8005694 <siprintf>
    }
    draw_string(153, 73, str, Font_7x10, COLOR_WHITE, COLOR_RED);
 8000c96:	4b29      	ldr	r3, [pc, #164]	; (8000d3c <ShowingCurrentMode+0x22c>)
 8000c98:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000c9c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000ca0:	9202      	str	r2, [sp, #8]
 8000ca2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ca6:	9201      	str	r2, [sp, #4]
 8000ca8:	685a      	ldr	r2, [r3, #4]
 8000caa:	9200      	str	r2, [sp, #0]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	460a      	mov	r2, r1
 8000cb0:	2149      	movs	r1, #73	; 0x49
 8000cb2:	2099      	movs	r0, #153	; 0x99
 8000cb4:	f7ff fd39 	bl	800072a <draw_string>
    /*---------------Отображение скорости(без выравнивания)------------------*/

    /*---------------Обработка кнопок(изменение скорости)------------------*/
    if ((IsButtonsPressed >> RB) & 1)
 8000cb8:	4b27      	ldr	r3, [pc, #156]	; (8000d58 <ShowingCurrentMode+0x248>)
 8000cba:	881b      	ldrh	r3, [r3, #0]
 8000cbc:	091b      	lsrs	r3, r3, #4
 8000cbe:	b29b      	uxth	r3, r3
 8000cc0:	f003 0301 	and.w	r3, r3, #1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d015      	beq.n	8000cf4 <ShowingCurrentMode+0x1e4>
    {
	IsButtonsPressed &= ~(1 << RB);
 8000cc8:	4b23      	ldr	r3, [pc, #140]	; (8000d58 <ShowingCurrentMode+0x248>)
 8000cca:	881b      	ldrh	r3, [r3, #0]
 8000ccc:	f023 0310 	bic.w	r3, r3, #16
 8000cd0:	b29a      	uxth	r2, r3
 8000cd2:	4b21      	ldr	r3, [pc, #132]	; (8000d58 <ShowingCurrentMode+0x248>)
 8000cd4:	801a      	strh	r2, [r3, #0]

	Speed += 10;
 8000cd6:	4b1e      	ldr	r3, [pc, #120]	; (8000d50 <ShowingCurrentMode+0x240>)
 8000cd8:	881b      	ldrh	r3, [r3, #0]
 8000cda:	330a      	adds	r3, #10
 8000cdc:	b29a      	uxth	r2, r3
 8000cde:	4b1c      	ldr	r3, [pc, #112]	; (8000d50 <ShowingCurrentMode+0x240>)
 8000ce0:	801a      	strh	r2, [r3, #0]
	if (Speed > 1000)
 8000ce2:	4b1b      	ldr	r3, [pc, #108]	; (8000d50 <ShowingCurrentMode+0x240>)
 8000ce4:	881b      	ldrh	r3, [r3, #0]
 8000ce6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000cea:	d903      	bls.n	8000cf4 <ShowingCurrentMode+0x1e4>
	{
	    Speed = 1000;
 8000cec:	4b18      	ldr	r3, [pc, #96]	; (8000d50 <ShowingCurrentMode+0x240>)
 8000cee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000cf2:	801a      	strh	r2, [r3, #0]
	}

    }
    if ((IsButtonsPressed >> RU) & 1)
 8000cf4:	4b18      	ldr	r3, [pc, #96]	; (8000d58 <ShowingCurrentMode+0x248>)
 8000cf6:	881b      	ldrh	r3, [r3, #0]
 8000cf8:	099b      	lsrs	r3, r3, #6
 8000cfa:	b29b      	uxth	r3, r3
 8000cfc:	f003 0301 	and.w	r3, r3, #1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d013      	beq.n	8000d2c <ShowingCurrentMode+0x21c>
    {
	IsButtonsPressed &= ~(1 << RU);
 8000d04:	4b14      	ldr	r3, [pc, #80]	; (8000d58 <ShowingCurrentMode+0x248>)
 8000d06:	881b      	ldrh	r3, [r3, #0]
 8000d08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000d0c:	b29a      	uxth	r2, r3
 8000d0e:	4b12      	ldr	r3, [pc, #72]	; (8000d58 <ShowingCurrentMode+0x248>)
 8000d10:	801a      	strh	r2, [r3, #0]

	Speed = (int16_t)Speed - 10 < 0? 0 : Speed - 10;
 8000d12:	4b0f      	ldr	r3, [pc, #60]	; (8000d50 <ShowingCurrentMode+0x240>)
 8000d14:	881b      	ldrh	r3, [r3, #0]
 8000d16:	b21b      	sxth	r3, r3
 8000d18:	2b09      	cmp	r3, #9
 8000d1a:	dd04      	ble.n	8000d26 <ShowingCurrentMode+0x216>
 8000d1c:	4b0c      	ldr	r3, [pc, #48]	; (8000d50 <ShowingCurrentMode+0x240>)
 8000d1e:	881b      	ldrh	r3, [r3, #0]
 8000d20:	3b0a      	subs	r3, #10
 8000d22:	b29b      	uxth	r3, r3
 8000d24:	e000      	b.n	8000d28 <ShowingCurrentMode+0x218>
 8000d26:	2300      	movs	r3, #0
 8000d28:	4a09      	ldr	r2, [pc, #36]	; (8000d50 <ShowingCurrentMode+0x240>)
 8000d2a:	8013      	strh	r3, [r2, #0]
    }
    /*---------------Обработка кнопок(изменение скорости)------------------*/
}
 8000d2c:	bf00      	nop
 8000d2e:	3750      	adds	r7, #80	; 0x50
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bdb0      	pop	{r4, r5, r7, pc}
 8000d34:	20000000 	.word	0x20000000
 8000d38:	08005f68 	.word	0x08005f68
 8000d3c:	20000114 	.word	0x20000114
 8000d40:	08005f44 	.word	0x08005f44
 8000d44:	20000001 	.word	0x20000001
 8000d48:	20000004 	.word	0x20000004
 8000d4c:	08005f5c 	.word	0x08005f5c
 8000d50:	20000002 	.word	0x20000002
 8000d54:	08005f60 	.word	0x08005f60
 8000d58:	200001b2 	.word	0x200001b2

08000d5c <HAL_ADC_ConvCpltCallback>:
#define Dif_Between_100_And_0_Percent_charge_mv 464
/*
 * Константы выше подобраны опытным путем
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a06      	ldr	r2, [pc, #24]	; (8000d84 <HAL_ADC_ConvCpltCallback+0x28>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d105      	bne.n	8000d7a <HAL_ADC_ConvCpltCallback+0x1e>
	{
	    HAL_TIM_Base_Stop(&htim3);
 8000d6e:	4806      	ldr	r0, [pc, #24]	; (8000d88 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000d70:	f003 fbd0 	bl	8004514 <HAL_TIM_Base_Stop>
	    ADC_Flag = 1;		//В бесконечном цикле происходит отрисовка заряда в процентах
 8000d74:	4b05      	ldr	r3, [pc, #20]	; (8000d8c <HAL_ADC_ConvCpltCallback+0x30>)
 8000d76:	2201      	movs	r2, #1
 8000d78:	701a      	strb	r2, [r3, #0]
	}
}
 8000d7a:	bf00      	nop
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40012400 	.word	0x40012400
 8000d88:	200002a0 	.word	0x200002a0
 8000d8c:	200001ad 	.word	0x200001ad

08000d90 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
     // снимаем Chip Select только после окончания передачи DMA, не в коде программы
     // т.к. DMA работает независимо от CPU. Если это сделать в коде программы, то не исключены
	 // артефакты
     if (hspi->Instance == SPI2)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a05      	ldr	r2, [pc, #20]	; (8000db4 <HAL_SPI_TxCpltCallback+0x24>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d104      	bne.n	8000dac <HAL_SPI_TxCpltCallback+0x1c>
     {   // //проверяем какой SPI вызвал колбек

    	 HAL_GPIO_WritePin(CSX_PORT, CSX_PIN, GPIO_PIN_SET);
 8000da2:	2201      	movs	r2, #1
 8000da4:	2180      	movs	r1, #128	; 0x80
 8000da6:	4804      	ldr	r0, [pc, #16]	; (8000db8 <HAL_SPI_TxCpltCallback+0x28>)
 8000da8:	f002 f9e7 	bl	800317a <HAL_GPIO_WritePin>
     }
}
 8000dac:	bf00      	nop
 8000dae:	3708      	adds	r7, #8
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	40003800 	.word	0x40003800
 8000db8:	40010c00 	.word	0x40010c00

08000dbc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
    if(huart == &huart3)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	4a13      	ldr	r2, [pc, #76]	; (8000e14 <HAL_UART_RxCpltCallback+0x58>)
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	d11e      	bne.n	8000e0a <HAL_UART_RxCpltCallback+0x4e>
    {
	IsModeRxd = 1;
 8000dcc:	4b12      	ldr	r3, [pc, #72]	; (8000e18 <HAL_UART_RxCpltCallback+0x5c>)
 8000dce:	2201      	movs	r2, #1
 8000dd0:	701a      	strb	r2, [r3, #0]
	if(SynchroFlag)
 8000dd2:	4b12      	ldr	r3, [pc, #72]	; (8000e1c <HAL_UART_RxCpltCallback+0x60>)
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d00f      	beq.n	8000dfa <HAL_UART_RxCpltCallback+0x3e>
	{
	    SynchroFlag = 0;
 8000dda:	4b10      	ldr	r3, [pc, #64]	; (8000e1c <HAL_UART_RxCpltCallback+0x60>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	701a      	strb	r2, [r3, #0]
	    CurrentMode = RecievedMode; //Перезапись режима
 8000de0:	4b0f      	ldr	r3, [pc, #60]	; (8000e20 <HAL_UART_RxCpltCallback+0x64>)
 8000de2:	781a      	ldrb	r2, [r3, #0]
 8000de4:	4b0f      	ldr	r3, [pc, #60]	; (8000e24 <HAL_UART_RxCpltCallback+0x68>)
 8000de6:	701a      	strb	r2, [r3, #0]
	    Speed = Timers_cube[RecievedMode]; //Сброс таймеров(со стороны основной МПС произошло тоже самое)
 8000de8:	4b0d      	ldr	r3, [pc, #52]	; (8000e20 <HAL_UART_RxCpltCallback+0x64>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	461a      	mov	r2, r3
 8000dee:	4b0e      	ldr	r3, [pc, #56]	; (8000e28 <HAL_UART_RxCpltCallback+0x6c>)
 8000df0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000df4:	b21a      	sxth	r2, r3
 8000df6:	4b0d      	ldr	r3, [pc, #52]	; (8000e2c <HAL_UART_RxCpltCallback+0x70>)
 8000df8:	801a      	strh	r2, [r3, #0]
	}
	TIM4->EGR = TIM_EGR_UG;
 8000dfa:	4b0d      	ldr	r3, [pc, #52]	; (8000e30 <HAL_UART_RxCpltCallback+0x74>)
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	615a      	str	r2, [r3, #20]
	HAL_UART_Receive_IT(&huart3, &RecievedMode, 1);
 8000e00:	2201      	movs	r2, #1
 8000e02:	4907      	ldr	r1, [pc, #28]	; (8000e20 <HAL_UART_RxCpltCallback+0x64>)
 8000e04:	4803      	ldr	r0, [pc, #12]	; (8000e14 <HAL_UART_RxCpltCallback+0x58>)
 8000e06:	f004 f8bc 	bl	8004f82 <HAL_UART_Receive_IT>
    }
}
 8000e0a:	bf00      	nop
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	20000260 	.word	0x20000260
 8000e18:	200001a9 	.word	0x200001a9
 8000e1c:	200001ac 	.word	0x200001ac
 8000e20:	200001a8 	.word	0x200001a8
 8000e24:	20000001 	.word	0x20000001
 8000e28:	080060d0 	.word	0x080060d0
 8000e2c:	20000002 	.word	0x20000002
 8000e30:	40000800 	.word	0x40000800

08000e34 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
    if(htim->Instance == TIM4)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a08      	ldr	r2, [pc, #32]	; (8000e64 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d109      	bne.n	8000e5a <HAL_TIM_PeriodElapsedCallback+0x26>
    {
	HAL_TIM_Base_Stop_IT(&htim4);
 8000e46:	4808      	ldr	r0, [pc, #32]	; (8000e68 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000e48:	f003 fbdc 	bl	8004604 <HAL_TIM_Base_Stop_IT>
	DrawBTbmp = IsModeRxd;
 8000e4c:	4b07      	ldr	r3, [pc, #28]	; (8000e6c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000e4e:	781a      	ldrb	r2, [r3, #0]
 8000e50:	4b07      	ldr	r3, [pc, #28]	; (8000e70 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000e52:	701a      	strb	r2, [r3, #0]
	IsModeRxd = 0;
 8000e54:	4b05      	ldr	r3, [pc, #20]	; (8000e6c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	701a      	strb	r2, [r3, #0]

    }
}
 8000e5a:	bf00      	nop
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	40000800 	.word	0x40000800
 8000e68:	20000218 	.word	0x20000218
 8000e6c:	200001a9 	.word	0x200001a9
 8000e70:	200001aa 	.word	0x200001aa

08000e74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b086      	sub	sp, #24
 8000e78:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
menumode_t CurrentMode = ShowingCurrentMode;
 8000e7a:	4b6f      	ldr	r3, [pc, #444]	; (8001038 <main+0x1c4>)
 8000e7c:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e7e:	f000 ff59 	bl	8001d34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e82:	f000 f905 	bl	8001090 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e86:	f000 fabf 	bl	8001408 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e8a:	f000 fa9f 	bl	80013cc <MX_DMA_Init>
  MX_ADC1_Init();
 8000e8e:	f000 f959 	bl	8001144 <MX_ADC1_Init>
  MX_SPI2_Init();
 8000e92:	f000 f995 	bl	80011c0 <MX_SPI2_Init>
  MX_USART3_UART_Init();
 8000e96:	f000 fa6f 	bl	8001378 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8000e9a:	f000 f9c7 	bl	800122c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000e9e:	f000 fa13 	bl	80012c8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  __HAL_TIM_CLEAR_FLAG(&htim4, TIM_SR_UIF); //очищаем флаг события таймера, чтобы прерывание не сработало раньше времени
 8000ea2:	4b66      	ldr	r3, [pc, #408]	; (800103c <main+0x1c8>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f06f 0201 	mvn.w	r2, #1
 8000eaa:	611a      	str	r2, [r3, #16]
  g_DrawChrgBmp = (!(GPIOC->IDR >> 13) & 1);
 8000eac:	4b64      	ldr	r3, [pc, #400]	; (8001040 <main+0x1cc>)
 8000eae:	689b      	ldr	r3, [r3, #8]
 8000eb0:	0b5b      	lsrs	r3, r3, #13
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	bf0c      	ite	eq
 8000eb6:	2301      	moveq	r3, #1
 8000eb8:	2300      	movne	r3, #0
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	4b61      	ldr	r3, [pc, #388]	; (8001044 <main+0x1d0>)
 8000ec0:	701a      	strb	r2, [r3, #0]

//ILI9225_Unselect();
  lcd_init();
 8000ec2:	f7ff f9db 	bl	800027c <lcd_init>
  fill_rectangle(0, 0, 220, 176, COLOR_RED);
 8000ec6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000eca:	9300      	str	r3, [sp, #0]
 8000ecc:	23b0      	movs	r3, #176	; 0xb0
 8000ece:	22dc      	movs	r2, #220	; 0xdc
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	2000      	movs	r0, #0
 8000ed4:	f7ff fad0 	bl	8000478 <fill_rectangle>
  fill_rectangle(0, 164, 220, 176, COLOR_DARKRED);
 8000ed8:	f44f 4328 	mov.w	r3, #43008	; 0xa800
 8000edc:	9300      	str	r3, [sp, #0]
 8000ede:	23b0      	movs	r3, #176	; 0xb0
 8000ee0:	22dc      	movs	r2, #220	; 0xdc
 8000ee2:	21a4      	movs	r1, #164	; 0xa4
 8000ee4:	2000      	movs	r0, #0
 8000ee6:	f7ff fac7 	bl	8000478 <fill_rectangle>
  HAL_TIM_Base_Start(&htim3);
 8000eea:	4857      	ldr	r0, [pc, #348]	; (8001048 <main+0x1d4>)
 8000eec:	f003 fac8 	bl	8004480 <HAL_TIM_Base_Start>

  HAL_ADCEx_Calibration_Start(&hadc1);
 8000ef0:	4856      	ldr	r0, [pc, #344]	; (800104c <main+0x1d8>)
 8000ef2:	f001 fb8f 	bl	8002614 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_IT(&hadc1);
 8000ef6:	4855      	ldr	r0, [pc, #340]	; (800104c <main+0x1d8>)
 8000ef8:	f001 f87a 	bl	8001ff0 <HAL_ADC_Start_IT>
  TIM3->EGR = TIM_EGR_UG;				//Пренудительно генерируем событие, чтобы сразу запустить ацп
 8000efc:	4b54      	ldr	r3, [pc, #336]	; (8001050 <main+0x1dc>)
 8000efe:	2201      	movs	r2, #1
 8000f00:	615a      	str	r2, [r3, #20]

  //draw_bitmap(183, 165, 7, 10, lightning_bmp);
  HAL_UART_Receive_IT(&huart3, &RecievedMode, 1);
 8000f02:	2201      	movs	r2, #1
 8000f04:	4953      	ldr	r1, [pc, #332]	; (8001054 <main+0x1e0>)
 8000f06:	4854      	ldr	r0, [pc, #336]	; (8001058 <main+0x1e4>)
 8000f08:	f004 f83b 	bl	8004f82 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Post_Processing_Buttons();//отработка антидребезга
 8000f0c:	f000 fcde 	bl	80018cc <Post_Processing_Buttons>
//	  	  if((IsButtonsPressed >> LL) & 1) //тест кнопок
//	  	  {
//	  		fill_rectangle(0, 0, 220, 176, COLOR_SILVER);
//	  		IsButtonsPressed&= ~(1 << LL);
//	  	  }
	if ((IsButtonsPressed >> OK) & 1)
 8000f10:	4b52      	ldr	r3, [pc, #328]	; (800105c <main+0x1e8>)
 8000f12:	881b      	ldrh	r3, [r3, #0]
 8000f14:	0a1b      	lsrs	r3, r3, #8
 8000f16:	b29b      	uxth	r3, r3
 8000f18:	f003 0301 	and.w	r3, r3, #1
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d022      	beq.n	8000f66 <main+0xf2>
	{
	    MenuMode ^= 1;          //инвертируем флаг по нажатию на кнопку OK
 8000f20:	4b4f      	ldr	r3, [pc, #316]	; (8001060 <main+0x1ec>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	f083 0301 	eor.w	r3, r3, #1
 8000f28:	b2da      	uxtb	r2, r3
 8000f2a:	4b4d      	ldr	r3, [pc, #308]	; (8001060 <main+0x1ec>)
 8000f2c:	701a      	strb	r2, [r3, #0]
	    IsButtonsPressed &= ~(1 << OK);
 8000f2e:	4b4b      	ldr	r3, [pc, #300]	; (800105c <main+0x1e8>)
 8000f30:	881b      	ldrh	r3, [r3, #0]
 8000f32:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000f36:	b29a      	uxth	r2, r3
 8000f38:	4b48      	ldr	r3, [pc, #288]	; (800105c <main+0x1e8>)
 8000f3a:	801a      	strh	r2, [r3, #0]

	    IsModeSwithced = 1;
 8000f3c:	4b49      	ldr	r3, [pc, #292]	; (8001064 <main+0x1f0>)
 8000f3e:	2201      	movs	r2, #1
 8000f40:	701a      	strb	r2, [r3, #0]
	    fill_rectangle(0, 0, 220, 164, COLOR_RED);
 8000f42:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000f46:	9300      	str	r3, [sp, #0]
 8000f48:	23a4      	movs	r3, #164	; 0xa4
 8000f4a:	22dc      	movs	r2, #220	; 0xdc
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	2000      	movs	r0, #0
 8000f50:	f7ff fa92 	bl	8000478 <fill_rectangle>
	    if (MenuMode)				//В зависимости от режима, заставляем указатель режима указывать на нужный нам режим
 8000f54:	4b42      	ldr	r3, [pc, #264]	; (8001060 <main+0x1ec>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d002      	beq.n	8000f62 <main+0xee>
	    {
		CurrentMode = SwitchingModes;
 8000f5c:	4b42      	ldr	r3, [pc, #264]	; (8001068 <main+0x1f4>)
 8000f5e:	607b      	str	r3, [r7, #4]
 8000f60:	e001      	b.n	8000f66 <main+0xf2>

	    }
	    else
	    {
		CurrentMode = ShowingCurrentMode;
 8000f62:	4b35      	ldr	r3, [pc, #212]	; (8001038 <main+0x1c4>)
 8000f64:	607b      	str	r3, [r7, #4]
	    }

//	  	    EXTI->IMR |= 1 << OK;
	}

	CurrentMode();	//Вызываем нужный режим по указателю
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4798      	blx	r3


	if(DrawBTbmp)
 8000f6a:	4b40      	ldr	r3, [pc, #256]	; (800106c <main+0x1f8>)
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d008      	beq.n	8000f84 <main+0x110>
	{
	    draw_bitmap(175, 164, 7, 12, BL_Bmp); //Если ответ есть, нарисовать иконку
 8000f72:	4b3f      	ldr	r3, [pc, #252]	; (8001070 <main+0x1fc>)
 8000f74:	9300      	str	r3, [sp, #0]
 8000f76:	230c      	movs	r3, #12
 8000f78:	2207      	movs	r2, #7
 8000f7a:	21a4      	movs	r1, #164	; 0xa4
 8000f7c:	20af      	movs	r0, #175	; 0xaf
 8000f7e:	f7ff fc1a 	bl	80007b6 <draw_bitmap>
 8000f82:	e008      	b.n	8000f96 <main+0x122>
	}
	else
	{
	    fill_rectangle(175, 164, 189, 177, COLOR_DARKRED); //иначе затереть
 8000f84:	f44f 4328 	mov.w	r3, #43008	; 0xa800
 8000f88:	9300      	str	r3, [sp, #0]
 8000f8a:	23b1      	movs	r3, #177	; 0xb1
 8000f8c:	22bd      	movs	r2, #189	; 0xbd
 8000f8e:	21a4      	movs	r1, #164	; 0xa4
 8000f90:	20af      	movs	r0, #175	; 0xaf
 8000f92:	f7ff fa71 	bl	8000478 <fill_rectangle>
	}

	if(g_DrawChrgBmp)
 8000f96:	4b2b      	ldr	r3, [pc, #172]	; (8001044 <main+0x1d0>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d008      	beq.n	8000fb0 <main+0x13c>
	{
	    draw_bitmap(160, 164, 7, 12, lightning_bmp);
 8000f9e:	4b35      	ldr	r3, [pc, #212]	; (8001074 <main+0x200>)
 8000fa0:	9300      	str	r3, [sp, #0]
 8000fa2:	230c      	movs	r3, #12
 8000fa4:	2207      	movs	r2, #7
 8000fa6:	21a4      	movs	r1, #164	; 0xa4
 8000fa8:	20a0      	movs	r0, #160	; 0xa0
 8000faa:	f7ff fc04 	bl	80007b6 <draw_bitmap>
 8000fae:	e008      	b.n	8000fc2 <main+0x14e>
	}
	else
	{
	    fill_rectangle(160, 164, 174, 177, COLOR_DARKRED);
 8000fb0:	f44f 4328 	mov.w	r3, #43008	; 0xa800
 8000fb4:	9300      	str	r3, [sp, #0]
 8000fb6:	23b1      	movs	r3, #177	; 0xb1
 8000fb8:	22ae      	movs	r2, #174	; 0xae
 8000fba:	21a4      	movs	r1, #164	; 0xa4
 8000fbc:	20a0      	movs	r0, #160	; 0xa0
 8000fbe:	f7ff fa5b 	bl	8000478 <fill_rectangle>
	}

	if (ADC_Flag)
 8000fc2:	4b2d      	ldr	r3, [pc, #180]	; (8001078 <main+0x204>)
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d0a0      	beq.n	8000f0c <main+0x98>
	{

	    uint16_t mVoltage = ((336800U / 4096) * HAL_ADC_GetValue(&hadc1))
 8000fca:	4820      	ldr	r0, [pc, #128]	; (800104c <main+0x1d8>)
 8000fcc:	f001 f8c6 	bl	800215c <HAL_ADC_GetValue>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2252      	movs	r2, #82	; 0x52
 8000fd4:	fb02 f303 	mul.w	r3, r2, r3
		    / 100;
 8000fd8:	4a28      	ldr	r2, [pc, #160]	; (800107c <main+0x208>)
 8000fda:	fba2 2303 	umull	r2, r3, r2, r3
 8000fde:	095b      	lsrs	r3, r3, #5
	    uint16_t mVoltage = ((336800U / 4096) * HAL_ADC_GetValue(&hadc1))
 8000fe0:	807b      	strh	r3, [r7, #2]
	    uint8_t ChargePercent = ((mVoltage - MIN_Percent_charge_mV) * 100)
 8000fe2:	887b      	ldrh	r3, [r7, #2]
 8000fe4:	f2a3 6372 	subw	r3, r3, #1650	; 0x672
 8000fe8:	2264      	movs	r2, #100	; 0x64
 8000fea:	fb02 f303 	mul.w	r3, r2, r3
		    / Dif_Between_100_And_0_Percent_charge_mv;
 8000fee:	4a24      	ldr	r2, [pc, #144]	; (8001080 <main+0x20c>)
 8000ff0:	fb82 1203 	smull	r1, r2, r2, r3
 8000ff4:	441a      	add	r2, r3
 8000ff6:	1212      	asrs	r2, r2, #8
 8000ff8:	17db      	asrs	r3, r3, #31
 8000ffa:	1ad3      	subs	r3, r2, r3
	    uint8_t ChargePercent = ((mVoltage - MIN_Percent_charge_mV) * 100)
 8000ffc:	707b      	strb	r3, [r7, #1]

	    sprintf(ChargePercentOutString, "%d%c ", ChargePercent, 37);
 8000ffe:	787a      	ldrb	r2, [r7, #1]
 8001000:	2325      	movs	r3, #37	; 0x25
 8001002:	4920      	ldr	r1, [pc, #128]	; (8001084 <main+0x210>)
 8001004:	4820      	ldr	r0, [pc, #128]	; (8001088 <main+0x214>)
 8001006:	f004 fb45 	bl	8005694 <siprintf>
	    ADC_Flag = 0;
 800100a:	4b1b      	ldr	r3, [pc, #108]	; (8001078 <main+0x204>)
 800100c:	2200      	movs	r2, #0
 800100e:	701a      	strb	r2, [r3, #0]
	    HAL_TIM_Base_Start(&htim3);
 8001010:	480d      	ldr	r0, [pc, #52]	; (8001048 <main+0x1d4>)
 8001012:	f003 fa35 	bl	8004480 <HAL_TIM_Base_Start>
	    draw_string(190, 164, ChargePercentOutString, Font_7x10,
 8001016:	4b1d      	ldr	r3, [pc, #116]	; (800108c <main+0x218>)
 8001018:	f44f 4228 	mov.w	r2, #43008	; 0xa800
 800101c:	9202      	str	r2, [sp, #8]
 800101e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001022:	9201      	str	r2, [sp, #4]
 8001024:	685a      	ldr	r2, [r3, #4]
 8001026:	9200      	str	r2, [sp, #0]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a17      	ldr	r2, [pc, #92]	; (8001088 <main+0x214>)
 800102c:	21a4      	movs	r1, #164	; 0xa4
 800102e:	20be      	movs	r0, #190	; 0xbe
 8001030:	f7ff fb7b 	bl	800072a <draw_string>
	  Post_Processing_Buttons();//отработка антидребезга
 8001034:	e76a      	b.n	8000f0c <main+0x98>
 8001036:	bf00      	nop
 8001038:	08000b11 	.word	0x08000b11
 800103c:	20000218 	.word	0x20000218
 8001040:	40011000 	.word	0x40011000
 8001044:	200001ab 	.word	0x200001ab
 8001048:	200002a0 	.word	0x200002a0
 800104c:	200002e8 	.word	0x200002e8
 8001050:	40000400 	.word	0x40000400
 8001054:	200001a8 	.word	0x200001a8
 8001058:	20000260 	.word	0x20000260
 800105c:	200001b2 	.word	0x200001b2
 8001060:	200001ae 	.word	0x200001ae
 8001064:	20000000 	.word	0x20000000
 8001068:	08000849 	.word	0x08000849
 800106c:	200001aa 	.word	0x200001aa
 8001070:	080068d8 	.word	0x080068d8
 8001074:	0800684c 	.word	0x0800684c
 8001078:	200001ad 	.word	0x200001ad
 800107c:	51eb851f 	.word	0x51eb851f
 8001080:	8d3dcb09 	.word	0x8d3dcb09
 8001084:	08005f84 	.word	0x08005f84
 8001088:	20000318 	.word	0x20000318
 800108c:	20000114 	.word	0x20000114

08001090 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b094      	sub	sp, #80	; 0x50
 8001094:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001096:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800109a:	2228      	movs	r2, #40	; 0x28
 800109c:	2100      	movs	r1, #0
 800109e:	4618      	mov	r0, r3
 80010a0:	f004 faf0 	bl	8005684 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010a4:	f107 0314 	add.w	r3, r7, #20
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010b4:	1d3b      	adds	r3, r7, #4
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	605a      	str	r2, [r3, #4]
 80010bc:	609a      	str	r2, [r3, #8]
 80010be:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010c0:	2301      	movs	r3, #1
 80010c2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80010ca:	2300      	movs	r3, #0
 80010cc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010ce:	2301      	movs	r3, #1
 80010d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010d2:	2302      	movs	r3, #2
 80010d4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80010dc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80010e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010e6:	4618      	mov	r0, r3
 80010e8:	f002 f878 	bl	80031dc <HAL_RCC_OscConfig>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80010f2:	f000 fa45 	bl	8001580 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010f6:	230f      	movs	r3, #15
 80010f8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010fa:	2302      	movs	r3, #2
 80010fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80010fe:	2380      	movs	r3, #128	; 0x80
 8001100:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001102:	2300      	movs	r3, #0
 8001104:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001106:	2300      	movs	r3, #0
 8001108:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800110a:	f107 0314 	add.w	r3, r7, #20
 800110e:	2102      	movs	r1, #2
 8001110:	4618      	mov	r0, r3
 8001112:	f002 fae3 	bl	80036dc <HAL_RCC_ClockConfig>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800111c:	f000 fa30 	bl	8001580 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001120:	2302      	movs	r3, #2
 8001122:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV4;
 8001124:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001128:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800112a:	1d3b      	adds	r3, r7, #4
 800112c:	4618      	mov	r0, r3
 800112e:	f002 fc6f 	bl	8003a10 <HAL_RCCEx_PeriphCLKConfig>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001138:	f000 fa22 	bl	8001580 <Error_Handler>
  }
}
 800113c:	bf00      	nop
 800113e:	3750      	adds	r7, #80	; 0x50
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}

08001144 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800114a:	1d3b      	adds	r3, r7, #4
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	605a      	str	r2, [r3, #4]
 8001152:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001154:	4b18      	ldr	r3, [pc, #96]	; (80011b8 <MX_ADC1_Init+0x74>)
 8001156:	4a19      	ldr	r2, [pc, #100]	; (80011bc <MX_ADC1_Init+0x78>)
 8001158:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800115a:	4b17      	ldr	r3, [pc, #92]	; (80011b8 <MX_ADC1_Init+0x74>)
 800115c:	2200      	movs	r2, #0
 800115e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001160:	4b15      	ldr	r3, [pc, #84]	; (80011b8 <MX_ADC1_Init+0x74>)
 8001162:	2200      	movs	r2, #0
 8001164:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001166:	4b14      	ldr	r3, [pc, #80]	; (80011b8 <MX_ADC1_Init+0x74>)
 8001168:	2200      	movs	r2, #0
 800116a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 800116c:	4b12      	ldr	r3, [pc, #72]	; (80011b8 <MX_ADC1_Init+0x74>)
 800116e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001172:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001174:	4b10      	ldr	r3, [pc, #64]	; (80011b8 <MX_ADC1_Init+0x74>)
 8001176:	2200      	movs	r2, #0
 8001178:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800117a:	4b0f      	ldr	r3, [pc, #60]	; (80011b8 <MX_ADC1_Init+0x74>)
 800117c:	2201      	movs	r2, #1
 800117e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001180:	480d      	ldr	r0, [pc, #52]	; (80011b8 <MX_ADC1_Init+0x74>)
 8001182:	f000 fe5d 	bl	8001e40 <HAL_ADC_Init>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800118c:	f000 f9f8 	bl	8001580 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001190:	2300      	movs	r3, #0
 8001192:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001194:	2301      	movs	r3, #1
 8001196:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8001198:	2306      	movs	r3, #6
 800119a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800119c:	1d3b      	adds	r3, r7, #4
 800119e:	4619      	mov	r1, r3
 80011a0:	4805      	ldr	r0, [pc, #20]	; (80011b8 <MX_ADC1_Init+0x74>)
 80011a2:	f001 f8b3 	bl	800230c <HAL_ADC_ConfigChannel>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80011ac:	f000 f9e8 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011b0:	bf00      	nop
 80011b2:	3710      	adds	r7, #16
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	200002e8 	.word	0x200002e8
 80011bc:	40012400 	.word	0x40012400

080011c0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80011c4:	4b17      	ldr	r3, [pc, #92]	; (8001224 <MX_SPI2_Init+0x64>)
 80011c6:	4a18      	ldr	r2, [pc, #96]	; (8001228 <MX_SPI2_Init+0x68>)
 80011c8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80011ca:	4b16      	ldr	r3, [pc, #88]	; (8001224 <MX_SPI2_Init+0x64>)
 80011cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011d0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80011d2:	4b14      	ldr	r3, [pc, #80]	; (8001224 <MX_SPI2_Init+0x64>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80011d8:	4b12      	ldr	r3, [pc, #72]	; (8001224 <MX_SPI2_Init+0x64>)
 80011da:	2200      	movs	r2, #0
 80011dc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011de:	4b11      	ldr	r3, [pc, #68]	; (8001224 <MX_SPI2_Init+0x64>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011e4:	4b0f      	ldr	r3, [pc, #60]	; (8001224 <MX_SPI2_Init+0x64>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80011ea:	4b0e      	ldr	r3, [pc, #56]	; (8001224 <MX_SPI2_Init+0x64>)
 80011ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011f0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011f2:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <MX_SPI2_Init+0x64>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011f8:	4b0a      	ldr	r3, [pc, #40]	; (8001224 <MX_SPI2_Init+0x64>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80011fe:	4b09      	ldr	r3, [pc, #36]	; (8001224 <MX_SPI2_Init+0x64>)
 8001200:	2200      	movs	r2, #0
 8001202:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001204:	4b07      	ldr	r3, [pc, #28]	; (8001224 <MX_SPI2_Init+0x64>)
 8001206:	2200      	movs	r2, #0
 8001208:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800120a:	4b06      	ldr	r3, [pc, #24]	; (8001224 <MX_SPI2_Init+0x64>)
 800120c:	220a      	movs	r2, #10
 800120e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001210:	4804      	ldr	r0, [pc, #16]	; (8001224 <MX_SPI2_Init+0x64>)
 8001212:	f002 fd77 	bl	8003d04 <HAL_SPI_Init>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800121c:	f000 f9b0 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001220:	bf00      	nop
 8001222:	bd80      	pop	{r7, pc}
 8001224:	200001c0 	.word	0x200001c0
 8001228:	40003800 	.word	0x40003800

0800122c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b086      	sub	sp, #24
 8001230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001232:	f107 0308 	add.w	r3, r7, #8
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	605a      	str	r2, [r3, #4]
 800123c:	609a      	str	r2, [r3, #8]
 800123e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001240:	463b      	mov	r3, r7
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001248:	4b1d      	ldr	r3, [pc, #116]	; (80012c0 <MX_TIM3_Init+0x94>)
 800124a:	4a1e      	ldr	r2, [pc, #120]	; (80012c4 <MX_TIM3_Init+0x98>)
 800124c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 65535;
 800124e:	4b1c      	ldr	r3, [pc, #112]	; (80012c0 <MX_TIM3_Init+0x94>)
 8001250:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001254:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001256:	4b1a      	ldr	r3, [pc, #104]	; (80012c0 <MX_TIM3_Init+0x94>)
 8001258:	2200      	movs	r2, #0
 800125a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2184;
 800125c:	4b18      	ldr	r3, [pc, #96]	; (80012c0 <MX_TIM3_Init+0x94>)
 800125e:	f640 0288 	movw	r2, #2184	; 0x888
 8001262:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001264:	4b16      	ldr	r3, [pc, #88]	; (80012c0 <MX_TIM3_Init+0x94>)
 8001266:	2200      	movs	r2, #0
 8001268:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800126a:	4b15      	ldr	r3, [pc, #84]	; (80012c0 <MX_TIM3_Init+0x94>)
 800126c:	2200      	movs	r2, #0
 800126e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001270:	4813      	ldr	r0, [pc, #76]	; (80012c0 <MX_TIM3_Init+0x94>)
 8001272:	f003 f8b5 	bl	80043e0 <HAL_TIM_Base_Init>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800127c:	f000 f980 	bl	8001580 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001280:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001284:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001286:	f107 0308 	add.w	r3, r7, #8
 800128a:	4619      	mov	r1, r3
 800128c:	480c      	ldr	r0, [pc, #48]	; (80012c0 <MX_TIM3_Init+0x94>)
 800128e:	f003 fb48 	bl	8004922 <HAL_TIM_ConfigClockSource>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001298:	f000 f972 	bl	8001580 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800129c:	2320      	movs	r3, #32
 800129e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012a0:	2300      	movs	r3, #0
 80012a2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012a4:	463b      	mov	r3, r7
 80012a6:	4619      	mov	r1, r3
 80012a8:	4805      	ldr	r0, [pc, #20]	; (80012c0 <MX_TIM3_Init+0x94>)
 80012aa:	f003 fd1b 	bl	8004ce4 <HAL_TIMEx_MasterConfigSynchronization>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80012b4:	f000 f964 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80012b8:	bf00      	nop
 80012ba:	3718      	adds	r7, #24
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	200002a0 	.word	0x200002a0
 80012c4:	40000400 	.word	0x40000400

080012c8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b086      	sub	sp, #24
 80012cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ce:	f107 0308 	add.w	r3, r7, #8
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	605a      	str	r2, [r3, #4]
 80012d8:	609a      	str	r2, [r3, #8]
 80012da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012dc:	463b      	mov	r3, r7
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80012e4:	4b22      	ldr	r3, [pc, #136]	; (8001370 <MX_TIM4_Init+0xa8>)
 80012e6:	4a23      	ldr	r2, [pc, #140]	; (8001374 <MX_TIM4_Init+0xac>)
 80012e8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 359;
 80012ea:	4b21      	ldr	r3, [pc, #132]	; (8001370 <MX_TIM4_Init+0xa8>)
 80012ec:	f240 1267 	movw	r2, #359	; 0x167
 80012f0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012f2:	4b1f      	ldr	r3, [pc, #124]	; (8001370 <MX_TIM4_Init+0xa8>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80012f8:	4b1d      	ldr	r3, [pc, #116]	; (8001370 <MX_TIM4_Init+0xa8>)
 80012fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012fe:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001300:	4b1b      	ldr	r3, [pc, #108]	; (8001370 <MX_TIM4_Init+0xa8>)
 8001302:	2200      	movs	r2, #0
 8001304:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001306:	4b1a      	ldr	r3, [pc, #104]	; (8001370 <MX_TIM4_Init+0xa8>)
 8001308:	2200      	movs	r2, #0
 800130a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800130c:	4818      	ldr	r0, [pc, #96]	; (8001370 <MX_TIM4_Init+0xa8>)
 800130e:	f003 f867 	bl	80043e0 <HAL_TIM_Base_Init>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001318:	f000 f932 	bl	8001580 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800131c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001320:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001322:	f107 0308 	add.w	r3, r7, #8
 8001326:	4619      	mov	r1, r3
 8001328:	4811      	ldr	r0, [pc, #68]	; (8001370 <MX_TIM4_Init+0xa8>)
 800132a:	f003 fafa 	bl	8004922 <HAL_TIM_ConfigClockSource>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001334:	f000 f924 	bl	8001580 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim4, TIM_OPMODE_SINGLE) != HAL_OK)
 8001338:	2108      	movs	r1, #8
 800133a:	480d      	ldr	r0, [pc, #52]	; (8001370 <MX_TIM4_Init+0xa8>)
 800133c:	f003 f990 	bl	8004660 <HAL_TIM_OnePulse_Init>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001346:	f000 f91b 	bl	8001580 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800134a:	2300      	movs	r3, #0
 800134c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800134e:	2300      	movs	r3, #0
 8001350:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001352:	463b      	mov	r3, r7
 8001354:	4619      	mov	r1, r3
 8001356:	4806      	ldr	r0, [pc, #24]	; (8001370 <MX_TIM4_Init+0xa8>)
 8001358:	f003 fcc4 	bl	8004ce4 <HAL_TIMEx_MasterConfigSynchronization>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8001362:	f000 f90d 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001366:	bf00      	nop
 8001368:	3718      	adds	r7, #24
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	20000218 	.word	0x20000218
 8001374:	40000800 	.word	0x40000800

08001378 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800137c:	4b11      	ldr	r3, [pc, #68]	; (80013c4 <MX_USART3_UART_Init+0x4c>)
 800137e:	4a12      	ldr	r2, [pc, #72]	; (80013c8 <MX_USART3_UART_Init+0x50>)
 8001380:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001382:	4b10      	ldr	r3, [pc, #64]	; (80013c4 <MX_USART3_UART_Init+0x4c>)
 8001384:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001388:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800138a:	4b0e      	ldr	r3, [pc, #56]	; (80013c4 <MX_USART3_UART_Init+0x4c>)
 800138c:	2200      	movs	r2, #0
 800138e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001390:	4b0c      	ldr	r3, [pc, #48]	; (80013c4 <MX_USART3_UART_Init+0x4c>)
 8001392:	2200      	movs	r2, #0
 8001394:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001396:	4b0b      	ldr	r3, [pc, #44]	; (80013c4 <MX_USART3_UART_Init+0x4c>)
 8001398:	2200      	movs	r2, #0
 800139a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800139c:	4b09      	ldr	r3, [pc, #36]	; (80013c4 <MX_USART3_UART_Init+0x4c>)
 800139e:	220c      	movs	r2, #12
 80013a0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013a2:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <MX_USART3_UART_Init+0x4c>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80013a8:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <MX_USART3_UART_Init+0x4c>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80013ae:	4805      	ldr	r0, [pc, #20]	; (80013c4 <MX_USART3_UART_Init+0x4c>)
 80013b0:	f003 fd08 	bl	8004dc4 <HAL_UART_Init>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80013ba:	f000 f8e1 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20000260 	.word	0x20000260
 80013c8:	40004800 	.word	0x40004800

080013cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013d2:	4b0c      	ldr	r3, [pc, #48]	; (8001404 <MX_DMA_Init+0x38>)
 80013d4:	695b      	ldr	r3, [r3, #20]
 80013d6:	4a0b      	ldr	r2, [pc, #44]	; (8001404 <MX_DMA_Init+0x38>)
 80013d8:	f043 0301 	orr.w	r3, r3, #1
 80013dc:	6153      	str	r3, [r2, #20]
 80013de:	4b09      	ldr	r3, [pc, #36]	; (8001404 <MX_DMA_Init+0x38>)
 80013e0:	695b      	ldr	r3, [r3, #20]
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	607b      	str	r3, [r7, #4]
 80013e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80013ea:	2200      	movs	r2, #0
 80013ec:	2100      	movs	r1, #0
 80013ee:	200f      	movs	r0, #15
 80013f0:	f001 fa8d 	bl	800290e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80013f4:	200f      	movs	r0, #15
 80013f6:	f001 faa6 	bl	8002946 <HAL_NVIC_EnableIRQ>

}
 80013fa:	bf00      	nop
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40021000 	.word	0x40021000

08001408 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b088      	sub	sp, #32
 800140c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140e:	f107 0310 	add.w	r3, r7, #16
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	605a      	str	r2, [r3, #4]
 8001418:	609a      	str	r2, [r3, #8]
 800141a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800141c:	4b52      	ldr	r3, [pc, #328]	; (8001568 <MX_GPIO_Init+0x160>)
 800141e:	699b      	ldr	r3, [r3, #24]
 8001420:	4a51      	ldr	r2, [pc, #324]	; (8001568 <MX_GPIO_Init+0x160>)
 8001422:	f043 0310 	orr.w	r3, r3, #16
 8001426:	6193      	str	r3, [r2, #24]
 8001428:	4b4f      	ldr	r3, [pc, #316]	; (8001568 <MX_GPIO_Init+0x160>)
 800142a:	699b      	ldr	r3, [r3, #24]
 800142c:	f003 0310 	and.w	r3, r3, #16
 8001430:	60fb      	str	r3, [r7, #12]
 8001432:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001434:	4b4c      	ldr	r3, [pc, #304]	; (8001568 <MX_GPIO_Init+0x160>)
 8001436:	699b      	ldr	r3, [r3, #24]
 8001438:	4a4b      	ldr	r2, [pc, #300]	; (8001568 <MX_GPIO_Init+0x160>)
 800143a:	f043 0320 	orr.w	r3, r3, #32
 800143e:	6193      	str	r3, [r2, #24]
 8001440:	4b49      	ldr	r3, [pc, #292]	; (8001568 <MX_GPIO_Init+0x160>)
 8001442:	699b      	ldr	r3, [r3, #24]
 8001444:	f003 0320 	and.w	r3, r3, #32
 8001448:	60bb      	str	r3, [r7, #8]
 800144a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800144c:	4b46      	ldr	r3, [pc, #280]	; (8001568 <MX_GPIO_Init+0x160>)
 800144e:	699b      	ldr	r3, [r3, #24]
 8001450:	4a45      	ldr	r2, [pc, #276]	; (8001568 <MX_GPIO_Init+0x160>)
 8001452:	f043 0304 	orr.w	r3, r3, #4
 8001456:	6193      	str	r3, [r2, #24]
 8001458:	4b43      	ldr	r3, [pc, #268]	; (8001568 <MX_GPIO_Init+0x160>)
 800145a:	699b      	ldr	r3, [r3, #24]
 800145c:	f003 0304 	and.w	r3, r3, #4
 8001460:	607b      	str	r3, [r7, #4]
 8001462:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001464:	4b40      	ldr	r3, [pc, #256]	; (8001568 <MX_GPIO_Init+0x160>)
 8001466:	699b      	ldr	r3, [r3, #24]
 8001468:	4a3f      	ldr	r2, [pc, #252]	; (8001568 <MX_GPIO_Init+0x160>)
 800146a:	f043 0308 	orr.w	r3, r3, #8
 800146e:	6193      	str	r3, [r2, #24]
 8001470:	4b3d      	ldr	r3, [pc, #244]	; (8001568 <MX_GPIO_Init+0x160>)
 8001472:	699b      	ldr	r3, [r3, #24]
 8001474:	f003 0308 	and.w	r3, r3, #8
 8001478:	603b      	str	r3, [r7, #0]
 800147a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_DC_Pin|LCD_RST_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 800147c:	2200      	movs	r2, #0
 800147e:	21e0      	movs	r1, #224	; 0xe0
 8001480:	483a      	ldr	r0, [pc, #232]	; (800156c <MX_GPIO_Init+0x164>)
 8001482:	f001 fe7a 	bl	800317a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CHRG_Pin */
  GPIO_InitStruct.Pin = CHRG_Pin;
 8001486:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800148a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800148c:	4b38      	ldr	r3, [pc, #224]	; (8001570 <MX_GPIO_Init+0x168>)
 800148e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001490:	2301      	movs	r3, #1
 8001492:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(CHRG_GPIO_Port, &GPIO_InitStruct);
 8001494:	f107 0310 	add.w	r3, r7, #16
 8001498:	4619      	mov	r1, r3
 800149a:	4836      	ldr	r0, [pc, #216]	; (8001574 <MX_GPIO_Init+0x16c>)
 800149c:	f001 fcd2 	bl	8002e44 <HAL_GPIO_Init>

  /*Configure GPIO pins : LR_Pin RB_Pin RL_Pin RU_Pin
                           RR_Pin OK_Pin */
  GPIO_InitStruct.Pin = LR_Pin|RB_Pin|RL_Pin|RU_Pin
 80014a0:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 80014a4:	613b      	str	r3, [r7, #16]
                          |RR_Pin|OK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014a6:	4b34      	ldr	r3, [pc, #208]	; (8001578 <MX_GPIO_Init+0x170>)
 80014a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014aa:	2301      	movs	r3, #1
 80014ac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ae:	f107 0310 	add.w	r3, r7, #16
 80014b2:	4619      	mov	r1, r3
 80014b4:	4831      	ldr	r0, [pc, #196]	; (800157c <MX_GPIO_Init+0x174>)
 80014b6:	f001 fcc5 	bl	8002e44 <HAL_GPIO_Init>

  /*Configure GPIO pins : LB_Pin LL_Pin LU_Pin */
  GPIO_InitStruct.Pin = LB_Pin|LL_Pin|LU_Pin;
 80014ba:	2307      	movs	r3, #7
 80014bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014be:	4b2e      	ldr	r3, [pc, #184]	; (8001578 <MX_GPIO_Init+0x170>)
 80014c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014c2:	2301      	movs	r3, #1
 80014c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c6:	f107 0310 	add.w	r3, r7, #16
 80014ca:	4619      	mov	r1, r3
 80014cc:	4827      	ldr	r0, [pc, #156]	; (800156c <MX_GPIO_Init+0x164>)
 80014ce:	f001 fcb9 	bl	8002e44 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DC_Pin LCD_RST_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_RST_Pin|LCD_CS_Pin;
 80014d2:	23e0      	movs	r3, #224	; 0xe0
 80014d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d6:	2301      	movs	r3, #1
 80014d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014de:	2302      	movs	r3, #2
 80014e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e2:	f107 0310 	add.w	r3, r7, #16
 80014e6:	4619      	mov	r1, r3
 80014e8:	4820      	ldr	r0, [pc, #128]	; (800156c <MX_GPIO_Init+0x164>)
 80014ea:	f001 fcab 	bl	8002e44 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80014ee:	2200      	movs	r2, #0
 80014f0:	2100      	movs	r1, #0
 80014f2:	2006      	movs	r0, #6
 80014f4:	f001 fa0b 	bl	800290e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80014f8:	2006      	movs	r0, #6
 80014fa:	f001 fa24 	bl	8002946 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80014fe:	2200      	movs	r2, #0
 8001500:	2100      	movs	r1, #0
 8001502:	2007      	movs	r0, #7
 8001504:	f001 fa03 	bl	800290e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001508:	2007      	movs	r0, #7
 800150a:	f001 fa1c 	bl	8002946 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800150e:	2200      	movs	r2, #0
 8001510:	2100      	movs	r1, #0
 8001512:	2008      	movs	r0, #8
 8001514:	f001 f9fb 	bl	800290e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001518:	2008      	movs	r0, #8
 800151a:	f001 fa14 	bl	8002946 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800151e:	2200      	movs	r2, #0
 8001520:	2100      	movs	r1, #0
 8001522:	2009      	movs	r0, #9
 8001524:	f001 f9f3 	bl	800290e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001528:	2009      	movs	r0, #9
 800152a:	f001 fa0c 	bl	8002946 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800152e:	2200      	movs	r2, #0
 8001530:	2100      	movs	r1, #0
 8001532:	200a      	movs	r0, #10
 8001534:	f001 f9eb 	bl	800290e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001538:	200a      	movs	r0, #10
 800153a:	f001 fa04 	bl	8002946 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800153e:	2200      	movs	r2, #0
 8001540:	2100      	movs	r1, #0
 8001542:	2017      	movs	r0, #23
 8001544:	f001 f9e3 	bl	800290e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001548:	2017      	movs	r0, #23
 800154a:	f001 f9fc 	bl	8002946 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800154e:	2200      	movs	r2, #0
 8001550:	2100      	movs	r1, #0
 8001552:	2028      	movs	r0, #40	; 0x28
 8001554:	f001 f9db 	bl	800290e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001558:	2028      	movs	r0, #40	; 0x28
 800155a:	f001 f9f4 	bl	8002946 <HAL_NVIC_EnableIRQ>

}
 800155e:	bf00      	nop
 8001560:	3720      	adds	r7, #32
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	40021000 	.word	0x40021000
 800156c:	40010c00 	.word	0x40010c00
 8001570:	10310000 	.word	0x10310000
 8001574:	40011000 	.word	0x40011000
 8001578:	10210000 	.word	0x10210000
 800157c:	40010800 	.word	0x40010800

08001580 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001584:	b672      	cpsid	i
}
 8001586:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001588:	e7fe      	b.n	8001588 <Error_Handler+0x8>
	...

0800158c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800158c:	b480      	push	{r7}
 800158e:	b085      	sub	sp, #20
 8001590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001592:	4b15      	ldr	r3, [pc, #84]	; (80015e8 <HAL_MspInit+0x5c>)
 8001594:	699b      	ldr	r3, [r3, #24]
 8001596:	4a14      	ldr	r2, [pc, #80]	; (80015e8 <HAL_MspInit+0x5c>)
 8001598:	f043 0301 	orr.w	r3, r3, #1
 800159c:	6193      	str	r3, [r2, #24]
 800159e:	4b12      	ldr	r3, [pc, #72]	; (80015e8 <HAL_MspInit+0x5c>)
 80015a0:	699b      	ldr	r3, [r3, #24]
 80015a2:	f003 0301 	and.w	r3, r3, #1
 80015a6:	60bb      	str	r3, [r7, #8]
 80015a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015aa:	4b0f      	ldr	r3, [pc, #60]	; (80015e8 <HAL_MspInit+0x5c>)
 80015ac:	69db      	ldr	r3, [r3, #28]
 80015ae:	4a0e      	ldr	r2, [pc, #56]	; (80015e8 <HAL_MspInit+0x5c>)
 80015b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015b4:	61d3      	str	r3, [r2, #28]
 80015b6:	4b0c      	ldr	r3, [pc, #48]	; (80015e8 <HAL_MspInit+0x5c>)
 80015b8:	69db      	ldr	r3, [r3, #28]
 80015ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015be:	607b      	str	r3, [r7, #4]
 80015c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80015c2:	4b0a      	ldr	r3, [pc, #40]	; (80015ec <HAL_MspInit+0x60>)
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80015ce:	60fb      	str	r3, [r7, #12]
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015d6:	60fb      	str	r3, [r7, #12]
 80015d8:	4a04      	ldr	r2, [pc, #16]	; (80015ec <HAL_MspInit+0x60>)
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015de:	bf00      	nop
 80015e0:	3714      	adds	r7, #20
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bc80      	pop	{r7}
 80015e6:	4770      	bx	lr
 80015e8:	40021000 	.word	0x40021000
 80015ec:	40010000 	.word	0x40010000

080015f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b088      	sub	sp, #32
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f8:	f107 0310 	add.w	r3, r7, #16
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	605a      	str	r2, [r3, #4]
 8001602:	609a      	str	r2, [r3, #8]
 8001604:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a18      	ldr	r2, [pc, #96]	; (800166c <HAL_ADC_MspInit+0x7c>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d129      	bne.n	8001664 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001610:	4b17      	ldr	r3, [pc, #92]	; (8001670 <HAL_ADC_MspInit+0x80>)
 8001612:	699b      	ldr	r3, [r3, #24]
 8001614:	4a16      	ldr	r2, [pc, #88]	; (8001670 <HAL_ADC_MspInit+0x80>)
 8001616:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800161a:	6193      	str	r3, [r2, #24]
 800161c:	4b14      	ldr	r3, [pc, #80]	; (8001670 <HAL_ADC_MspInit+0x80>)
 800161e:	699b      	ldr	r3, [r3, #24]
 8001620:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001624:	60fb      	str	r3, [r7, #12]
 8001626:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001628:	4b11      	ldr	r3, [pc, #68]	; (8001670 <HAL_ADC_MspInit+0x80>)
 800162a:	699b      	ldr	r3, [r3, #24]
 800162c:	4a10      	ldr	r2, [pc, #64]	; (8001670 <HAL_ADC_MspInit+0x80>)
 800162e:	f043 0304 	orr.w	r3, r3, #4
 8001632:	6193      	str	r3, [r2, #24]
 8001634:	4b0e      	ldr	r3, [pc, #56]	; (8001670 <HAL_ADC_MspInit+0x80>)
 8001636:	699b      	ldr	r3, [r3, #24]
 8001638:	f003 0304 	and.w	r3, r3, #4
 800163c:	60bb      	str	r3, [r7, #8]
 800163e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = Battt_Voltage_Pin;
 8001640:	2301      	movs	r3, #1
 8001642:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001644:	2303      	movs	r3, #3
 8001646:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(Battt_Voltage_GPIO_Port, &GPIO_InitStruct);
 8001648:	f107 0310 	add.w	r3, r7, #16
 800164c:	4619      	mov	r1, r3
 800164e:	4809      	ldr	r0, [pc, #36]	; (8001674 <HAL_ADC_MspInit+0x84>)
 8001650:	f001 fbf8 	bl	8002e44 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 3, 0);
 8001654:	2200      	movs	r2, #0
 8001656:	2103      	movs	r1, #3
 8001658:	2012      	movs	r0, #18
 800165a:	f001 f958 	bl	800290e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800165e:	2012      	movs	r0, #18
 8001660:	f001 f971 	bl	8002946 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001664:	bf00      	nop
 8001666:	3720      	adds	r7, #32
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	40012400 	.word	0x40012400
 8001670:	40021000 	.word	0x40021000
 8001674:	40010800 	.word	0x40010800

08001678 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b088      	sub	sp, #32
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001680:	f107 0310 	add.w	r3, r7, #16
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	605a      	str	r2, [r3, #4]
 800168a:	609a      	str	r2, [r3, #8]
 800168c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a33      	ldr	r2, [pc, #204]	; (8001760 <HAL_SPI_MspInit+0xe8>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d15f      	bne.n	8001758 <HAL_SPI_MspInit+0xe0>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001698:	4b32      	ldr	r3, [pc, #200]	; (8001764 <HAL_SPI_MspInit+0xec>)
 800169a:	69db      	ldr	r3, [r3, #28]
 800169c:	4a31      	ldr	r2, [pc, #196]	; (8001764 <HAL_SPI_MspInit+0xec>)
 800169e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016a2:	61d3      	str	r3, [r2, #28]
 80016a4:	4b2f      	ldr	r3, [pc, #188]	; (8001764 <HAL_SPI_MspInit+0xec>)
 80016a6:	69db      	ldr	r3, [r3, #28]
 80016a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016ac:	60fb      	str	r3, [r7, #12]
 80016ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016b0:	4b2c      	ldr	r3, [pc, #176]	; (8001764 <HAL_SPI_MspInit+0xec>)
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	4a2b      	ldr	r2, [pc, #172]	; (8001764 <HAL_SPI_MspInit+0xec>)
 80016b6:	f043 0308 	orr.w	r3, r3, #8
 80016ba:	6193      	str	r3, [r2, #24]
 80016bc:	4b29      	ldr	r3, [pc, #164]	; (8001764 <HAL_SPI_MspInit+0xec>)
 80016be:	699b      	ldr	r3, [r3, #24]
 80016c0:	f003 0308 	and.w	r3, r3, #8
 80016c4:	60bb      	str	r3, [r7, #8]
 80016c6:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80016c8:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80016cc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ce:	2302      	movs	r3, #2
 80016d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016d2:	2303      	movs	r3, #3
 80016d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d6:	f107 0310 	add.w	r3, r7, #16
 80016da:	4619      	mov	r1, r3
 80016dc:	4822      	ldr	r0, [pc, #136]	; (8001768 <HAL_SPI_MspInit+0xf0>)
 80016de:	f001 fbb1 	bl	8002e44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80016e2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80016e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016e8:	2300      	movs	r3, #0
 80016ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ec:	2300      	movs	r3, #0
 80016ee:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f0:	f107 0310 	add.w	r3, r7, #16
 80016f4:	4619      	mov	r1, r3
 80016f6:	481c      	ldr	r0, [pc, #112]	; (8001768 <HAL_SPI_MspInit+0xf0>)
 80016f8:	f001 fba4 	bl	8002e44 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 80016fc:	4b1b      	ldr	r3, [pc, #108]	; (800176c <HAL_SPI_MspInit+0xf4>)
 80016fe:	4a1c      	ldr	r2, [pc, #112]	; (8001770 <HAL_SPI_MspInit+0xf8>)
 8001700:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001702:	4b1a      	ldr	r3, [pc, #104]	; (800176c <HAL_SPI_MspInit+0xf4>)
 8001704:	2210      	movs	r2, #16
 8001706:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001708:	4b18      	ldr	r3, [pc, #96]	; (800176c <HAL_SPI_MspInit+0xf4>)
 800170a:	2200      	movs	r2, #0
 800170c:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800170e:	4b17      	ldr	r3, [pc, #92]	; (800176c <HAL_SPI_MspInit+0xf4>)
 8001710:	2280      	movs	r2, #128	; 0x80
 8001712:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001714:	4b15      	ldr	r3, [pc, #84]	; (800176c <HAL_SPI_MspInit+0xf4>)
 8001716:	2200      	movs	r2, #0
 8001718:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800171a:	4b14      	ldr	r3, [pc, #80]	; (800176c <HAL_SPI_MspInit+0xf4>)
 800171c:	2200      	movs	r2, #0
 800171e:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001720:	4b12      	ldr	r3, [pc, #72]	; (800176c <HAL_SPI_MspInit+0xf4>)
 8001722:	2200      	movs	r2, #0
 8001724:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001726:	4b11      	ldr	r3, [pc, #68]	; (800176c <HAL_SPI_MspInit+0xf4>)
 8001728:	2200      	movs	r2, #0
 800172a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800172c:	480f      	ldr	r0, [pc, #60]	; (800176c <HAL_SPI_MspInit+0xf4>)
 800172e:	f001 f925 	bl	800297c <HAL_DMA_Init>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <HAL_SPI_MspInit+0xc4>
    {
      Error_Handler();
 8001738:	f7ff ff22 	bl	8001580 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	4a0b      	ldr	r2, [pc, #44]	; (800176c <HAL_SPI_MspInit+0xf4>)
 8001740:	649a      	str	r2, [r3, #72]	; 0x48
 8001742:	4a0a      	ldr	r2, [pc, #40]	; (800176c <HAL_SPI_MspInit+0xf4>)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001748:	2200      	movs	r2, #0
 800174a:	2100      	movs	r1, #0
 800174c:	2024      	movs	r0, #36	; 0x24
 800174e:	f001 f8de 	bl	800290e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001752:	2024      	movs	r0, #36	; 0x24
 8001754:	f001 f8f7 	bl	8002946 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001758:	bf00      	nop
 800175a:	3720      	adds	r7, #32
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	40003800 	.word	0x40003800
 8001764:	40021000 	.word	0x40021000
 8001768:	40010c00 	.word	0x40010c00
 800176c:	2000034c 	.word	0x2000034c
 8001770:	40020058 	.word	0x40020058

08001774 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a16      	ldr	r2, [pc, #88]	; (80017dc <HAL_TIM_Base_MspInit+0x68>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d10c      	bne.n	80017a0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001786:	4b16      	ldr	r3, [pc, #88]	; (80017e0 <HAL_TIM_Base_MspInit+0x6c>)
 8001788:	69db      	ldr	r3, [r3, #28]
 800178a:	4a15      	ldr	r2, [pc, #84]	; (80017e0 <HAL_TIM_Base_MspInit+0x6c>)
 800178c:	f043 0302 	orr.w	r3, r3, #2
 8001790:	61d3      	str	r3, [r2, #28]
 8001792:	4b13      	ldr	r3, [pc, #76]	; (80017e0 <HAL_TIM_Base_MspInit+0x6c>)
 8001794:	69db      	ldr	r3, [r3, #28]
 8001796:	f003 0302 	and.w	r3, r3, #2
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800179e:	e018      	b.n	80017d2 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM4)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a0f      	ldr	r2, [pc, #60]	; (80017e4 <HAL_TIM_Base_MspInit+0x70>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d113      	bne.n	80017d2 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80017aa:	4b0d      	ldr	r3, [pc, #52]	; (80017e0 <HAL_TIM_Base_MspInit+0x6c>)
 80017ac:	69db      	ldr	r3, [r3, #28]
 80017ae:	4a0c      	ldr	r2, [pc, #48]	; (80017e0 <HAL_TIM_Base_MspInit+0x6c>)
 80017b0:	f043 0304 	orr.w	r3, r3, #4
 80017b4:	61d3      	str	r3, [r2, #28]
 80017b6:	4b0a      	ldr	r3, [pc, #40]	; (80017e0 <HAL_TIM_Base_MspInit+0x6c>)
 80017b8:	69db      	ldr	r3, [r3, #28]
 80017ba:	f003 0304 	and.w	r3, r3, #4
 80017be:	60bb      	str	r3, [r7, #8]
 80017c0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80017c2:	2200      	movs	r2, #0
 80017c4:	2100      	movs	r1, #0
 80017c6:	201e      	movs	r0, #30
 80017c8:	f001 f8a1 	bl	800290e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80017cc:	201e      	movs	r0, #30
 80017ce:	f001 f8ba 	bl	8002946 <HAL_NVIC_EnableIRQ>
}
 80017d2:	bf00      	nop
 80017d4:	3710      	adds	r7, #16
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40000400 	.word	0x40000400
 80017e0:	40021000 	.word	0x40021000
 80017e4:	40000800 	.word	0x40000800

080017e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b088      	sub	sp, #32
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f0:	f107 0310 	add.w	r3, r7, #16
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	605a      	str	r2, [r3, #4]
 80017fa:	609a      	str	r2, [r3, #8]
 80017fc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a20      	ldr	r2, [pc, #128]	; (8001884 <HAL_UART_MspInit+0x9c>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d139      	bne.n	800187c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001808:	4b1f      	ldr	r3, [pc, #124]	; (8001888 <HAL_UART_MspInit+0xa0>)
 800180a:	69db      	ldr	r3, [r3, #28]
 800180c:	4a1e      	ldr	r2, [pc, #120]	; (8001888 <HAL_UART_MspInit+0xa0>)
 800180e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001812:	61d3      	str	r3, [r2, #28]
 8001814:	4b1c      	ldr	r3, [pc, #112]	; (8001888 <HAL_UART_MspInit+0xa0>)
 8001816:	69db      	ldr	r3, [r3, #28]
 8001818:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800181c:	60fb      	str	r3, [r7, #12]
 800181e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001820:	4b19      	ldr	r3, [pc, #100]	; (8001888 <HAL_UART_MspInit+0xa0>)
 8001822:	699b      	ldr	r3, [r3, #24]
 8001824:	4a18      	ldr	r2, [pc, #96]	; (8001888 <HAL_UART_MspInit+0xa0>)
 8001826:	f043 0308 	orr.w	r3, r3, #8
 800182a:	6193      	str	r3, [r2, #24]
 800182c:	4b16      	ldr	r3, [pc, #88]	; (8001888 <HAL_UART_MspInit+0xa0>)
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	f003 0308 	and.w	r3, r3, #8
 8001834:	60bb      	str	r3, [r7, #8]
 8001836:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001838:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800183c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183e:	2302      	movs	r3, #2
 8001840:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001842:	2303      	movs	r3, #3
 8001844:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001846:	f107 0310 	add.w	r3, r7, #16
 800184a:	4619      	mov	r1, r3
 800184c:	480f      	ldr	r0, [pc, #60]	; (800188c <HAL_UART_MspInit+0xa4>)
 800184e:	f001 faf9 	bl	8002e44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001852:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001856:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001858:	2300      	movs	r3, #0
 800185a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185c:	2300      	movs	r3, #0
 800185e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001860:	f107 0310 	add.w	r3, r7, #16
 8001864:	4619      	mov	r1, r3
 8001866:	4809      	ldr	r0, [pc, #36]	; (800188c <HAL_UART_MspInit+0xa4>)
 8001868:	f001 faec 	bl	8002e44 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800186c:	2200      	movs	r2, #0
 800186e:	2100      	movs	r1, #0
 8001870:	2027      	movs	r0, #39	; 0x27
 8001872:	f001 f84c 	bl	800290e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001876:	2027      	movs	r0, #39	; 0x27
 8001878:	f001 f865 	bl	8002946 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800187c:	bf00      	nop
 800187e:	3720      	adds	r7, #32
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	40004800 	.word	0x40004800
 8001888:	40021000 	.word	0x40021000
 800188c:	40010c00 	.word	0x40010c00

08001890 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	4603      	mov	r3, r0
 8001898:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800189a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	db0c      	blt.n	80018bc <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018a2:	79fb      	ldrb	r3, [r7, #7]
 80018a4:	f003 021f 	and.w	r2, r3, #31
 80018a8:	4907      	ldr	r1, [pc, #28]	; (80018c8 <__NVIC_ClearPendingIRQ+0x38>)
 80018aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ae:	095b      	lsrs	r3, r3, #5
 80018b0:	2001      	movs	r0, #1
 80018b2:	fa00 f202 	lsl.w	r2, r0, r2
 80018b6:	3360      	adds	r3, #96	; 0x60
 80018b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018bc:	bf00      	nop
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bc80      	pop	{r7}
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	e000e100 	.word	0xe000e100

080018cc <Post_Processing_Buttons>:
//volatile uint16_t buttStatuses = 0;			//Полуслово состояний UPD: не нужно
 uint32_t IntTimeIRQ[9];			//Массив из моментов последних нажатий (срабатываний прерываний)
volatile uint16_t IsButtonsPressed = 0;		//флаг, который показывает, что нажатие кнопки нужно обработать

void Post_Processing_Buttons()
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
    IRQn_Type NVIC_ITS[9] =
 80018d2:	4a28      	ldr	r2, [pc, #160]	; (8001974 <Post_Processing_Buttons+0xa8>)
 80018d4:	1d3b      	adds	r3, r7, #4
 80018d6:	ca07      	ldmia	r2, {r0, r1, r2}
 80018d8:	c303      	stmia	r3!, {r0, r1}
 80018da:	701a      	strb	r2, [r3, #0]
	    {
		    EXTI0_IRQn, EXTI1_IRQn, EXTI2_IRQn, EXTI3_IRQn, EXTI4_IRQn,
		    EXTI9_5_IRQn, EXTI9_5_IRQn, EXTI9_5_IRQn, EXTI9_5_IRQn
	    };
	for(uint8_t ButtNo = 0; ButtNo < 9; ++ButtNo)
 80018dc:	2300      	movs	r3, #0
 80018de:	73fb      	strb	r3, [r7, #15]
 80018e0:	e03f      	b.n	8001962 <Post_Processing_Buttons+0x96>
	{
		if (((buttFlags >> ButtNo) & 1) && HAL_GetTick() - IntTimeIRQ[ButtNo] > Delay)
 80018e2:	4b25      	ldr	r3, [pc, #148]	; (8001978 <Post_Processing_Buttons+0xac>)
 80018e4:	881b      	ldrh	r3, [r3, #0]
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	461a      	mov	r2, r3
 80018ea:	7bfb      	ldrb	r3, [r7, #15]
 80018ec:	fa42 f303 	asr.w	r3, r2, r3
 80018f0:	f003 0301 	and.w	r3, r3, #1
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d031      	beq.n	800195c <Post_Processing_Buttons+0x90>
 80018f8:	f000 fa74 	bl	8001de4 <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	7bfb      	ldrb	r3, [r7, #15]
 8001900:	491e      	ldr	r1, [pc, #120]	; (800197c <Post_Processing_Buttons+0xb0>)
 8001902:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	2b78      	cmp	r3, #120	; 0x78
 800190a:	d927      	bls.n	800195c <Post_Processing_Buttons+0x90>
		{                                          								//Ничего не делаем, пока не пройдет время задержки
											//Включаем прерывание

			__HAL_GPIO_EXTI_CLEAR_IT(1 << ButtNo);
 800190c:	7bfb      	ldrb	r3, [r7, #15]
 800190e:	2201      	movs	r2, #1
 8001910:	409a      	lsls	r2, r3
 8001912:	4b1b      	ldr	r3, [pc, #108]	; (8001980 <Post_Processing_Buttons+0xb4>)
 8001914:	615a      	str	r2, [r3, #20]
			NVIC_ClearPendingIRQ(NVIC_ITS[ButtNo]);
 8001916:	7bfb      	ldrb	r3, [r7, #15]
 8001918:	f107 0210 	add.w	r2, r7, #16
 800191c:	4413      	add	r3, r2
 800191e:	f913 3c0c 	ldrsb.w	r3, [r3, #-12]
 8001922:	4618      	mov	r0, r3
 8001924:	f7ff ffb4 	bl	8001890 <__NVIC_ClearPendingIRQ>
			EXTI->IMR |= 1 << ButtNo;											//Включаем прерывание
 8001928:	4b15      	ldr	r3, [pc, #84]	; (8001980 <Post_Processing_Buttons+0xb4>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	7bfa      	ldrb	r2, [r7, #15]
 800192e:	2101      	movs	r1, #1
 8001930:	fa01 f202 	lsl.w	r2, r1, r2
 8001934:	4611      	mov	r1, r2
 8001936:	4a12      	ldr	r2, [pc, #72]	; (8001980 <Post_Processing_Buttons+0xb4>)
 8001938:	430b      	orrs	r3, r1
 800193a:	6013      	str	r3, [r2, #0]
			buttFlags &= ~(1 << ButtNo);
 800193c:	7bfb      	ldrb	r3, [r7, #15]
 800193e:	2201      	movs	r2, #1
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	b21b      	sxth	r3, r3
 8001946:	43db      	mvns	r3, r3
 8001948:	b21a      	sxth	r2, r3
 800194a:	4b0b      	ldr	r3, [pc, #44]	; (8001978 <Post_Processing_Buttons+0xac>)
 800194c:	881b      	ldrh	r3, [r3, #0]
 800194e:	b29b      	uxth	r3, r3
 8001950:	b21b      	sxth	r3, r3
 8001952:	4013      	ands	r3, r2
 8001954:	b21b      	sxth	r3, r3
 8001956:	b29a      	uxth	r2, r3
 8001958:	4b07      	ldr	r3, [pc, #28]	; (8001978 <Post_Processing_Buttons+0xac>)
 800195a:	801a      	strh	r2, [r3, #0]
	for(uint8_t ButtNo = 0; ButtNo < 9; ++ButtNo)
 800195c:	7bfb      	ldrb	r3, [r7, #15]
 800195e:	3301      	adds	r3, #1
 8001960:	73fb      	strb	r3, [r7, #15]
 8001962:	7bfb      	ldrb	r3, [r7, #15]
 8001964:	2b08      	cmp	r3, #8
 8001966:	d9bc      	bls.n	80018e2 <Post_Processing_Buttons+0x16>
		}
	}

}
 8001968:	bf00      	nop
 800196a:	bf00      	nop
 800196c:	3710      	adds	r7, #16
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	08005f8c 	.word	0x08005f8c
 8001978:	200001b0 	.word	0x200001b0
 800197c:	20000390 	.word	0x20000390
 8001980:	40010400 	.word	0x40010400

08001984 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	4603      	mov	r3, r0
 800198c:	80fb      	strh	r3, [r7, #6]
    EXTI->IMR &= ~(GPIO_Pin);
 800198e:	4b23      	ldr	r3, [pc, #140]	; (8001a1c <HAL_GPIO_EXTI_Callback+0x98>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	88fa      	ldrh	r2, [r7, #6]
 8001994:	43d2      	mvns	r2, r2
 8001996:	4611      	mov	r1, r2
 8001998:	4a20      	ldr	r2, [pc, #128]	; (8001a1c <HAL_GPIO_EXTI_Callback+0x98>)
 800199a:	400b      	ands	r3, r1
 800199c:	6013      	str	r3, [r2, #0]
    //NVIC_ClearPendingIRQ();
    IsButtonsPressed |= GPIO_Pin;
 800199e:	4b20      	ldr	r3, [pc, #128]	; (8001a20 <HAL_GPIO_EXTI_Callback+0x9c>)
 80019a0:	881b      	ldrh	r3, [r3, #0]
 80019a2:	b29a      	uxth	r2, r3
 80019a4:	88fb      	ldrh	r3, [r7, #6]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	b29a      	uxth	r2, r3
 80019aa:	4b1d      	ldr	r3, [pc, #116]	; (8001a20 <HAL_GPIO_EXTI_Callback+0x9c>)
 80019ac:	801a      	strh	r2, [r3, #0]
    uint8_t TxBuff[2] = {(IsButtonsPressed & 0xff), (IsButtonsPressed >> 8 & 0xFF)};//важно чтобы младшие биты шли справа
 80019ae:	4b1c      	ldr	r3, [pc, #112]	; (8001a20 <HAL_GPIO_EXTI_Callback+0x9c>)
 80019b0:	881b      	ldrh	r3, [r3, #0]
 80019b2:	b29b      	uxth	r3, r3
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	733b      	strb	r3, [r7, #12]
 80019b8:	4b19      	ldr	r3, [pc, #100]	; (8001a20 <HAL_GPIO_EXTI_Callback+0x9c>)
 80019ba:	881b      	ldrh	r3, [r3, #0]
 80019bc:	b29b      	uxth	r3, r3
 80019be:	0a1b      	lsrs	r3, r3, #8
 80019c0:	b29b      	uxth	r3, r3
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	737b      	strb	r3, [r7, #13]
    //char str[20] = "";
    //sprintf(str, "%d\n", IsButtonsPressed);
    HAL_TIM_Base_Start_IT(&htim4);
 80019c6:	4817      	ldr	r0, [pc, #92]	; (8001a24 <HAL_GPIO_EXTI_Callback+0xa0>)
 80019c8:	f002 fdca 	bl	8004560 <HAL_TIM_Base_Start_IT>
    HAL_UART_Transmit(&huart3, TxBuff, 2, 1000);
 80019cc:	f107 010c 	add.w	r1, r7, #12
 80019d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019d4:	2202      	movs	r2, #2
 80019d6:	4814      	ldr	r0, [pc, #80]	; (8001a28 <HAL_GPIO_EXTI_Callback+0xa4>)
 80019d8:	f003 fa41 	bl	8004e5e <HAL_UART_Transmit>
    //HAL_UART_Receive_IT(&huart3, &RecievedMode, 1);
    buttFlags |= GPIO_Pin;
 80019dc:	4b13      	ldr	r3, [pc, #76]	; (8001a2c <HAL_GPIO_EXTI_Callback+0xa8>)
 80019de:	881b      	ldrh	r3, [r3, #0]
 80019e0:	b29a      	uxth	r2, r3
 80019e2:	88fb      	ldrh	r3, [r7, #6]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	b29a      	uxth	r2, r3
 80019e8:	4b10      	ldr	r3, [pc, #64]	; (8001a2c <HAL_GPIO_EXTI_Callback+0xa8>)
 80019ea:	801a      	strh	r2, [r3, #0]
	if((IsButtonsPressed >> LL) & 1) //вызов синхронизации
 80019ec:	4b0c      	ldr	r3, [pc, #48]	; (8001a20 <HAL_GPIO_EXTI_Callback+0x9c>)
 80019ee:	881b      	ldrh	r3, [r3, #0]
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	085b      	lsrs	r3, r3, #1
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	f003 0301 	and.w	r3, r3, #1
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d00a      	beq.n	8001a14 <HAL_GPIO_EXTI_Callback+0x90>
	{
	    IsButtonsPressed &= ~(1 << LL);//TODO: отладить с помощью брейкпоинта синхрофлаг
 80019fe:	4b08      	ldr	r3, [pc, #32]	; (8001a20 <HAL_GPIO_EXTI_Callback+0x9c>)
 8001a00:	881b      	ldrh	r3, [r3, #0]
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	f023 0302 	bic.w	r3, r3, #2
 8001a08:	b29a      	uxth	r2, r3
 8001a0a:	4b05      	ldr	r3, [pc, #20]	; (8001a20 <HAL_GPIO_EXTI_Callback+0x9c>)
 8001a0c:	801a      	strh	r2, [r3, #0]
	    SynchroFlag = 1;
 8001a0e:	4b08      	ldr	r3, [pc, #32]	; (8001a30 <HAL_GPIO_EXTI_Callback+0xac>)
 8001a10:	2201      	movs	r2, #1
 8001a12:	701a      	strb	r2, [r3, #0]

	}
}
 8001a14:	bf00      	nop
 8001a16:	3710      	adds	r7, #16
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	40010400 	.word	0x40010400
 8001a20:	200001b2 	.word	0x200001b2
 8001a24:	20000218 	.word	0x20000218
 8001a28:	20000260 	.word	0x20000260
 8001a2c:	200001b0 	.word	0x200001b0
 8001a30:	200001ac 	.word	0x200001ac

08001a34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a38:	e7fe      	b.n	8001a38 <NMI_Handler+0x4>

08001a3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a3e:	e7fe      	b.n	8001a3e <HardFault_Handler+0x4>

08001a40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a44:	e7fe      	b.n	8001a44 <MemManage_Handler+0x4>

08001a46 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a46:	b480      	push	{r7}
 8001a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a4a:	e7fe      	b.n	8001a4a <BusFault_Handler+0x4>

08001a4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a50:	e7fe      	b.n	8001a50 <UsageFault_Handler+0x4>

08001a52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a52:	b480      	push	{r7}
 8001a54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a56:	bf00      	nop
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bc80      	pop	{r7}
 8001a5c:	4770      	bx	lr

08001a5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a62:	bf00      	nop
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bc80      	pop	{r7}
 8001a68:	4770      	bx	lr

08001a6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a6e:	bf00      	nop
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bc80      	pop	{r7}
 8001a74:	4770      	bx	lr

08001a76 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a76:	b580      	push	{r7, lr}
 8001a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a7a:	f000 f9a1 	bl	8001dc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a7e:	bf00      	nop
 8001a80:	bd80      	pop	{r7, pc}
	...

08001a84 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

	IntTimeIRQ[LB] = HAL_GetTick();							//Фиксируем время срабатывания прерывания
 8001a88:	f000 f9ac 	bl	8001de4 <HAL_GetTick>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	4a03      	ldr	r2, [pc, #12]	; (8001a9c <EXTI0_IRQHandler+0x18>)
 8001a90:	6013      	str	r3, [r2, #0]

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001a92:	2001      	movs	r0, #1
 8001a94:	f001 fb8a 	bl	80031ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001a98:	bf00      	nop
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	20000390 	.word	0x20000390

08001aa0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

	IntTimeIRQ[LL] = HAL_GetTick();
 8001aa4:	f000 f99e 	bl	8001de4 <HAL_GetTick>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	4a03      	ldr	r2, [pc, #12]	; (8001ab8 <EXTI1_IRQHandler+0x18>)
 8001aac:	6053      	str	r3, [r2, #4]

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001aae:	2002      	movs	r0, #2
 8001ab0:	f001 fb7c 	bl	80031ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001ab4:	bf00      	nop
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	20000390 	.word	0x20000390

08001abc <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

	IntTimeIRQ[LU] = HAL_GetTick();
 8001ac0:	f000 f990 	bl	8001de4 <HAL_GetTick>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	4a03      	ldr	r2, [pc, #12]	; (8001ad4 <EXTI2_IRQHandler+0x18>)
 8001ac8:	6093      	str	r3, [r2, #8]

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001aca:	2004      	movs	r0, #4
 8001acc:	f001 fb6e 	bl	80031ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001ad0:	bf00      	nop
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	20000390 	.word	0x20000390

08001ad8 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

	IntTimeIRQ[LR] = HAL_GetTick();
 8001adc:	f000 f982 	bl	8001de4 <HAL_GetTick>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	4a03      	ldr	r2, [pc, #12]	; (8001af0 <EXTI3_IRQHandler+0x18>)
 8001ae4:	60d3      	str	r3, [r2, #12]

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001ae6:	2008      	movs	r0, #8
 8001ae8:	f001 fb60 	bl	80031ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001aec:	bf00      	nop
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	20000390 	.word	0x20000390

08001af4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

	IntTimeIRQ[RB] = HAL_GetTick();
 8001af8:	f000 f974 	bl	8001de4 <HAL_GetTick>
 8001afc:	4603      	mov	r3, r0
 8001afe:	4a03      	ldr	r2, [pc, #12]	; (8001b0c <EXTI4_IRQHandler+0x18>)
 8001b00:	6113      	str	r3, [r2, #16]

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001b02:	2010      	movs	r0, #16
 8001b04:	f001 fb52 	bl	80031ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001b08:	bf00      	nop
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	20000390 	.word	0x20000390

08001b10 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001b14:	4802      	ldr	r0, [pc, #8]	; (8001b20 <DMA1_Channel5_IRQHandler+0x10>)
 8001b16:	f001 f861 	bl	8002bdc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001b1a:	bf00      	nop
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	2000034c 	.word	0x2000034c

08001b24 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001b28:	4802      	ldr	r0, [pc, #8]	; (8001b34 <ADC1_2_IRQHandler+0x10>)
 8001b2a:	f000 fb23 	bl	8002174 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001b2e:	bf00      	nop
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	200002e8 	.word	0x200002e8

08001b38 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	if(((EXTI->PR >> RL) & 1) /*&& (!(IsButtonsPressed >> RL) & 1)*/)
 8001b3c:	4b27      	ldr	r3, [pc, #156]	; (8001bdc <EXTI9_5_IRQHandler+0xa4>)
 8001b3e:	695b      	ldr	r3, [r3, #20]
 8001b40:	095b      	lsrs	r3, r3, #5
 8001b42:	f003 0301 	and.w	r3, r3, #1
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d008      	beq.n	8001b5c <EXTI9_5_IRQHandler+0x24>
	{
		IntTimeIRQ[RL] = HAL_GetTick();
 8001b4a:	f000 f94b 	bl	8001de4 <HAL_GetTick>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	4a23      	ldr	r2, [pc, #140]	; (8001be0 <EXTI9_5_IRQHandler+0xa8>)
 8001b52:	6153      	str	r3, [r2, #20]
		HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001b54:	2020      	movs	r0, #32
 8001b56:	f001 fb29 	bl	80031ac <HAL_GPIO_EXTI_IRQHandler>
 8001b5a:	e02f      	b.n	8001bbc <EXTI9_5_IRQHandler+0x84>
	}
	else if(((EXTI->PR >> RU) & 1) /*&& (!(IsButtonsPressed >> RU) & 1)*/)
 8001b5c:	4b1f      	ldr	r3, [pc, #124]	; (8001bdc <EXTI9_5_IRQHandler+0xa4>)
 8001b5e:	695b      	ldr	r3, [r3, #20]
 8001b60:	099b      	lsrs	r3, r3, #6
 8001b62:	f003 0301 	and.w	r3, r3, #1
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d008      	beq.n	8001b7c <EXTI9_5_IRQHandler+0x44>
	{
		IntTimeIRQ[RU] = HAL_GetTick();
 8001b6a:	f000 f93b 	bl	8001de4 <HAL_GetTick>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	4a1b      	ldr	r2, [pc, #108]	; (8001be0 <EXTI9_5_IRQHandler+0xa8>)
 8001b72:	6193      	str	r3, [r2, #24]
		HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001b74:	2040      	movs	r0, #64	; 0x40
 8001b76:	f001 fb19 	bl	80031ac <HAL_GPIO_EXTI_IRQHandler>
 8001b7a:	e01f      	b.n	8001bbc <EXTI9_5_IRQHandler+0x84>
	}
	else if(((EXTI->PR >> RR) & 1) /*&& (!(IsButtonsPressed >> RR) & 1)*/)
 8001b7c:	4b17      	ldr	r3, [pc, #92]	; (8001bdc <EXTI9_5_IRQHandler+0xa4>)
 8001b7e:	695b      	ldr	r3, [r3, #20]
 8001b80:	09db      	lsrs	r3, r3, #7
 8001b82:	f003 0301 	and.w	r3, r3, #1
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d008      	beq.n	8001b9c <EXTI9_5_IRQHandler+0x64>
	{

		IntTimeIRQ[RR] = HAL_GetTick();
 8001b8a:	f000 f92b 	bl	8001de4 <HAL_GetTick>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	4a13      	ldr	r2, [pc, #76]	; (8001be0 <EXTI9_5_IRQHandler+0xa8>)
 8001b92:	61d3      	str	r3, [r2, #28]
		HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001b94:	2080      	movs	r0, #128	; 0x80
 8001b96:	f001 fb09 	bl	80031ac <HAL_GPIO_EXTI_IRQHandler>
 8001b9a:	e00f      	b.n	8001bbc <EXTI9_5_IRQHandler+0x84>
	}
	else if(((EXTI->PR >> OK) & 1) /*&& (!(IsButtonsPressed >> OK) & 1)*/)
 8001b9c:	4b0f      	ldr	r3, [pc, #60]	; (8001bdc <EXTI9_5_IRQHandler+0xa4>)
 8001b9e:	695b      	ldr	r3, [r3, #20]
 8001ba0:	0a1b      	lsrs	r3, r3, #8
 8001ba2:	f003 0301 	and.w	r3, r3, #1
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d008      	beq.n	8001bbc <EXTI9_5_IRQHandler+0x84>
	{
		IntTimeIRQ[OK] = HAL_GetTick();
 8001baa:	f000 f91b 	bl	8001de4 <HAL_GetTick>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	4a0b      	ldr	r2, [pc, #44]	; (8001be0 <EXTI9_5_IRQHandler+0xa8>)
 8001bb2:	6213      	str	r3, [r2, #32]
		HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001bb4:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001bb8:	f001 faf8 	bl	80031ac <HAL_GPIO_EXTI_IRQHandler>
	}
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001bbc:	2020      	movs	r0, #32
 8001bbe:	f001 faf5 	bl	80031ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001bc2:	2040      	movs	r0, #64	; 0x40
 8001bc4:	f001 faf2 	bl	80031ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001bc8:	2080      	movs	r0, #128	; 0x80
 8001bca:	f001 faef 	bl	80031ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001bce:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001bd2:	f001 faeb 	bl	80031ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001bd6:	bf00      	nop
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	40010400 	.word	0x40010400
 8001be0:	20000390 	.word	0x20000390

08001be4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001be8:	4802      	ldr	r0, [pc, #8]	; (8001bf4 <TIM4_IRQHandler+0x10>)
 8001bea:	f002 fd92 	bl	8004712 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001bee:	bf00      	nop
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	20000218 	.word	0x20000218

08001bf8 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001bfc:	4802      	ldr	r0, [pc, #8]	; (8001c08 <SPI2_IRQHandler+0x10>)
 8001bfe:	f002 f9bb 	bl	8003f78 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001c02:	bf00      	nop
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	200001c0 	.word	0x200001c0

08001c0c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001c10:	4802      	ldr	r0, [pc, #8]	; (8001c1c <USART3_IRQHandler+0x10>)
 8001c12:	f003 fa0b 	bl	800502c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001c16:	bf00      	nop
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	20000260 	.word	0x20000260

08001c20 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
    if ((EXTI->PR >> 13) & 1)
 8001c24:	4b0f      	ldr	r3, [pc, #60]	; (8001c64 <EXTI15_10_IRQHandler+0x44>)
 8001c26:	695b      	ldr	r3, [r3, #20]
 8001c28:	0b5b      	lsrs	r3, r3, #13
 8001c2a:	f003 0301 	and.w	r3, r3, #1
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d012      	beq.n	8001c58 <EXTI15_10_IRQHandler+0x38>
    {
	g_DrawChrgBmp = !(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13));
 8001c32:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c36:	480c      	ldr	r0, [pc, #48]	; (8001c68 <EXTI15_10_IRQHandler+0x48>)
 8001c38:	f001 fa88 	bl	800314c <HAL_GPIO_ReadPin>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	bf0c      	ite	eq
 8001c42:	2301      	moveq	r3, #1
 8001c44:	2300      	movne	r3, #0
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	461a      	mov	r2, r3
 8001c4a:	4b08      	ldr	r3, [pc, #32]	; (8001c6c <EXTI15_10_IRQHandler+0x4c>)
 8001c4c:	701a      	strb	r2, [r3, #0]
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_13);
 8001c4e:	4b05      	ldr	r3, [pc, #20]	; (8001c64 <EXTI15_10_IRQHandler+0x44>)
 8001c50:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c54:	615a      	str	r2, [r3, #20]
	return;
 8001c56:	e003      	b.n	8001c60 <EXTI15_10_IRQHandler+0x40>
    }
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001c58:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001c5c:	f001 faa6 	bl	80031ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	40010400 	.word	0x40010400
 8001c68:	40011000 	.word	0x40011000
 8001c6c:	200001ab 	.word	0x200001ab

08001c70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b086      	sub	sp, #24
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c78:	4a14      	ldr	r2, [pc, #80]	; (8001ccc <_sbrk+0x5c>)
 8001c7a:	4b15      	ldr	r3, [pc, #84]	; (8001cd0 <_sbrk+0x60>)
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c84:	4b13      	ldr	r3, [pc, #76]	; (8001cd4 <_sbrk+0x64>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d102      	bne.n	8001c92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c8c:	4b11      	ldr	r3, [pc, #68]	; (8001cd4 <_sbrk+0x64>)
 8001c8e:	4a12      	ldr	r2, [pc, #72]	; (8001cd8 <_sbrk+0x68>)
 8001c90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c92:	4b10      	ldr	r3, [pc, #64]	; (8001cd4 <_sbrk+0x64>)
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4413      	add	r3, r2
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d207      	bcs.n	8001cb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ca0:	f003 fcc6 	bl	8005630 <__errno>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	220c      	movs	r2, #12
 8001ca8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001caa:	f04f 33ff 	mov.w	r3, #4294967295
 8001cae:	e009      	b.n	8001cc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cb0:	4b08      	ldr	r3, [pc, #32]	; (8001cd4 <_sbrk+0x64>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cb6:	4b07      	ldr	r3, [pc, #28]	; (8001cd4 <_sbrk+0x64>)
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4413      	add	r3, r2
 8001cbe:	4a05      	ldr	r2, [pc, #20]	; (8001cd4 <_sbrk+0x64>)
 8001cc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3718      	adds	r7, #24
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	20005000 	.word	0x20005000
 8001cd0:	00000800 	.word	0x00000800
 8001cd4:	200001b4 	.word	0x200001b4
 8001cd8:	200003c8 	.word	0x200003c8

08001cdc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ce0:	bf00      	nop
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bc80      	pop	{r7}
 8001ce6:	4770      	bx	lr

08001ce8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001ce8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001cea:	e003      	b.n	8001cf4 <LoopCopyDataInit>

08001cec <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001cec:	4b0b      	ldr	r3, [pc, #44]	; (8001d1c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001cee:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001cf0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001cf2:	3104      	adds	r1, #4

08001cf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001cf4:	480a      	ldr	r0, [pc, #40]	; (8001d20 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001cf6:	4b0b      	ldr	r3, [pc, #44]	; (8001d24 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001cf8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001cfa:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001cfc:	d3f6      	bcc.n	8001cec <CopyDataInit>
  ldr r2, =_sbss
 8001cfe:	4a0a      	ldr	r2, [pc, #40]	; (8001d28 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001d00:	e002      	b.n	8001d08 <LoopFillZerobss>

08001d02 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001d02:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001d04:	f842 3b04 	str.w	r3, [r2], #4

08001d08 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001d08:	4b08      	ldr	r3, [pc, #32]	; (8001d2c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001d0a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001d0c:	d3f9      	bcc.n	8001d02 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001d0e:	f7ff ffe5 	bl	8001cdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d12:	f003 fc93 	bl	800563c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d16:	f7ff f8ad 	bl	8000e74 <main>
  bx lr
 8001d1a:	4770      	bx	lr
  ldr r3, =_sidata
 8001d1c:	080069d4 	.word	0x080069d4
  ldr r0, =_sdata
 8001d20:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001d24:	2000018c 	.word	0x2000018c
  ldr r2, =_sbss
 8001d28:	2000018c 	.word	0x2000018c
  ldr r3, = _ebss
 8001d2c:	200003c8 	.word	0x200003c8

08001d30 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d30:	e7fe      	b.n	8001d30 <CAN1_RX1_IRQHandler>
	...

08001d34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d38:	4b08      	ldr	r3, [pc, #32]	; (8001d5c <HAL_Init+0x28>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a07      	ldr	r2, [pc, #28]	; (8001d5c <HAL_Init+0x28>)
 8001d3e:	f043 0310 	orr.w	r3, r3, #16
 8001d42:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d44:	2003      	movs	r0, #3
 8001d46:	f000 fdd7 	bl	80028f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d4a:	2000      	movs	r0, #0
 8001d4c:	f000 f808 	bl	8001d60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d50:	f7ff fc1c 	bl	800158c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	40022000 	.word	0x40022000

08001d60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d68:	4b12      	ldr	r3, [pc, #72]	; (8001db4 <HAL_InitTick+0x54>)
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	4b12      	ldr	r3, [pc, #72]	; (8001db8 <HAL_InitTick+0x58>)
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	4619      	mov	r1, r3
 8001d72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d76:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f000 fdef 	bl	8002962 <HAL_SYSTICK_Config>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e00e      	b.n	8001dac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2b0f      	cmp	r3, #15
 8001d92:	d80a      	bhi.n	8001daa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d94:	2200      	movs	r2, #0
 8001d96:	6879      	ldr	r1, [r7, #4]
 8001d98:	f04f 30ff 	mov.w	r0, #4294967295
 8001d9c:	f000 fdb7 	bl	800290e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001da0:	4a06      	ldr	r2, [pc, #24]	; (8001dbc <HAL_InitTick+0x5c>)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001da6:	2300      	movs	r3, #0
 8001da8:	e000      	b.n	8001dac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3708      	adds	r7, #8
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	2000011c 	.word	0x2000011c
 8001db8:	20000124 	.word	0x20000124
 8001dbc:	20000120 	.word	0x20000120

08001dc0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dc4:	4b05      	ldr	r3, [pc, #20]	; (8001ddc <HAL_IncTick+0x1c>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	461a      	mov	r2, r3
 8001dca:	4b05      	ldr	r3, [pc, #20]	; (8001de0 <HAL_IncTick+0x20>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4413      	add	r3, r2
 8001dd0:	4a03      	ldr	r2, [pc, #12]	; (8001de0 <HAL_IncTick+0x20>)
 8001dd2:	6013      	str	r3, [r2, #0]
}
 8001dd4:	bf00      	nop
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bc80      	pop	{r7}
 8001dda:	4770      	bx	lr
 8001ddc:	20000124 	.word	0x20000124
 8001de0:	200003b4 	.word	0x200003b4

08001de4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  return uwTick;
 8001de8:	4b02      	ldr	r3, [pc, #8]	; (8001df4 <HAL_GetTick+0x10>)
 8001dea:	681b      	ldr	r3, [r3, #0]
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bc80      	pop	{r7}
 8001df2:	4770      	bx	lr
 8001df4:	200003b4 	.word	0x200003b4

08001df8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e00:	f7ff fff0 	bl	8001de4 <HAL_GetTick>
 8001e04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e10:	d005      	beq.n	8001e1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e12:	4b0a      	ldr	r3, [pc, #40]	; (8001e3c <HAL_Delay+0x44>)
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	461a      	mov	r2, r3
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e1e:	bf00      	nop
 8001e20:	f7ff ffe0 	bl	8001de4 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	68fa      	ldr	r2, [r7, #12]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d8f7      	bhi.n	8001e20 <HAL_Delay+0x28>
  {
  }
}
 8001e30:	bf00      	nop
 8001e32:	bf00      	nop
 8001e34:	3710      	adds	r7, #16
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	20000124 	.word	0x20000124

08001e40 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b086      	sub	sp, #24
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001e50:	2300      	movs	r3, #0
 8001e52:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001e54:	2300      	movs	r3, #0
 8001e56:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d101      	bne.n	8001e62 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e0be      	b.n	8001fe0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d109      	bne.n	8001e84 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2200      	movs	r2, #0
 8001e74:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f7ff fbb6 	bl	80015f0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f000 fb8b 	bl	80025a0 <ADC_ConversionStop_Disable>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e92:	f003 0310 	and.w	r3, r3, #16
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	f040 8099 	bne.w	8001fce <HAL_ADC_Init+0x18e>
 8001e9c:	7dfb      	ldrb	r3, [r7, #23]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	f040 8095 	bne.w	8001fce <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001eac:	f023 0302 	bic.w	r3, r3, #2
 8001eb0:	f043 0202 	orr.w	r2, r3, #2
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001ec0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	7b1b      	ldrb	r3, [r3, #12]
 8001ec6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001ec8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001eca:	68ba      	ldr	r2, [r7, #8]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ed8:	d003      	beq.n	8001ee2 <HAL_ADC_Init+0xa2>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d102      	bne.n	8001ee8 <HAL_ADC_Init+0xa8>
 8001ee2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ee6:	e000      	b.n	8001eea <HAL_ADC_Init+0xaa>
 8001ee8:	2300      	movs	r3, #0
 8001eea:	693a      	ldr	r2, [r7, #16]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	7d1b      	ldrb	r3, [r3, #20]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d119      	bne.n	8001f2c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	7b1b      	ldrb	r3, [r3, #12]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d109      	bne.n	8001f14 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	699b      	ldr	r3, [r3, #24]
 8001f04:	3b01      	subs	r3, #1
 8001f06:	035a      	lsls	r2, r3, #13
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f10:	613b      	str	r3, [r7, #16]
 8001f12:	e00b      	b.n	8001f2c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f18:	f043 0220 	orr.w	r2, r3, #32
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f24:	f043 0201 	orr.w	r2, r3, #1
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	693a      	ldr	r2, [r7, #16]
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	689a      	ldr	r2, [r3, #8]
 8001f46:	4b28      	ldr	r3, [pc, #160]	; (8001fe8 <HAL_ADC_Init+0x1a8>)
 8001f48:	4013      	ands	r3, r2
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	6812      	ldr	r2, [r2, #0]
 8001f4e:	68b9      	ldr	r1, [r7, #8]
 8001f50:	430b      	orrs	r3, r1
 8001f52:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f5c:	d003      	beq.n	8001f66 <HAL_ADC_Init+0x126>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d104      	bne.n	8001f70 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	3b01      	subs	r3, #1
 8001f6c:	051b      	lsls	r3, r3, #20
 8001f6e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f76:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	68fa      	ldr	r2, [r7, #12]
 8001f80:	430a      	orrs	r2, r1
 8001f82:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	689a      	ldr	r2, [r3, #8]
 8001f8a:	4b18      	ldr	r3, [pc, #96]	; (8001fec <HAL_ADC_Init+0x1ac>)
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	68ba      	ldr	r2, [r7, #8]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d10b      	bne.n	8001fac <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f9e:	f023 0303 	bic.w	r3, r3, #3
 8001fa2:	f043 0201 	orr.w	r2, r3, #1
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001faa:	e018      	b.n	8001fde <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fb0:	f023 0312 	bic.w	r3, r3, #18
 8001fb4:	f043 0210 	orr.w	r2, r3, #16
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc0:	f043 0201 	orr.w	r2, r3, #1
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001fcc:	e007      	b.n	8001fde <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fd2:	f043 0210 	orr.w	r2, r3, #16
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001fde:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3718      	adds	r7, #24
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	ffe1f7fd 	.word	0xffe1f7fd
 8001fec:	ff1f0efe 	.word	0xff1f0efe

08001ff0 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002002:	2b01      	cmp	r3, #1
 8002004:	d101      	bne.n	800200a <HAL_ADC_Start_IT+0x1a>
 8002006:	2302      	movs	r3, #2
 8002008:	e0a0      	b.n	800214c <HAL_ADC_Start_IT+0x15c>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2201      	movs	r2, #1
 800200e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f000 fa72 	bl	80024fc <ADC_Enable>
 8002018:	4603      	mov	r3, r0
 800201a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800201c:	7bfb      	ldrb	r3, [r7, #15]
 800201e:	2b00      	cmp	r3, #0
 8002020:	f040 808f 	bne.w	8002142 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002028:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800202c:	f023 0301 	bic.w	r3, r3, #1
 8002030:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a45      	ldr	r2, [pc, #276]	; (8002154 <HAL_ADC_Start_IT+0x164>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d105      	bne.n	800204e <HAL_ADC_Start_IT+0x5e>
 8002042:	4b45      	ldr	r3, [pc, #276]	; (8002158 <HAL_ADC_Start_IT+0x168>)
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d115      	bne.n	800207a <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002052:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002064:	2b00      	cmp	r3, #0
 8002066:	d026      	beq.n	80020b6 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800206c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002070:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002078:	e01d      	b.n	80020b6 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800207e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a33      	ldr	r2, [pc, #204]	; (8002158 <HAL_ADC_Start_IT+0x168>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d004      	beq.n	800209a <HAL_ADC_Start_IT+0xaa>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a2f      	ldr	r2, [pc, #188]	; (8002154 <HAL_ADC_Start_IT+0x164>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d10d      	bne.n	80020b6 <HAL_ADC_Start_IT+0xc6>
 800209a:	4b2f      	ldr	r3, [pc, #188]	; (8002158 <HAL_ADC_Start_IT+0x168>)
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d007      	beq.n	80020b6 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020aa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80020ae:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d006      	beq.n	80020d0 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c6:	f023 0206 	bic.w	r2, r3, #6
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	62da      	str	r2, [r3, #44]	; 0x2c
 80020ce:	e002      	b.n	80020d6 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f06f 0202 	mvn.w	r2, #2
 80020e6:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	685a      	ldr	r2, [r3, #4]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f042 0220 	orr.w	r2, r2, #32
 80020f6:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002102:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002106:	d113      	bne.n	8002130 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800210c:	4a11      	ldr	r2, [pc, #68]	; (8002154 <HAL_ADC_Start_IT+0x164>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d105      	bne.n	800211e <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002112:	4b11      	ldr	r3, [pc, #68]	; (8002158 <HAL_ADC_Start_IT+0x168>)
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800211a:	2b00      	cmp	r3, #0
 800211c:	d108      	bne.n	8002130 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	689a      	ldr	r2, [r3, #8]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 800212c:	609a      	str	r2, [r3, #8]
 800212e:	e00c      	b.n	800214a <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	689a      	ldr	r2, [r3, #8]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800213e:	609a      	str	r2, [r3, #8]
 8002140:	e003      	b.n	800214a <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 800214a:	7bfb      	ldrb	r3, [r7, #15]
}
 800214c:	4618      	mov	r0, r3
 800214e:	3710      	adds	r7, #16
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	40012800 	.word	0x40012800
 8002158:	40012400 	.word	0x40012400

0800215c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800216a:	4618      	mov	r0, r3
 800216c:	370c      	adds	r7, #12
 800216e:	46bd      	mov	sp, r7
 8002170:	bc80      	pop	{r7}
 8002172:	4770      	bx	lr

08002174 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f003 0320 	and.w	r3, r3, #32
 8002186:	2b20      	cmp	r3, #32
 8002188:	d140      	bne.n	800220c <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0302 	and.w	r3, r3, #2
 8002194:	2b02      	cmp	r3, #2
 8002196:	d139      	bne.n	800220c <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800219c:	f003 0310 	and.w	r3, r3, #16
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d105      	bne.n	80021b0 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80021ba:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80021be:	d11d      	bne.n	80021fc <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d119      	bne.n	80021fc <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	685a      	ldr	r2, [r3, #4]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f022 0220 	bic.w	r2, r2, #32
 80021d6:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d105      	bne.n	80021fc <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f4:	f043 0201 	orr.w	r2, r3, #1
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f7fe fdad 	bl	8000d5c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f06f 0212 	mvn.w	r2, #18
 800220a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002216:	2b80      	cmp	r3, #128	; 0x80
 8002218:	d14f      	bne.n	80022ba <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0304 	and.w	r3, r3, #4
 8002224:	2b04      	cmp	r3, #4
 8002226:	d148      	bne.n	80022ba <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800222c:	f003 0310 	and.w	r3, r3, #16
 8002230:	2b00      	cmp	r3, #0
 8002232:	d105      	bne.n	8002240 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002238:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800224a:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 800224e:	d012      	beq.n	8002276 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800225a:	2b00      	cmp	r3, #0
 800225c:	d125      	bne.n	80022aa <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002268:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800226c:	d11d      	bne.n	80022aa <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002272:	2b00      	cmp	r3, #0
 8002274:	d119      	bne.n	80022aa <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	685a      	ldr	r2, [r3, #4]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002284:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800228a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002296:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800229a:	2b00      	cmp	r3, #0
 800229c:	d105      	bne.n	80022aa <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a2:	f043 0201 	orr.w	r2, r3, #1
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f000 fa4e 	bl	800274c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f06f 020c 	mvn.w	r2, #12
 80022b8:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022c4:	2b40      	cmp	r3, #64	; 0x40
 80022c6:	d114      	bne.n	80022f2 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0301 	and.w	r3, r3, #1
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d10d      	bne.n	80022f2 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022da:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f000 f809 	bl	80022fa <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f06f 0201 	mvn.w	r2, #1
 80022f0:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80022f2:	bf00      	nop
 80022f4:	3708      	adds	r7, #8
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}

080022fa <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80022fa:	b480      	push	{r7}
 80022fc:	b083      	sub	sp, #12
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002302:	bf00      	nop
 8002304:	370c      	adds	r7, #12
 8002306:	46bd      	mov	sp, r7
 8002308:	bc80      	pop	{r7}
 800230a:	4770      	bx	lr

0800230c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800230c:	b480      	push	{r7}
 800230e:	b085      	sub	sp, #20
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002316:	2300      	movs	r3, #0
 8002318:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800231a:	2300      	movs	r3, #0
 800231c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002324:	2b01      	cmp	r3, #1
 8002326:	d101      	bne.n	800232c <HAL_ADC_ConfigChannel+0x20>
 8002328:	2302      	movs	r3, #2
 800232a:	e0dc      	b.n	80024e6 <HAL_ADC_ConfigChannel+0x1da>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2201      	movs	r2, #1
 8002330:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	2b06      	cmp	r3, #6
 800233a:	d81c      	bhi.n	8002376 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	685a      	ldr	r2, [r3, #4]
 8002346:	4613      	mov	r3, r2
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	4413      	add	r3, r2
 800234c:	3b05      	subs	r3, #5
 800234e:	221f      	movs	r2, #31
 8002350:	fa02 f303 	lsl.w	r3, r2, r3
 8002354:	43db      	mvns	r3, r3
 8002356:	4019      	ands	r1, r3
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	6818      	ldr	r0, [r3, #0]
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685a      	ldr	r2, [r3, #4]
 8002360:	4613      	mov	r3, r2
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	4413      	add	r3, r2
 8002366:	3b05      	subs	r3, #5
 8002368:	fa00 f203 	lsl.w	r2, r0, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	430a      	orrs	r2, r1
 8002372:	635a      	str	r2, [r3, #52]	; 0x34
 8002374:	e03c      	b.n	80023f0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	2b0c      	cmp	r3, #12
 800237c:	d81c      	bhi.n	80023b8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685a      	ldr	r2, [r3, #4]
 8002388:	4613      	mov	r3, r2
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	4413      	add	r3, r2
 800238e:	3b23      	subs	r3, #35	; 0x23
 8002390:	221f      	movs	r2, #31
 8002392:	fa02 f303 	lsl.w	r3, r2, r3
 8002396:	43db      	mvns	r3, r3
 8002398:	4019      	ands	r1, r3
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	6818      	ldr	r0, [r3, #0]
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	685a      	ldr	r2, [r3, #4]
 80023a2:	4613      	mov	r3, r2
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	4413      	add	r3, r2
 80023a8:	3b23      	subs	r3, #35	; 0x23
 80023aa:	fa00 f203 	lsl.w	r2, r0, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	430a      	orrs	r2, r1
 80023b4:	631a      	str	r2, [r3, #48]	; 0x30
 80023b6:	e01b      	b.n	80023f0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685a      	ldr	r2, [r3, #4]
 80023c2:	4613      	mov	r3, r2
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	4413      	add	r3, r2
 80023c8:	3b41      	subs	r3, #65	; 0x41
 80023ca:	221f      	movs	r2, #31
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	43db      	mvns	r3, r3
 80023d2:	4019      	ands	r1, r3
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	6818      	ldr	r0, [r3, #0]
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685a      	ldr	r2, [r3, #4]
 80023dc:	4613      	mov	r3, r2
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	4413      	add	r3, r2
 80023e2:	3b41      	subs	r3, #65	; 0x41
 80023e4:	fa00 f203 	lsl.w	r2, r0, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	430a      	orrs	r2, r1
 80023ee:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2b09      	cmp	r3, #9
 80023f6:	d91c      	bls.n	8002432 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	68d9      	ldr	r1, [r3, #12]
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	4613      	mov	r3, r2
 8002404:	005b      	lsls	r3, r3, #1
 8002406:	4413      	add	r3, r2
 8002408:	3b1e      	subs	r3, #30
 800240a:	2207      	movs	r2, #7
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	43db      	mvns	r3, r3
 8002412:	4019      	ands	r1, r3
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	6898      	ldr	r0, [r3, #8]
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	4613      	mov	r3, r2
 800241e:	005b      	lsls	r3, r3, #1
 8002420:	4413      	add	r3, r2
 8002422:	3b1e      	subs	r3, #30
 8002424:	fa00 f203 	lsl.w	r2, r0, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	430a      	orrs	r2, r1
 800242e:	60da      	str	r2, [r3, #12]
 8002430:	e019      	b.n	8002466 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	6919      	ldr	r1, [r3, #16]
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	4613      	mov	r3, r2
 800243e:	005b      	lsls	r3, r3, #1
 8002440:	4413      	add	r3, r2
 8002442:	2207      	movs	r2, #7
 8002444:	fa02 f303 	lsl.w	r3, r2, r3
 8002448:	43db      	mvns	r3, r3
 800244a:	4019      	ands	r1, r3
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	6898      	ldr	r0, [r3, #8]
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	4613      	mov	r3, r2
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	4413      	add	r3, r2
 800245a:	fa00 f203 	lsl.w	r2, r0, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	430a      	orrs	r2, r1
 8002464:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2b10      	cmp	r3, #16
 800246c:	d003      	beq.n	8002476 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002472:	2b11      	cmp	r3, #17
 8002474:	d132      	bne.n	80024dc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a1d      	ldr	r2, [pc, #116]	; (80024f0 <HAL_ADC_ConfigChannel+0x1e4>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d125      	bne.n	80024cc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d126      	bne.n	80024dc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	689a      	ldr	r2, [r3, #8]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800249c:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2b10      	cmp	r3, #16
 80024a4:	d11a      	bne.n	80024dc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80024a6:	4b13      	ldr	r3, [pc, #76]	; (80024f4 <HAL_ADC_ConfigChannel+0x1e8>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a13      	ldr	r2, [pc, #76]	; (80024f8 <HAL_ADC_ConfigChannel+0x1ec>)
 80024ac:	fba2 2303 	umull	r2, r3, r2, r3
 80024b0:	0c9a      	lsrs	r2, r3, #18
 80024b2:	4613      	mov	r3, r2
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	4413      	add	r3, r2
 80024b8:	005b      	lsls	r3, r3, #1
 80024ba:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80024bc:	e002      	b.n	80024c4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	3b01      	subs	r3, #1
 80024c2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d1f9      	bne.n	80024be <HAL_ADC_ConfigChannel+0x1b2>
 80024ca:	e007      	b.n	80024dc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d0:	f043 0220 	orr.w	r2, r3, #32
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80024e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3714      	adds	r7, #20
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bc80      	pop	{r7}
 80024ee:	4770      	bx	lr
 80024f0:	40012400 	.word	0x40012400
 80024f4:	2000011c 	.word	0x2000011c
 80024f8:	431bde83 	.word	0x431bde83

080024fc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002504:	2300      	movs	r3, #0
 8002506:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002508:	2300      	movs	r3, #0
 800250a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	2b01      	cmp	r3, #1
 8002518:	d039      	beq.n	800258e <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	689a      	ldr	r2, [r3, #8]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f042 0201 	orr.w	r2, r2, #1
 8002528:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800252a:	4b1b      	ldr	r3, [pc, #108]	; (8002598 <ADC_Enable+0x9c>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a1b      	ldr	r2, [pc, #108]	; (800259c <ADC_Enable+0xa0>)
 8002530:	fba2 2303 	umull	r2, r3, r2, r3
 8002534:	0c9b      	lsrs	r3, r3, #18
 8002536:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002538:	e002      	b.n	8002540 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	3b01      	subs	r3, #1
 800253e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d1f9      	bne.n	800253a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002546:	f7ff fc4d 	bl	8001de4 <HAL_GetTick>
 800254a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800254c:	e018      	b.n	8002580 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800254e:	f7ff fc49 	bl	8001de4 <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	2b02      	cmp	r3, #2
 800255a:	d911      	bls.n	8002580 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002560:	f043 0210 	orr.w	r2, r3, #16
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800256c:	f043 0201 	orr.w	r2, r3, #1
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e007      	b.n	8002590 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f003 0301 	and.w	r3, r3, #1
 800258a:	2b01      	cmp	r3, #1
 800258c:	d1df      	bne.n	800254e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800258e:	2300      	movs	r3, #0
}
 8002590:	4618      	mov	r0, r3
 8002592:	3710      	adds	r7, #16
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	2000011c 	.word	0x2000011c
 800259c:	431bde83 	.word	0x431bde83

080025a0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025a8:	2300      	movs	r3, #0
 80025aa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d127      	bne.n	800260a <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	689a      	ldr	r2, [r3, #8]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f022 0201 	bic.w	r2, r2, #1
 80025c8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80025ca:	f7ff fc0b 	bl	8001de4 <HAL_GetTick>
 80025ce:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80025d0:	e014      	b.n	80025fc <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80025d2:	f7ff fc07 	bl	8001de4 <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d90d      	bls.n	80025fc <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e4:	f043 0210 	orr.w	r2, r3, #16
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f0:	f043 0201 	orr.w	r2, r3, #1
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e007      	b.n	800260c <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	f003 0301 	and.w	r3, r3, #1
 8002606:	2b01      	cmp	r3, #1
 8002608:	d0e3      	beq.n	80025d2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800260a:	2300      	movs	r3, #0
}
 800260c:	4618      	mov	r0, r3
 800260e:	3710      	adds	r7, #16
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}

08002614 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002614:	b590      	push	{r4, r7, lr}
 8002616:	b087      	sub	sp, #28
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800261c:	2300      	movs	r3, #0
 800261e:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8002620:	2300      	movs	r3, #0
 8002622:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800262a:	2b01      	cmp	r3, #1
 800262c:	d101      	bne.n	8002632 <HAL_ADCEx_Calibration_Start+0x1e>
 800262e:	2302      	movs	r3, #2
 8002630:	e086      	b.n	8002740 <HAL_ADCEx_Calibration_Start+0x12c>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2201      	movs	r2, #1
 8002636:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f7ff ffb0 	bl	80025a0 <ADC_ConversionStop_Disable>
 8002640:	4603      	mov	r3, r0
 8002642:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002644:	7dfb      	ldrb	r3, [r7, #23]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d175      	bne.n	8002736 <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800264e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002652:	f023 0302 	bic.w	r3, r3, #2
 8002656:	f043 0202 	orr.w	r2, r3, #2
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800265e:	4b3a      	ldr	r3, [pc, #232]	; (8002748 <HAL_ADCEx_Calibration_Start+0x134>)
 8002660:	681c      	ldr	r4, [r3, #0]
 8002662:	2002      	movs	r0, #2
 8002664:	f001 fa8a 	bl	8003b7c <HAL_RCCEx_GetPeriphCLKFreq>
 8002668:	4603      	mov	r3, r0
 800266a:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 800266e:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8002670:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8002672:	e002      	b.n	800267a <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	3b01      	subs	r3, #1
 8002678:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d1f9      	bne.n	8002674 <HAL_ADCEx_Calibration_Start+0x60>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f7ff ff3b 	bl	80024fc <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	689a      	ldr	r2, [r3, #8]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f042 0208 	orr.w	r2, r2, #8
 8002694:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002696:	f7ff fba5 	bl	8001de4 <HAL_GetTick>
 800269a:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800269c:	e014      	b.n	80026c8 <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800269e:	f7ff fba1 	bl	8001de4 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	2b0a      	cmp	r3, #10
 80026aa:	d90d      	bls.n	80026c8 <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b0:	f023 0312 	bic.w	r3, r3, #18
 80026b4:	f043 0210 	orr.w	r2, r3, #16
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e03b      	b.n	8002740 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	f003 0308 	and.w	r3, r3, #8
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d1e3      	bne.n	800269e <HAL_ADCEx_Calibration_Start+0x8a>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	689a      	ldr	r2, [r3, #8]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f042 0204 	orr.w	r2, r2, #4
 80026e4:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80026e6:	f7ff fb7d 	bl	8001de4 <HAL_GetTick>
 80026ea:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 80026ec:	e014      	b.n	8002718 <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80026ee:	f7ff fb79 	bl	8001de4 <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	2b0a      	cmp	r3, #10
 80026fa:	d90d      	bls.n	8002718 <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002700:	f023 0312 	bic.w	r3, r3, #18
 8002704:	f043 0210 	orr.w	r2, r3, #16
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e013      	b.n	8002740 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f003 0304 	and.w	r3, r3, #4
 8002722:	2b00      	cmp	r3, #0
 8002724:	d1e3      	bne.n	80026ee <HAL_ADCEx_Calibration_Start+0xda>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800272a:	f023 0303 	bic.w	r3, r3, #3
 800272e:	f043 0201 	orr.w	r2, r3, #1
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800273e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002740:	4618      	mov	r0, r3
 8002742:	371c      	adds	r7, #28
 8002744:	46bd      	mov	sp, r7
 8002746:	bd90      	pop	{r4, r7, pc}
 8002748:	2000011c 	.word	0x2000011c

0800274c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002754:	bf00      	nop
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	bc80      	pop	{r7}
 800275c:	4770      	bx	lr
	...

08002760 <__NVIC_SetPriorityGrouping>:
{
 8002760:	b480      	push	{r7}
 8002762:	b085      	sub	sp, #20
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f003 0307 	and.w	r3, r3, #7
 800276e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002770:	4b0c      	ldr	r3, [pc, #48]	; (80027a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002776:	68ba      	ldr	r2, [r7, #8]
 8002778:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800277c:	4013      	ands	r3, r2
 800277e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002788:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800278c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002790:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002792:	4a04      	ldr	r2, [pc, #16]	; (80027a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	60d3      	str	r3, [r2, #12]
}
 8002798:	bf00      	nop
 800279a:	3714      	adds	r7, #20
 800279c:	46bd      	mov	sp, r7
 800279e:	bc80      	pop	{r7}
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	e000ed00 	.word	0xe000ed00

080027a8 <__NVIC_GetPriorityGrouping>:
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027ac:	4b04      	ldr	r3, [pc, #16]	; (80027c0 <__NVIC_GetPriorityGrouping+0x18>)
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	0a1b      	lsrs	r3, r3, #8
 80027b2:	f003 0307 	and.w	r3, r3, #7
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bc80      	pop	{r7}
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	e000ed00 	.word	0xe000ed00

080027c4 <__NVIC_EnableIRQ>:
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	4603      	mov	r3, r0
 80027cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	db0b      	blt.n	80027ee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027d6:	79fb      	ldrb	r3, [r7, #7]
 80027d8:	f003 021f 	and.w	r2, r3, #31
 80027dc:	4906      	ldr	r1, [pc, #24]	; (80027f8 <__NVIC_EnableIRQ+0x34>)
 80027de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e2:	095b      	lsrs	r3, r3, #5
 80027e4:	2001      	movs	r0, #1
 80027e6:	fa00 f202 	lsl.w	r2, r0, r2
 80027ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80027ee:	bf00      	nop
 80027f0:	370c      	adds	r7, #12
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bc80      	pop	{r7}
 80027f6:	4770      	bx	lr
 80027f8:	e000e100 	.word	0xe000e100

080027fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	4603      	mov	r3, r0
 8002804:	6039      	str	r1, [r7, #0]
 8002806:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800280c:	2b00      	cmp	r3, #0
 800280e:	db0a      	blt.n	8002826 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	b2da      	uxtb	r2, r3
 8002814:	490c      	ldr	r1, [pc, #48]	; (8002848 <__NVIC_SetPriority+0x4c>)
 8002816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800281a:	0112      	lsls	r2, r2, #4
 800281c:	b2d2      	uxtb	r2, r2
 800281e:	440b      	add	r3, r1
 8002820:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002824:	e00a      	b.n	800283c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	b2da      	uxtb	r2, r3
 800282a:	4908      	ldr	r1, [pc, #32]	; (800284c <__NVIC_SetPriority+0x50>)
 800282c:	79fb      	ldrb	r3, [r7, #7]
 800282e:	f003 030f 	and.w	r3, r3, #15
 8002832:	3b04      	subs	r3, #4
 8002834:	0112      	lsls	r2, r2, #4
 8002836:	b2d2      	uxtb	r2, r2
 8002838:	440b      	add	r3, r1
 800283a:	761a      	strb	r2, [r3, #24]
}
 800283c:	bf00      	nop
 800283e:	370c      	adds	r7, #12
 8002840:	46bd      	mov	sp, r7
 8002842:	bc80      	pop	{r7}
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	e000e100 	.word	0xe000e100
 800284c:	e000ed00 	.word	0xe000ed00

08002850 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002850:	b480      	push	{r7}
 8002852:	b089      	sub	sp, #36	; 0x24
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	60b9      	str	r1, [r7, #8]
 800285a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f003 0307 	and.w	r3, r3, #7
 8002862:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	f1c3 0307 	rsb	r3, r3, #7
 800286a:	2b04      	cmp	r3, #4
 800286c:	bf28      	it	cs
 800286e:	2304      	movcs	r3, #4
 8002870:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	3304      	adds	r3, #4
 8002876:	2b06      	cmp	r3, #6
 8002878:	d902      	bls.n	8002880 <NVIC_EncodePriority+0x30>
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	3b03      	subs	r3, #3
 800287e:	e000      	b.n	8002882 <NVIC_EncodePriority+0x32>
 8002880:	2300      	movs	r3, #0
 8002882:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002884:	f04f 32ff 	mov.w	r2, #4294967295
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	fa02 f303 	lsl.w	r3, r2, r3
 800288e:	43da      	mvns	r2, r3
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	401a      	ands	r2, r3
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002898:	f04f 31ff 	mov.w	r1, #4294967295
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	fa01 f303 	lsl.w	r3, r1, r3
 80028a2:	43d9      	mvns	r1, r3
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028a8:	4313      	orrs	r3, r2
         );
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3724      	adds	r7, #36	; 0x24
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bc80      	pop	{r7}
 80028b2:	4770      	bx	lr

080028b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	3b01      	subs	r3, #1
 80028c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028c4:	d301      	bcc.n	80028ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028c6:	2301      	movs	r3, #1
 80028c8:	e00f      	b.n	80028ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028ca:	4a0a      	ldr	r2, [pc, #40]	; (80028f4 <SysTick_Config+0x40>)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	3b01      	subs	r3, #1
 80028d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028d2:	210f      	movs	r1, #15
 80028d4:	f04f 30ff 	mov.w	r0, #4294967295
 80028d8:	f7ff ff90 	bl	80027fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028dc:	4b05      	ldr	r3, [pc, #20]	; (80028f4 <SysTick_Config+0x40>)
 80028de:	2200      	movs	r2, #0
 80028e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028e2:	4b04      	ldr	r3, [pc, #16]	; (80028f4 <SysTick_Config+0x40>)
 80028e4:	2207      	movs	r2, #7
 80028e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028e8:	2300      	movs	r3, #0
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3708      	adds	r7, #8
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	e000e010 	.word	0xe000e010

080028f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f7ff ff2d 	bl	8002760 <__NVIC_SetPriorityGrouping>
}
 8002906:	bf00      	nop
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}

0800290e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800290e:	b580      	push	{r7, lr}
 8002910:	b086      	sub	sp, #24
 8002912:	af00      	add	r7, sp, #0
 8002914:	4603      	mov	r3, r0
 8002916:	60b9      	str	r1, [r7, #8]
 8002918:	607a      	str	r2, [r7, #4]
 800291a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800291c:	2300      	movs	r3, #0
 800291e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002920:	f7ff ff42 	bl	80027a8 <__NVIC_GetPriorityGrouping>
 8002924:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	68b9      	ldr	r1, [r7, #8]
 800292a:	6978      	ldr	r0, [r7, #20]
 800292c:	f7ff ff90 	bl	8002850 <NVIC_EncodePriority>
 8002930:	4602      	mov	r2, r0
 8002932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002936:	4611      	mov	r1, r2
 8002938:	4618      	mov	r0, r3
 800293a:	f7ff ff5f 	bl	80027fc <__NVIC_SetPriority>
}
 800293e:	bf00      	nop
 8002940:	3718      	adds	r7, #24
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002946:	b580      	push	{r7, lr}
 8002948:	b082      	sub	sp, #8
 800294a:	af00      	add	r7, sp, #0
 800294c:	4603      	mov	r3, r0
 800294e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002954:	4618      	mov	r0, r3
 8002956:	f7ff ff35 	bl	80027c4 <__NVIC_EnableIRQ>
}
 800295a:	bf00      	nop
 800295c:	3708      	adds	r7, #8
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}

08002962 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002962:	b580      	push	{r7, lr}
 8002964:	b082      	sub	sp, #8
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f7ff ffa2 	bl	80028b4 <SysTick_Config>
 8002970:	4603      	mov	r3, r0
}
 8002972:	4618      	mov	r0, r3
 8002974:	3708      	adds	r7, #8
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
	...

0800297c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800297c:	b480      	push	{r7}
 800297e:	b085      	sub	sp, #20
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002984:	2300      	movs	r3, #0
 8002986:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d101      	bne.n	8002992 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e043      	b.n	8002a1a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	461a      	mov	r2, r3
 8002998:	4b22      	ldr	r3, [pc, #136]	; (8002a24 <HAL_DMA_Init+0xa8>)
 800299a:	4413      	add	r3, r2
 800299c:	4a22      	ldr	r2, [pc, #136]	; (8002a28 <HAL_DMA_Init+0xac>)
 800299e:	fba2 2303 	umull	r2, r3, r2, r3
 80029a2:	091b      	lsrs	r3, r3, #4
 80029a4:	009a      	lsls	r2, r3, #2
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a1f      	ldr	r2, [pc, #124]	; (8002a2c <HAL_DMA_Init+0xb0>)
 80029ae:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2202      	movs	r2, #2
 80029b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80029c6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80029ca:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80029d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	695b      	ldr	r3, [r3, #20]
 80029e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	69db      	ldr	r3, [r3, #28]
 80029f2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80029f4:	68fa      	ldr	r2, [r7, #12]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	68fa      	ldr	r2, [r7, #12]
 8002a00:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3714      	adds	r7, #20
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bc80      	pop	{r7}
 8002a22:	4770      	bx	lr
 8002a24:	bffdfff8 	.word	0xbffdfff8
 8002a28:	cccccccd 	.word	0xcccccccd
 8002a2c:	40020000 	.word	0x40020000

08002a30 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b086      	sub	sp, #24
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	607a      	str	r2, [r7, #4]
 8002a3c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d101      	bne.n	8002a50 <HAL_DMA_Start_IT+0x20>
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	e04a      	b.n	8002ae6 <HAL_DMA_Start_IT+0xb6>
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d13a      	bne.n	8002ad8 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2202      	movs	r2, #2
 8002a66:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f022 0201 	bic.w	r2, r2, #1
 8002a7e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	68b9      	ldr	r1, [r7, #8]
 8002a86:	68f8      	ldr	r0, [r7, #12]
 8002a88:	f000 f9ae 	bl	8002de8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d008      	beq.n	8002aa6 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f042 020e 	orr.w	r2, r2, #14
 8002aa2:	601a      	str	r2, [r3, #0]
 8002aa4:	e00f      	b.n	8002ac6 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f022 0204 	bic.w	r2, r2, #4
 8002ab4:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f042 020a 	orr.w	r2, r2, #10
 8002ac4:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f042 0201 	orr.w	r2, r2, #1
 8002ad4:	601a      	str	r2, [r3, #0]
 8002ad6:	e005      	b.n	8002ae4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002ae0:	2302      	movs	r3, #2
 8002ae2:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002ae4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3718      	adds	r7, #24
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
	...

08002af0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002af8:	2300      	movs	r3, #0
 8002afa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d005      	beq.n	8002b12 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2204      	movs	r2, #4
 8002b0a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	73fb      	strb	r3, [r7, #15]
 8002b10:	e051      	b.n	8002bb6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f022 020e 	bic.w	r2, r2, #14
 8002b20:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f022 0201 	bic.w	r2, r2, #1
 8002b30:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a22      	ldr	r2, [pc, #136]	; (8002bc0 <HAL_DMA_Abort_IT+0xd0>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d029      	beq.n	8002b90 <HAL_DMA_Abort_IT+0xa0>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a20      	ldr	r2, [pc, #128]	; (8002bc4 <HAL_DMA_Abort_IT+0xd4>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d022      	beq.n	8002b8c <HAL_DMA_Abort_IT+0x9c>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a1f      	ldr	r2, [pc, #124]	; (8002bc8 <HAL_DMA_Abort_IT+0xd8>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d01a      	beq.n	8002b86 <HAL_DMA_Abort_IT+0x96>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a1d      	ldr	r2, [pc, #116]	; (8002bcc <HAL_DMA_Abort_IT+0xdc>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d012      	beq.n	8002b80 <HAL_DMA_Abort_IT+0x90>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a1c      	ldr	r2, [pc, #112]	; (8002bd0 <HAL_DMA_Abort_IT+0xe0>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d00a      	beq.n	8002b7a <HAL_DMA_Abort_IT+0x8a>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a1a      	ldr	r2, [pc, #104]	; (8002bd4 <HAL_DMA_Abort_IT+0xe4>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d102      	bne.n	8002b74 <HAL_DMA_Abort_IT+0x84>
 8002b6e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002b72:	e00e      	b.n	8002b92 <HAL_DMA_Abort_IT+0xa2>
 8002b74:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b78:	e00b      	b.n	8002b92 <HAL_DMA_Abort_IT+0xa2>
 8002b7a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b7e:	e008      	b.n	8002b92 <HAL_DMA_Abort_IT+0xa2>
 8002b80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b84:	e005      	b.n	8002b92 <HAL_DMA_Abort_IT+0xa2>
 8002b86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b8a:	e002      	b.n	8002b92 <HAL_DMA_Abort_IT+0xa2>
 8002b8c:	2310      	movs	r3, #16
 8002b8e:	e000      	b.n	8002b92 <HAL_DMA_Abort_IT+0xa2>
 8002b90:	2301      	movs	r3, #1
 8002b92:	4a11      	ldr	r2, [pc, #68]	; (8002bd8 <HAL_DMA_Abort_IT+0xe8>)
 8002b94:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d003      	beq.n	8002bb6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	4798      	blx	r3
    } 
  }
  return status;
 8002bb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3710      	adds	r7, #16
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	40020008 	.word	0x40020008
 8002bc4:	4002001c 	.word	0x4002001c
 8002bc8:	40020030 	.word	0x40020030
 8002bcc:	40020044 	.word	0x40020044
 8002bd0:	40020058 	.word	0x40020058
 8002bd4:	4002006c 	.word	0x4002006c
 8002bd8:	40020000 	.word	0x40020000

08002bdc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf8:	2204      	movs	r2, #4
 8002bfa:	409a      	lsls	r2, r3
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	4013      	ands	r3, r2
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d04f      	beq.n	8002ca4 <HAL_DMA_IRQHandler+0xc8>
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	f003 0304 	and.w	r3, r3, #4
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d04a      	beq.n	8002ca4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0320 	and.w	r3, r3, #32
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d107      	bne.n	8002c2c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f022 0204 	bic.w	r2, r2, #4
 8002c2a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a66      	ldr	r2, [pc, #408]	; (8002dcc <HAL_DMA_IRQHandler+0x1f0>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d029      	beq.n	8002c8a <HAL_DMA_IRQHandler+0xae>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a65      	ldr	r2, [pc, #404]	; (8002dd0 <HAL_DMA_IRQHandler+0x1f4>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d022      	beq.n	8002c86 <HAL_DMA_IRQHandler+0xaa>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a63      	ldr	r2, [pc, #396]	; (8002dd4 <HAL_DMA_IRQHandler+0x1f8>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d01a      	beq.n	8002c80 <HAL_DMA_IRQHandler+0xa4>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a62      	ldr	r2, [pc, #392]	; (8002dd8 <HAL_DMA_IRQHandler+0x1fc>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d012      	beq.n	8002c7a <HAL_DMA_IRQHandler+0x9e>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a60      	ldr	r2, [pc, #384]	; (8002ddc <HAL_DMA_IRQHandler+0x200>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d00a      	beq.n	8002c74 <HAL_DMA_IRQHandler+0x98>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a5f      	ldr	r2, [pc, #380]	; (8002de0 <HAL_DMA_IRQHandler+0x204>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d102      	bne.n	8002c6e <HAL_DMA_IRQHandler+0x92>
 8002c68:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002c6c:	e00e      	b.n	8002c8c <HAL_DMA_IRQHandler+0xb0>
 8002c6e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002c72:	e00b      	b.n	8002c8c <HAL_DMA_IRQHandler+0xb0>
 8002c74:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002c78:	e008      	b.n	8002c8c <HAL_DMA_IRQHandler+0xb0>
 8002c7a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002c7e:	e005      	b.n	8002c8c <HAL_DMA_IRQHandler+0xb0>
 8002c80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c84:	e002      	b.n	8002c8c <HAL_DMA_IRQHandler+0xb0>
 8002c86:	2340      	movs	r3, #64	; 0x40
 8002c88:	e000      	b.n	8002c8c <HAL_DMA_IRQHandler+0xb0>
 8002c8a:	2304      	movs	r3, #4
 8002c8c:	4a55      	ldr	r2, [pc, #340]	; (8002de4 <HAL_DMA_IRQHandler+0x208>)
 8002c8e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	f000 8094 	beq.w	8002dc2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002ca2:	e08e      	b.n	8002dc2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca8:	2202      	movs	r2, #2
 8002caa:	409a      	lsls	r2, r3
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	4013      	ands	r3, r2
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d056      	beq.n	8002d62 <HAL_DMA_IRQHandler+0x186>
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	f003 0302 	and.w	r3, r3, #2
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d051      	beq.n	8002d62 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0320 	and.w	r3, r3, #32
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d10b      	bne.n	8002ce4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f022 020a 	bic.w	r2, r2, #10
 8002cda:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a38      	ldr	r2, [pc, #224]	; (8002dcc <HAL_DMA_IRQHandler+0x1f0>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d029      	beq.n	8002d42 <HAL_DMA_IRQHandler+0x166>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a37      	ldr	r2, [pc, #220]	; (8002dd0 <HAL_DMA_IRQHandler+0x1f4>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d022      	beq.n	8002d3e <HAL_DMA_IRQHandler+0x162>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a35      	ldr	r2, [pc, #212]	; (8002dd4 <HAL_DMA_IRQHandler+0x1f8>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d01a      	beq.n	8002d38 <HAL_DMA_IRQHandler+0x15c>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a34      	ldr	r2, [pc, #208]	; (8002dd8 <HAL_DMA_IRQHandler+0x1fc>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d012      	beq.n	8002d32 <HAL_DMA_IRQHandler+0x156>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a32      	ldr	r2, [pc, #200]	; (8002ddc <HAL_DMA_IRQHandler+0x200>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d00a      	beq.n	8002d2c <HAL_DMA_IRQHandler+0x150>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a31      	ldr	r2, [pc, #196]	; (8002de0 <HAL_DMA_IRQHandler+0x204>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d102      	bne.n	8002d26 <HAL_DMA_IRQHandler+0x14a>
 8002d20:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002d24:	e00e      	b.n	8002d44 <HAL_DMA_IRQHandler+0x168>
 8002d26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d2a:	e00b      	b.n	8002d44 <HAL_DMA_IRQHandler+0x168>
 8002d2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d30:	e008      	b.n	8002d44 <HAL_DMA_IRQHandler+0x168>
 8002d32:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d36:	e005      	b.n	8002d44 <HAL_DMA_IRQHandler+0x168>
 8002d38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d3c:	e002      	b.n	8002d44 <HAL_DMA_IRQHandler+0x168>
 8002d3e:	2320      	movs	r3, #32
 8002d40:	e000      	b.n	8002d44 <HAL_DMA_IRQHandler+0x168>
 8002d42:	2302      	movs	r3, #2
 8002d44:	4a27      	ldr	r2, [pc, #156]	; (8002de4 <HAL_DMA_IRQHandler+0x208>)
 8002d46:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d034      	beq.n	8002dc2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002d60:	e02f      	b.n	8002dc2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d66:	2208      	movs	r2, #8
 8002d68:	409a      	lsls	r2, r3
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d028      	beq.n	8002dc4 <HAL_DMA_IRQHandler+0x1e8>
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	f003 0308 	and.w	r3, r3, #8
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d023      	beq.n	8002dc4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f022 020e 	bic.w	r2, r2, #14
 8002d8a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d94:	2101      	movs	r1, #1
 8002d96:	fa01 f202 	lsl.w	r2, r1, r2
 8002d9a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2201      	movs	r2, #1
 8002da6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2200      	movs	r2, #0
 8002dae:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d004      	beq.n	8002dc4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	4798      	blx	r3
    }
  }
  return;
 8002dc2:	bf00      	nop
 8002dc4:	bf00      	nop
}
 8002dc6:	3710      	adds	r7, #16
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	40020008 	.word	0x40020008
 8002dd0:	4002001c 	.word	0x4002001c
 8002dd4:	40020030 	.word	0x40020030
 8002dd8:	40020044 	.word	0x40020044
 8002ddc:	40020058 	.word	0x40020058
 8002de0:	4002006c 	.word	0x4002006c
 8002de4:	40020000 	.word	0x40020000

08002de8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b085      	sub	sp, #20
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	607a      	str	r2, [r7, #4]
 8002df4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dfe:	2101      	movs	r1, #1
 8002e00:	fa01 f202 	lsl.w	r2, r1, r2
 8002e04:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	683a      	ldr	r2, [r7, #0]
 8002e0c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	2b10      	cmp	r3, #16
 8002e14:	d108      	bne.n	8002e28 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	68ba      	ldr	r2, [r7, #8]
 8002e24:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002e26:	e007      	b.n	8002e38 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	68ba      	ldr	r2, [r7, #8]
 8002e2e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	60da      	str	r2, [r3, #12]
}
 8002e38:	bf00      	nop
 8002e3a:	3714      	adds	r7, #20
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bc80      	pop	{r7}
 8002e40:	4770      	bx	lr
	...

08002e44 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b08b      	sub	sp, #44	; 0x2c
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002e52:	2300      	movs	r3, #0
 8002e54:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e56:	e169      	b.n	800312c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002e58:	2201      	movs	r2, #1
 8002e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e60:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	69fa      	ldr	r2, [r7, #28]
 8002e68:	4013      	ands	r3, r2
 8002e6a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002e6c:	69ba      	ldr	r2, [r7, #24]
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	f040 8158 	bne.w	8003126 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	4a9a      	ldr	r2, [pc, #616]	; (80030e4 <HAL_GPIO_Init+0x2a0>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d05e      	beq.n	8002f3e <HAL_GPIO_Init+0xfa>
 8002e80:	4a98      	ldr	r2, [pc, #608]	; (80030e4 <HAL_GPIO_Init+0x2a0>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d875      	bhi.n	8002f72 <HAL_GPIO_Init+0x12e>
 8002e86:	4a98      	ldr	r2, [pc, #608]	; (80030e8 <HAL_GPIO_Init+0x2a4>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d058      	beq.n	8002f3e <HAL_GPIO_Init+0xfa>
 8002e8c:	4a96      	ldr	r2, [pc, #600]	; (80030e8 <HAL_GPIO_Init+0x2a4>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d86f      	bhi.n	8002f72 <HAL_GPIO_Init+0x12e>
 8002e92:	4a96      	ldr	r2, [pc, #600]	; (80030ec <HAL_GPIO_Init+0x2a8>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d052      	beq.n	8002f3e <HAL_GPIO_Init+0xfa>
 8002e98:	4a94      	ldr	r2, [pc, #592]	; (80030ec <HAL_GPIO_Init+0x2a8>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d869      	bhi.n	8002f72 <HAL_GPIO_Init+0x12e>
 8002e9e:	4a94      	ldr	r2, [pc, #592]	; (80030f0 <HAL_GPIO_Init+0x2ac>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d04c      	beq.n	8002f3e <HAL_GPIO_Init+0xfa>
 8002ea4:	4a92      	ldr	r2, [pc, #584]	; (80030f0 <HAL_GPIO_Init+0x2ac>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d863      	bhi.n	8002f72 <HAL_GPIO_Init+0x12e>
 8002eaa:	4a92      	ldr	r2, [pc, #584]	; (80030f4 <HAL_GPIO_Init+0x2b0>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d046      	beq.n	8002f3e <HAL_GPIO_Init+0xfa>
 8002eb0:	4a90      	ldr	r2, [pc, #576]	; (80030f4 <HAL_GPIO_Init+0x2b0>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d85d      	bhi.n	8002f72 <HAL_GPIO_Init+0x12e>
 8002eb6:	2b12      	cmp	r3, #18
 8002eb8:	d82a      	bhi.n	8002f10 <HAL_GPIO_Init+0xcc>
 8002eba:	2b12      	cmp	r3, #18
 8002ebc:	d859      	bhi.n	8002f72 <HAL_GPIO_Init+0x12e>
 8002ebe:	a201      	add	r2, pc, #4	; (adr r2, 8002ec4 <HAL_GPIO_Init+0x80>)
 8002ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ec4:	08002f3f 	.word	0x08002f3f
 8002ec8:	08002f19 	.word	0x08002f19
 8002ecc:	08002f2b 	.word	0x08002f2b
 8002ed0:	08002f6d 	.word	0x08002f6d
 8002ed4:	08002f73 	.word	0x08002f73
 8002ed8:	08002f73 	.word	0x08002f73
 8002edc:	08002f73 	.word	0x08002f73
 8002ee0:	08002f73 	.word	0x08002f73
 8002ee4:	08002f73 	.word	0x08002f73
 8002ee8:	08002f73 	.word	0x08002f73
 8002eec:	08002f73 	.word	0x08002f73
 8002ef0:	08002f73 	.word	0x08002f73
 8002ef4:	08002f73 	.word	0x08002f73
 8002ef8:	08002f73 	.word	0x08002f73
 8002efc:	08002f73 	.word	0x08002f73
 8002f00:	08002f73 	.word	0x08002f73
 8002f04:	08002f73 	.word	0x08002f73
 8002f08:	08002f21 	.word	0x08002f21
 8002f0c:	08002f35 	.word	0x08002f35
 8002f10:	4a79      	ldr	r2, [pc, #484]	; (80030f8 <HAL_GPIO_Init+0x2b4>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d013      	beq.n	8002f3e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002f16:	e02c      	b.n	8002f72 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	623b      	str	r3, [r7, #32]
          break;
 8002f1e:	e029      	b.n	8002f74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	3304      	adds	r3, #4
 8002f26:	623b      	str	r3, [r7, #32]
          break;
 8002f28:	e024      	b.n	8002f74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	3308      	adds	r3, #8
 8002f30:	623b      	str	r3, [r7, #32]
          break;
 8002f32:	e01f      	b.n	8002f74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	330c      	adds	r3, #12
 8002f3a:	623b      	str	r3, [r7, #32]
          break;
 8002f3c:	e01a      	b.n	8002f74 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d102      	bne.n	8002f4c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002f46:	2304      	movs	r3, #4
 8002f48:	623b      	str	r3, [r7, #32]
          break;
 8002f4a:	e013      	b.n	8002f74 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d105      	bne.n	8002f60 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f54:	2308      	movs	r3, #8
 8002f56:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	69fa      	ldr	r2, [r7, #28]
 8002f5c:	611a      	str	r2, [r3, #16]
          break;
 8002f5e:	e009      	b.n	8002f74 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f60:	2308      	movs	r3, #8
 8002f62:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	69fa      	ldr	r2, [r7, #28]
 8002f68:	615a      	str	r2, [r3, #20]
          break;
 8002f6a:	e003      	b.n	8002f74 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	623b      	str	r3, [r7, #32]
          break;
 8002f70:	e000      	b.n	8002f74 <HAL_GPIO_Init+0x130>
          break;
 8002f72:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	2bff      	cmp	r3, #255	; 0xff
 8002f78:	d801      	bhi.n	8002f7e <HAL_GPIO_Init+0x13a>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	e001      	b.n	8002f82 <HAL_GPIO_Init+0x13e>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	3304      	adds	r3, #4
 8002f82:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	2bff      	cmp	r3, #255	; 0xff
 8002f88:	d802      	bhi.n	8002f90 <HAL_GPIO_Init+0x14c>
 8002f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	e002      	b.n	8002f96 <HAL_GPIO_Init+0x152>
 8002f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f92:	3b08      	subs	r3, #8
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	210f      	movs	r1, #15
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	fa01 f303 	lsl.w	r3, r1, r3
 8002fa4:	43db      	mvns	r3, r3
 8002fa6:	401a      	ands	r2, r3
 8002fa8:	6a39      	ldr	r1, [r7, #32]
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	fa01 f303 	lsl.w	r3, r1, r3
 8002fb0:	431a      	orrs	r2, r3
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	f000 80b1 	beq.w	8003126 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002fc4:	4b4d      	ldr	r3, [pc, #308]	; (80030fc <HAL_GPIO_Init+0x2b8>)
 8002fc6:	699b      	ldr	r3, [r3, #24]
 8002fc8:	4a4c      	ldr	r2, [pc, #304]	; (80030fc <HAL_GPIO_Init+0x2b8>)
 8002fca:	f043 0301 	orr.w	r3, r3, #1
 8002fce:	6193      	str	r3, [r2, #24]
 8002fd0:	4b4a      	ldr	r3, [pc, #296]	; (80030fc <HAL_GPIO_Init+0x2b8>)
 8002fd2:	699b      	ldr	r3, [r3, #24]
 8002fd4:	f003 0301 	and.w	r3, r3, #1
 8002fd8:	60bb      	str	r3, [r7, #8]
 8002fda:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002fdc:	4a48      	ldr	r2, [pc, #288]	; (8003100 <HAL_GPIO_Init+0x2bc>)
 8002fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe0:	089b      	lsrs	r3, r3, #2
 8002fe2:	3302      	adds	r3, #2
 8002fe4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fe8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fec:	f003 0303 	and.w	r3, r3, #3
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	220f      	movs	r2, #15
 8002ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff8:	43db      	mvns	r3, r3
 8002ffa:	68fa      	ldr	r2, [r7, #12]
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	4a40      	ldr	r2, [pc, #256]	; (8003104 <HAL_GPIO_Init+0x2c0>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d013      	beq.n	8003030 <HAL_GPIO_Init+0x1ec>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	4a3f      	ldr	r2, [pc, #252]	; (8003108 <HAL_GPIO_Init+0x2c4>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d00d      	beq.n	800302c <HAL_GPIO_Init+0x1e8>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4a3e      	ldr	r2, [pc, #248]	; (800310c <HAL_GPIO_Init+0x2c8>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d007      	beq.n	8003028 <HAL_GPIO_Init+0x1e4>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	4a3d      	ldr	r2, [pc, #244]	; (8003110 <HAL_GPIO_Init+0x2cc>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d101      	bne.n	8003024 <HAL_GPIO_Init+0x1e0>
 8003020:	2303      	movs	r3, #3
 8003022:	e006      	b.n	8003032 <HAL_GPIO_Init+0x1ee>
 8003024:	2304      	movs	r3, #4
 8003026:	e004      	b.n	8003032 <HAL_GPIO_Init+0x1ee>
 8003028:	2302      	movs	r3, #2
 800302a:	e002      	b.n	8003032 <HAL_GPIO_Init+0x1ee>
 800302c:	2301      	movs	r3, #1
 800302e:	e000      	b.n	8003032 <HAL_GPIO_Init+0x1ee>
 8003030:	2300      	movs	r3, #0
 8003032:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003034:	f002 0203 	and.w	r2, r2, #3
 8003038:	0092      	lsls	r2, r2, #2
 800303a:	4093      	lsls	r3, r2
 800303c:	68fa      	ldr	r2, [r7, #12]
 800303e:	4313      	orrs	r3, r2
 8003040:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003042:	492f      	ldr	r1, [pc, #188]	; (8003100 <HAL_GPIO_Init+0x2bc>)
 8003044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003046:	089b      	lsrs	r3, r3, #2
 8003048:	3302      	adds	r3, #2
 800304a:	68fa      	ldr	r2, [r7, #12]
 800304c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d006      	beq.n	800306a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800305c:	4b2d      	ldr	r3, [pc, #180]	; (8003114 <HAL_GPIO_Init+0x2d0>)
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	492c      	ldr	r1, [pc, #176]	; (8003114 <HAL_GPIO_Init+0x2d0>)
 8003062:	69bb      	ldr	r3, [r7, #24]
 8003064:	4313      	orrs	r3, r2
 8003066:	600b      	str	r3, [r1, #0]
 8003068:	e006      	b.n	8003078 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800306a:	4b2a      	ldr	r3, [pc, #168]	; (8003114 <HAL_GPIO_Init+0x2d0>)
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	43db      	mvns	r3, r3
 8003072:	4928      	ldr	r1, [pc, #160]	; (8003114 <HAL_GPIO_Init+0x2d0>)
 8003074:	4013      	ands	r3, r2
 8003076:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d006      	beq.n	8003092 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003084:	4b23      	ldr	r3, [pc, #140]	; (8003114 <HAL_GPIO_Init+0x2d0>)
 8003086:	685a      	ldr	r2, [r3, #4]
 8003088:	4922      	ldr	r1, [pc, #136]	; (8003114 <HAL_GPIO_Init+0x2d0>)
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	4313      	orrs	r3, r2
 800308e:	604b      	str	r3, [r1, #4]
 8003090:	e006      	b.n	80030a0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003092:	4b20      	ldr	r3, [pc, #128]	; (8003114 <HAL_GPIO_Init+0x2d0>)
 8003094:	685a      	ldr	r2, [r3, #4]
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	43db      	mvns	r3, r3
 800309a:	491e      	ldr	r1, [pc, #120]	; (8003114 <HAL_GPIO_Init+0x2d0>)
 800309c:	4013      	ands	r3, r2
 800309e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d006      	beq.n	80030ba <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80030ac:	4b19      	ldr	r3, [pc, #100]	; (8003114 <HAL_GPIO_Init+0x2d0>)
 80030ae:	689a      	ldr	r2, [r3, #8]
 80030b0:	4918      	ldr	r1, [pc, #96]	; (8003114 <HAL_GPIO_Init+0x2d0>)
 80030b2:	69bb      	ldr	r3, [r7, #24]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	608b      	str	r3, [r1, #8]
 80030b8:	e006      	b.n	80030c8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80030ba:	4b16      	ldr	r3, [pc, #88]	; (8003114 <HAL_GPIO_Init+0x2d0>)
 80030bc:	689a      	ldr	r2, [r3, #8]
 80030be:	69bb      	ldr	r3, [r7, #24]
 80030c0:	43db      	mvns	r3, r3
 80030c2:	4914      	ldr	r1, [pc, #80]	; (8003114 <HAL_GPIO_Init+0x2d0>)
 80030c4:	4013      	ands	r3, r2
 80030c6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d021      	beq.n	8003118 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80030d4:	4b0f      	ldr	r3, [pc, #60]	; (8003114 <HAL_GPIO_Init+0x2d0>)
 80030d6:	68da      	ldr	r2, [r3, #12]
 80030d8:	490e      	ldr	r1, [pc, #56]	; (8003114 <HAL_GPIO_Init+0x2d0>)
 80030da:	69bb      	ldr	r3, [r7, #24]
 80030dc:	4313      	orrs	r3, r2
 80030de:	60cb      	str	r3, [r1, #12]
 80030e0:	e021      	b.n	8003126 <HAL_GPIO_Init+0x2e2>
 80030e2:	bf00      	nop
 80030e4:	10320000 	.word	0x10320000
 80030e8:	10310000 	.word	0x10310000
 80030ec:	10220000 	.word	0x10220000
 80030f0:	10210000 	.word	0x10210000
 80030f4:	10120000 	.word	0x10120000
 80030f8:	10110000 	.word	0x10110000
 80030fc:	40021000 	.word	0x40021000
 8003100:	40010000 	.word	0x40010000
 8003104:	40010800 	.word	0x40010800
 8003108:	40010c00 	.word	0x40010c00
 800310c:	40011000 	.word	0x40011000
 8003110:	40011400 	.word	0x40011400
 8003114:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003118:	4b0b      	ldr	r3, [pc, #44]	; (8003148 <HAL_GPIO_Init+0x304>)
 800311a:	68da      	ldr	r2, [r3, #12]
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	43db      	mvns	r3, r3
 8003120:	4909      	ldr	r1, [pc, #36]	; (8003148 <HAL_GPIO_Init+0x304>)
 8003122:	4013      	ands	r3, r2
 8003124:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003128:	3301      	adds	r3, #1
 800312a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003132:	fa22 f303 	lsr.w	r3, r2, r3
 8003136:	2b00      	cmp	r3, #0
 8003138:	f47f ae8e 	bne.w	8002e58 <HAL_GPIO_Init+0x14>
  }
}
 800313c:	bf00      	nop
 800313e:	bf00      	nop
 8003140:	372c      	adds	r7, #44	; 0x2c
 8003142:	46bd      	mov	sp, r7
 8003144:	bc80      	pop	{r7}
 8003146:	4770      	bx	lr
 8003148:	40010400 	.word	0x40010400

0800314c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800314c:	b480      	push	{r7}
 800314e:	b085      	sub	sp, #20
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	460b      	mov	r3, r1
 8003156:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	689a      	ldr	r2, [r3, #8]
 800315c:	887b      	ldrh	r3, [r7, #2]
 800315e:	4013      	ands	r3, r2
 8003160:	2b00      	cmp	r3, #0
 8003162:	d002      	beq.n	800316a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003164:	2301      	movs	r3, #1
 8003166:	73fb      	strb	r3, [r7, #15]
 8003168:	e001      	b.n	800316e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800316a:	2300      	movs	r3, #0
 800316c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800316e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003170:	4618      	mov	r0, r3
 8003172:	3714      	adds	r7, #20
 8003174:	46bd      	mov	sp, r7
 8003176:	bc80      	pop	{r7}
 8003178:	4770      	bx	lr

0800317a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800317a:	b480      	push	{r7}
 800317c:	b083      	sub	sp, #12
 800317e:	af00      	add	r7, sp, #0
 8003180:	6078      	str	r0, [r7, #4]
 8003182:	460b      	mov	r3, r1
 8003184:	807b      	strh	r3, [r7, #2]
 8003186:	4613      	mov	r3, r2
 8003188:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800318a:	787b      	ldrb	r3, [r7, #1]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d003      	beq.n	8003198 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003190:	887a      	ldrh	r2, [r7, #2]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003196:	e003      	b.n	80031a0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003198:	887b      	ldrh	r3, [r7, #2]
 800319a:	041a      	lsls	r2, r3, #16
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	611a      	str	r2, [r3, #16]
}
 80031a0:	bf00      	nop
 80031a2:	370c      	adds	r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bc80      	pop	{r7}
 80031a8:	4770      	bx	lr
	...

080031ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b082      	sub	sp, #8
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	4603      	mov	r3, r0
 80031b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80031b6:	4b08      	ldr	r3, [pc, #32]	; (80031d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031b8:	695a      	ldr	r2, [r3, #20]
 80031ba:	88fb      	ldrh	r3, [r7, #6]
 80031bc:	4013      	ands	r3, r2
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d006      	beq.n	80031d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80031c2:	4a05      	ldr	r2, [pc, #20]	; (80031d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031c4:	88fb      	ldrh	r3, [r7, #6]
 80031c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80031c8:	88fb      	ldrh	r3, [r7, #6]
 80031ca:	4618      	mov	r0, r3
 80031cc:	f7fe fbda 	bl	8001984 <HAL_GPIO_EXTI_Callback>
  }
}
 80031d0:	bf00      	nop
 80031d2:	3708      	adds	r7, #8
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	40010400 	.word	0x40010400

080031dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b086      	sub	sp, #24
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d101      	bne.n	80031ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e26c      	b.n	80036c8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	f000 8087 	beq.w	800330a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80031fc:	4b92      	ldr	r3, [pc, #584]	; (8003448 <HAL_RCC_OscConfig+0x26c>)
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f003 030c 	and.w	r3, r3, #12
 8003204:	2b04      	cmp	r3, #4
 8003206:	d00c      	beq.n	8003222 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003208:	4b8f      	ldr	r3, [pc, #572]	; (8003448 <HAL_RCC_OscConfig+0x26c>)
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f003 030c 	and.w	r3, r3, #12
 8003210:	2b08      	cmp	r3, #8
 8003212:	d112      	bne.n	800323a <HAL_RCC_OscConfig+0x5e>
 8003214:	4b8c      	ldr	r3, [pc, #560]	; (8003448 <HAL_RCC_OscConfig+0x26c>)
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800321c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003220:	d10b      	bne.n	800323a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003222:	4b89      	ldr	r3, [pc, #548]	; (8003448 <HAL_RCC_OscConfig+0x26c>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d06c      	beq.n	8003308 <HAL_RCC_OscConfig+0x12c>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d168      	bne.n	8003308 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e246      	b.n	80036c8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003242:	d106      	bne.n	8003252 <HAL_RCC_OscConfig+0x76>
 8003244:	4b80      	ldr	r3, [pc, #512]	; (8003448 <HAL_RCC_OscConfig+0x26c>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a7f      	ldr	r2, [pc, #508]	; (8003448 <HAL_RCC_OscConfig+0x26c>)
 800324a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800324e:	6013      	str	r3, [r2, #0]
 8003250:	e02e      	b.n	80032b0 <HAL_RCC_OscConfig+0xd4>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d10c      	bne.n	8003274 <HAL_RCC_OscConfig+0x98>
 800325a:	4b7b      	ldr	r3, [pc, #492]	; (8003448 <HAL_RCC_OscConfig+0x26c>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a7a      	ldr	r2, [pc, #488]	; (8003448 <HAL_RCC_OscConfig+0x26c>)
 8003260:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003264:	6013      	str	r3, [r2, #0]
 8003266:	4b78      	ldr	r3, [pc, #480]	; (8003448 <HAL_RCC_OscConfig+0x26c>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a77      	ldr	r2, [pc, #476]	; (8003448 <HAL_RCC_OscConfig+0x26c>)
 800326c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003270:	6013      	str	r3, [r2, #0]
 8003272:	e01d      	b.n	80032b0 <HAL_RCC_OscConfig+0xd4>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800327c:	d10c      	bne.n	8003298 <HAL_RCC_OscConfig+0xbc>
 800327e:	4b72      	ldr	r3, [pc, #456]	; (8003448 <HAL_RCC_OscConfig+0x26c>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a71      	ldr	r2, [pc, #452]	; (8003448 <HAL_RCC_OscConfig+0x26c>)
 8003284:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003288:	6013      	str	r3, [r2, #0]
 800328a:	4b6f      	ldr	r3, [pc, #444]	; (8003448 <HAL_RCC_OscConfig+0x26c>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a6e      	ldr	r2, [pc, #440]	; (8003448 <HAL_RCC_OscConfig+0x26c>)
 8003290:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003294:	6013      	str	r3, [r2, #0]
 8003296:	e00b      	b.n	80032b0 <HAL_RCC_OscConfig+0xd4>
 8003298:	4b6b      	ldr	r3, [pc, #428]	; (8003448 <HAL_RCC_OscConfig+0x26c>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a6a      	ldr	r2, [pc, #424]	; (8003448 <HAL_RCC_OscConfig+0x26c>)
 800329e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032a2:	6013      	str	r3, [r2, #0]
 80032a4:	4b68      	ldr	r3, [pc, #416]	; (8003448 <HAL_RCC_OscConfig+0x26c>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a67      	ldr	r2, [pc, #412]	; (8003448 <HAL_RCC_OscConfig+0x26c>)
 80032aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032ae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d013      	beq.n	80032e0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b8:	f7fe fd94 	bl	8001de4 <HAL_GetTick>
 80032bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032be:	e008      	b.n	80032d2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032c0:	f7fe fd90 	bl	8001de4 <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	2b64      	cmp	r3, #100	; 0x64
 80032cc:	d901      	bls.n	80032d2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e1fa      	b.n	80036c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032d2:	4b5d      	ldr	r3, [pc, #372]	; (8003448 <HAL_RCC_OscConfig+0x26c>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d0f0      	beq.n	80032c0 <HAL_RCC_OscConfig+0xe4>
 80032de:	e014      	b.n	800330a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032e0:	f7fe fd80 	bl	8001de4 <HAL_GetTick>
 80032e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032e6:	e008      	b.n	80032fa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032e8:	f7fe fd7c 	bl	8001de4 <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	2b64      	cmp	r3, #100	; 0x64
 80032f4:	d901      	bls.n	80032fa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e1e6      	b.n	80036c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032fa:	4b53      	ldr	r3, [pc, #332]	; (8003448 <HAL_RCC_OscConfig+0x26c>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d1f0      	bne.n	80032e8 <HAL_RCC_OscConfig+0x10c>
 8003306:	e000      	b.n	800330a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003308:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0302 	and.w	r3, r3, #2
 8003312:	2b00      	cmp	r3, #0
 8003314:	d063      	beq.n	80033de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003316:	4b4c      	ldr	r3, [pc, #304]	; (8003448 <HAL_RCC_OscConfig+0x26c>)
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f003 030c 	and.w	r3, r3, #12
 800331e:	2b00      	cmp	r3, #0
 8003320:	d00b      	beq.n	800333a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003322:	4b49      	ldr	r3, [pc, #292]	; (8003448 <HAL_RCC_OscConfig+0x26c>)
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f003 030c 	and.w	r3, r3, #12
 800332a:	2b08      	cmp	r3, #8
 800332c:	d11c      	bne.n	8003368 <HAL_RCC_OscConfig+0x18c>
 800332e:	4b46      	ldr	r3, [pc, #280]	; (8003448 <HAL_RCC_OscConfig+0x26c>)
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d116      	bne.n	8003368 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800333a:	4b43      	ldr	r3, [pc, #268]	; (8003448 <HAL_RCC_OscConfig+0x26c>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0302 	and.w	r3, r3, #2
 8003342:	2b00      	cmp	r3, #0
 8003344:	d005      	beq.n	8003352 <HAL_RCC_OscConfig+0x176>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	691b      	ldr	r3, [r3, #16]
 800334a:	2b01      	cmp	r3, #1
 800334c:	d001      	beq.n	8003352 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e1ba      	b.n	80036c8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003352:	4b3d      	ldr	r3, [pc, #244]	; (8003448 <HAL_RCC_OscConfig+0x26c>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	695b      	ldr	r3, [r3, #20]
 800335e:	00db      	lsls	r3, r3, #3
 8003360:	4939      	ldr	r1, [pc, #228]	; (8003448 <HAL_RCC_OscConfig+0x26c>)
 8003362:	4313      	orrs	r3, r2
 8003364:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003366:	e03a      	b.n	80033de <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	691b      	ldr	r3, [r3, #16]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d020      	beq.n	80033b2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003370:	4b36      	ldr	r3, [pc, #216]	; (800344c <HAL_RCC_OscConfig+0x270>)
 8003372:	2201      	movs	r2, #1
 8003374:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003376:	f7fe fd35 	bl	8001de4 <HAL_GetTick>
 800337a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800337c:	e008      	b.n	8003390 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800337e:	f7fe fd31 	bl	8001de4 <HAL_GetTick>
 8003382:	4602      	mov	r2, r0
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	2b02      	cmp	r3, #2
 800338a:	d901      	bls.n	8003390 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	e19b      	b.n	80036c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003390:	4b2d      	ldr	r3, [pc, #180]	; (8003448 <HAL_RCC_OscConfig+0x26c>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0302 	and.w	r3, r3, #2
 8003398:	2b00      	cmp	r3, #0
 800339a:	d0f0      	beq.n	800337e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800339c:	4b2a      	ldr	r3, [pc, #168]	; (8003448 <HAL_RCC_OscConfig+0x26c>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	695b      	ldr	r3, [r3, #20]
 80033a8:	00db      	lsls	r3, r3, #3
 80033aa:	4927      	ldr	r1, [pc, #156]	; (8003448 <HAL_RCC_OscConfig+0x26c>)
 80033ac:	4313      	orrs	r3, r2
 80033ae:	600b      	str	r3, [r1, #0]
 80033b0:	e015      	b.n	80033de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033b2:	4b26      	ldr	r3, [pc, #152]	; (800344c <HAL_RCC_OscConfig+0x270>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033b8:	f7fe fd14 	bl	8001de4 <HAL_GetTick>
 80033bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033be:	e008      	b.n	80033d2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033c0:	f7fe fd10 	bl	8001de4 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d901      	bls.n	80033d2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e17a      	b.n	80036c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033d2:	4b1d      	ldr	r3, [pc, #116]	; (8003448 <HAL_RCC_OscConfig+0x26c>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0302 	and.w	r3, r3, #2
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d1f0      	bne.n	80033c0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0308 	and.w	r3, r3, #8
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d03a      	beq.n	8003460 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	699b      	ldr	r3, [r3, #24]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d019      	beq.n	8003426 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033f2:	4b17      	ldr	r3, [pc, #92]	; (8003450 <HAL_RCC_OscConfig+0x274>)
 80033f4:	2201      	movs	r2, #1
 80033f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033f8:	f7fe fcf4 	bl	8001de4 <HAL_GetTick>
 80033fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033fe:	e008      	b.n	8003412 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003400:	f7fe fcf0 	bl	8001de4 <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	2b02      	cmp	r3, #2
 800340c:	d901      	bls.n	8003412 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e15a      	b.n	80036c8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003412:	4b0d      	ldr	r3, [pc, #52]	; (8003448 <HAL_RCC_OscConfig+0x26c>)
 8003414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003416:	f003 0302 	and.w	r3, r3, #2
 800341a:	2b00      	cmp	r3, #0
 800341c:	d0f0      	beq.n	8003400 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800341e:	2001      	movs	r0, #1
 8003420:	f000 fad8 	bl	80039d4 <RCC_Delay>
 8003424:	e01c      	b.n	8003460 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003426:	4b0a      	ldr	r3, [pc, #40]	; (8003450 <HAL_RCC_OscConfig+0x274>)
 8003428:	2200      	movs	r2, #0
 800342a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800342c:	f7fe fcda 	bl	8001de4 <HAL_GetTick>
 8003430:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003432:	e00f      	b.n	8003454 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003434:	f7fe fcd6 	bl	8001de4 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	2b02      	cmp	r3, #2
 8003440:	d908      	bls.n	8003454 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e140      	b.n	80036c8 <HAL_RCC_OscConfig+0x4ec>
 8003446:	bf00      	nop
 8003448:	40021000 	.word	0x40021000
 800344c:	42420000 	.word	0x42420000
 8003450:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003454:	4b9e      	ldr	r3, [pc, #632]	; (80036d0 <HAL_RCC_OscConfig+0x4f4>)
 8003456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003458:	f003 0302 	and.w	r3, r3, #2
 800345c:	2b00      	cmp	r3, #0
 800345e:	d1e9      	bne.n	8003434 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0304 	and.w	r3, r3, #4
 8003468:	2b00      	cmp	r3, #0
 800346a:	f000 80a6 	beq.w	80035ba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800346e:	2300      	movs	r3, #0
 8003470:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003472:	4b97      	ldr	r3, [pc, #604]	; (80036d0 <HAL_RCC_OscConfig+0x4f4>)
 8003474:	69db      	ldr	r3, [r3, #28]
 8003476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d10d      	bne.n	800349a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800347e:	4b94      	ldr	r3, [pc, #592]	; (80036d0 <HAL_RCC_OscConfig+0x4f4>)
 8003480:	69db      	ldr	r3, [r3, #28]
 8003482:	4a93      	ldr	r2, [pc, #588]	; (80036d0 <HAL_RCC_OscConfig+0x4f4>)
 8003484:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003488:	61d3      	str	r3, [r2, #28]
 800348a:	4b91      	ldr	r3, [pc, #580]	; (80036d0 <HAL_RCC_OscConfig+0x4f4>)
 800348c:	69db      	ldr	r3, [r3, #28]
 800348e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003492:	60bb      	str	r3, [r7, #8]
 8003494:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003496:	2301      	movs	r3, #1
 8003498:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800349a:	4b8e      	ldr	r3, [pc, #568]	; (80036d4 <HAL_RCC_OscConfig+0x4f8>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d118      	bne.n	80034d8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034a6:	4b8b      	ldr	r3, [pc, #556]	; (80036d4 <HAL_RCC_OscConfig+0x4f8>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a8a      	ldr	r2, [pc, #552]	; (80036d4 <HAL_RCC_OscConfig+0x4f8>)
 80034ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034b2:	f7fe fc97 	bl	8001de4 <HAL_GetTick>
 80034b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034b8:	e008      	b.n	80034cc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034ba:	f7fe fc93 	bl	8001de4 <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	2b64      	cmp	r3, #100	; 0x64
 80034c6:	d901      	bls.n	80034cc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	e0fd      	b.n	80036c8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034cc:	4b81      	ldr	r3, [pc, #516]	; (80036d4 <HAL_RCC_OscConfig+0x4f8>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d0f0      	beq.n	80034ba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d106      	bne.n	80034ee <HAL_RCC_OscConfig+0x312>
 80034e0:	4b7b      	ldr	r3, [pc, #492]	; (80036d0 <HAL_RCC_OscConfig+0x4f4>)
 80034e2:	6a1b      	ldr	r3, [r3, #32]
 80034e4:	4a7a      	ldr	r2, [pc, #488]	; (80036d0 <HAL_RCC_OscConfig+0x4f4>)
 80034e6:	f043 0301 	orr.w	r3, r3, #1
 80034ea:	6213      	str	r3, [r2, #32]
 80034ec:	e02d      	b.n	800354a <HAL_RCC_OscConfig+0x36e>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d10c      	bne.n	8003510 <HAL_RCC_OscConfig+0x334>
 80034f6:	4b76      	ldr	r3, [pc, #472]	; (80036d0 <HAL_RCC_OscConfig+0x4f4>)
 80034f8:	6a1b      	ldr	r3, [r3, #32]
 80034fa:	4a75      	ldr	r2, [pc, #468]	; (80036d0 <HAL_RCC_OscConfig+0x4f4>)
 80034fc:	f023 0301 	bic.w	r3, r3, #1
 8003500:	6213      	str	r3, [r2, #32]
 8003502:	4b73      	ldr	r3, [pc, #460]	; (80036d0 <HAL_RCC_OscConfig+0x4f4>)
 8003504:	6a1b      	ldr	r3, [r3, #32]
 8003506:	4a72      	ldr	r2, [pc, #456]	; (80036d0 <HAL_RCC_OscConfig+0x4f4>)
 8003508:	f023 0304 	bic.w	r3, r3, #4
 800350c:	6213      	str	r3, [r2, #32]
 800350e:	e01c      	b.n	800354a <HAL_RCC_OscConfig+0x36e>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	2b05      	cmp	r3, #5
 8003516:	d10c      	bne.n	8003532 <HAL_RCC_OscConfig+0x356>
 8003518:	4b6d      	ldr	r3, [pc, #436]	; (80036d0 <HAL_RCC_OscConfig+0x4f4>)
 800351a:	6a1b      	ldr	r3, [r3, #32]
 800351c:	4a6c      	ldr	r2, [pc, #432]	; (80036d0 <HAL_RCC_OscConfig+0x4f4>)
 800351e:	f043 0304 	orr.w	r3, r3, #4
 8003522:	6213      	str	r3, [r2, #32]
 8003524:	4b6a      	ldr	r3, [pc, #424]	; (80036d0 <HAL_RCC_OscConfig+0x4f4>)
 8003526:	6a1b      	ldr	r3, [r3, #32]
 8003528:	4a69      	ldr	r2, [pc, #420]	; (80036d0 <HAL_RCC_OscConfig+0x4f4>)
 800352a:	f043 0301 	orr.w	r3, r3, #1
 800352e:	6213      	str	r3, [r2, #32]
 8003530:	e00b      	b.n	800354a <HAL_RCC_OscConfig+0x36e>
 8003532:	4b67      	ldr	r3, [pc, #412]	; (80036d0 <HAL_RCC_OscConfig+0x4f4>)
 8003534:	6a1b      	ldr	r3, [r3, #32]
 8003536:	4a66      	ldr	r2, [pc, #408]	; (80036d0 <HAL_RCC_OscConfig+0x4f4>)
 8003538:	f023 0301 	bic.w	r3, r3, #1
 800353c:	6213      	str	r3, [r2, #32]
 800353e:	4b64      	ldr	r3, [pc, #400]	; (80036d0 <HAL_RCC_OscConfig+0x4f4>)
 8003540:	6a1b      	ldr	r3, [r3, #32]
 8003542:	4a63      	ldr	r2, [pc, #396]	; (80036d0 <HAL_RCC_OscConfig+0x4f4>)
 8003544:	f023 0304 	bic.w	r3, r3, #4
 8003548:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d015      	beq.n	800357e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003552:	f7fe fc47 	bl	8001de4 <HAL_GetTick>
 8003556:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003558:	e00a      	b.n	8003570 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800355a:	f7fe fc43 	bl	8001de4 <HAL_GetTick>
 800355e:	4602      	mov	r2, r0
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	f241 3288 	movw	r2, #5000	; 0x1388
 8003568:	4293      	cmp	r3, r2
 800356a:	d901      	bls.n	8003570 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800356c:	2303      	movs	r3, #3
 800356e:	e0ab      	b.n	80036c8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003570:	4b57      	ldr	r3, [pc, #348]	; (80036d0 <HAL_RCC_OscConfig+0x4f4>)
 8003572:	6a1b      	ldr	r3, [r3, #32]
 8003574:	f003 0302 	and.w	r3, r3, #2
 8003578:	2b00      	cmp	r3, #0
 800357a:	d0ee      	beq.n	800355a <HAL_RCC_OscConfig+0x37e>
 800357c:	e014      	b.n	80035a8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800357e:	f7fe fc31 	bl	8001de4 <HAL_GetTick>
 8003582:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003584:	e00a      	b.n	800359c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003586:	f7fe fc2d 	bl	8001de4 <HAL_GetTick>
 800358a:	4602      	mov	r2, r0
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	f241 3288 	movw	r2, #5000	; 0x1388
 8003594:	4293      	cmp	r3, r2
 8003596:	d901      	bls.n	800359c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003598:	2303      	movs	r3, #3
 800359a:	e095      	b.n	80036c8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800359c:	4b4c      	ldr	r3, [pc, #304]	; (80036d0 <HAL_RCC_OscConfig+0x4f4>)
 800359e:	6a1b      	ldr	r3, [r3, #32]
 80035a0:	f003 0302 	and.w	r3, r3, #2
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d1ee      	bne.n	8003586 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80035a8:	7dfb      	ldrb	r3, [r7, #23]
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d105      	bne.n	80035ba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035ae:	4b48      	ldr	r3, [pc, #288]	; (80036d0 <HAL_RCC_OscConfig+0x4f4>)
 80035b0:	69db      	ldr	r3, [r3, #28]
 80035b2:	4a47      	ldr	r2, [pc, #284]	; (80036d0 <HAL_RCC_OscConfig+0x4f4>)
 80035b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035b8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	69db      	ldr	r3, [r3, #28]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	f000 8081 	beq.w	80036c6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035c4:	4b42      	ldr	r3, [pc, #264]	; (80036d0 <HAL_RCC_OscConfig+0x4f4>)
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f003 030c 	and.w	r3, r3, #12
 80035cc:	2b08      	cmp	r3, #8
 80035ce:	d061      	beq.n	8003694 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	69db      	ldr	r3, [r3, #28]
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d146      	bne.n	8003666 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035d8:	4b3f      	ldr	r3, [pc, #252]	; (80036d8 <HAL_RCC_OscConfig+0x4fc>)
 80035da:	2200      	movs	r2, #0
 80035dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035de:	f7fe fc01 	bl	8001de4 <HAL_GetTick>
 80035e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035e4:	e008      	b.n	80035f8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035e6:	f7fe fbfd 	bl	8001de4 <HAL_GetTick>
 80035ea:	4602      	mov	r2, r0
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d901      	bls.n	80035f8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	e067      	b.n	80036c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035f8:	4b35      	ldr	r3, [pc, #212]	; (80036d0 <HAL_RCC_OscConfig+0x4f4>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003600:	2b00      	cmp	r3, #0
 8003602:	d1f0      	bne.n	80035e6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6a1b      	ldr	r3, [r3, #32]
 8003608:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800360c:	d108      	bne.n	8003620 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800360e:	4b30      	ldr	r3, [pc, #192]	; (80036d0 <HAL_RCC_OscConfig+0x4f4>)
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	492d      	ldr	r1, [pc, #180]	; (80036d0 <HAL_RCC_OscConfig+0x4f4>)
 800361c:	4313      	orrs	r3, r2
 800361e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003620:	4b2b      	ldr	r3, [pc, #172]	; (80036d0 <HAL_RCC_OscConfig+0x4f4>)
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6a19      	ldr	r1, [r3, #32]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003630:	430b      	orrs	r3, r1
 8003632:	4927      	ldr	r1, [pc, #156]	; (80036d0 <HAL_RCC_OscConfig+0x4f4>)
 8003634:	4313      	orrs	r3, r2
 8003636:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003638:	4b27      	ldr	r3, [pc, #156]	; (80036d8 <HAL_RCC_OscConfig+0x4fc>)
 800363a:	2201      	movs	r2, #1
 800363c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800363e:	f7fe fbd1 	bl	8001de4 <HAL_GetTick>
 8003642:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003644:	e008      	b.n	8003658 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003646:	f7fe fbcd 	bl	8001de4 <HAL_GetTick>
 800364a:	4602      	mov	r2, r0
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	2b02      	cmp	r3, #2
 8003652:	d901      	bls.n	8003658 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003654:	2303      	movs	r3, #3
 8003656:	e037      	b.n	80036c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003658:	4b1d      	ldr	r3, [pc, #116]	; (80036d0 <HAL_RCC_OscConfig+0x4f4>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003660:	2b00      	cmp	r3, #0
 8003662:	d0f0      	beq.n	8003646 <HAL_RCC_OscConfig+0x46a>
 8003664:	e02f      	b.n	80036c6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003666:	4b1c      	ldr	r3, [pc, #112]	; (80036d8 <HAL_RCC_OscConfig+0x4fc>)
 8003668:	2200      	movs	r2, #0
 800366a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800366c:	f7fe fbba 	bl	8001de4 <HAL_GetTick>
 8003670:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003672:	e008      	b.n	8003686 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003674:	f7fe fbb6 	bl	8001de4 <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	2b02      	cmp	r3, #2
 8003680:	d901      	bls.n	8003686 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e020      	b.n	80036c8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003686:	4b12      	ldr	r3, [pc, #72]	; (80036d0 <HAL_RCC_OscConfig+0x4f4>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d1f0      	bne.n	8003674 <HAL_RCC_OscConfig+0x498>
 8003692:	e018      	b.n	80036c6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	69db      	ldr	r3, [r3, #28]
 8003698:	2b01      	cmp	r3, #1
 800369a:	d101      	bne.n	80036a0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e013      	b.n	80036c8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80036a0:	4b0b      	ldr	r3, [pc, #44]	; (80036d0 <HAL_RCC_OscConfig+0x4f4>)
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a1b      	ldr	r3, [r3, #32]
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d106      	bne.n	80036c2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036be:	429a      	cmp	r2, r3
 80036c0:	d001      	beq.n	80036c6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e000      	b.n	80036c8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80036c6:	2300      	movs	r3, #0
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3718      	adds	r7, #24
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	40021000 	.word	0x40021000
 80036d4:	40007000 	.word	0x40007000
 80036d8:	42420060 	.word	0x42420060

080036dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d101      	bne.n	80036f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e0d0      	b.n	8003892 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036f0:	4b6a      	ldr	r3, [pc, #424]	; (800389c <HAL_RCC_ClockConfig+0x1c0>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0307 	and.w	r3, r3, #7
 80036f8:	683a      	ldr	r2, [r7, #0]
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d910      	bls.n	8003720 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036fe:	4b67      	ldr	r3, [pc, #412]	; (800389c <HAL_RCC_ClockConfig+0x1c0>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f023 0207 	bic.w	r2, r3, #7
 8003706:	4965      	ldr	r1, [pc, #404]	; (800389c <HAL_RCC_ClockConfig+0x1c0>)
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	4313      	orrs	r3, r2
 800370c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800370e:	4b63      	ldr	r3, [pc, #396]	; (800389c <HAL_RCC_ClockConfig+0x1c0>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0307 	and.w	r3, r3, #7
 8003716:	683a      	ldr	r2, [r7, #0]
 8003718:	429a      	cmp	r2, r3
 800371a:	d001      	beq.n	8003720 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e0b8      	b.n	8003892 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0302 	and.w	r3, r3, #2
 8003728:	2b00      	cmp	r3, #0
 800372a:	d020      	beq.n	800376e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0304 	and.w	r3, r3, #4
 8003734:	2b00      	cmp	r3, #0
 8003736:	d005      	beq.n	8003744 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003738:	4b59      	ldr	r3, [pc, #356]	; (80038a0 <HAL_RCC_ClockConfig+0x1c4>)
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	4a58      	ldr	r2, [pc, #352]	; (80038a0 <HAL_RCC_ClockConfig+0x1c4>)
 800373e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003742:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0308 	and.w	r3, r3, #8
 800374c:	2b00      	cmp	r3, #0
 800374e:	d005      	beq.n	800375c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003750:	4b53      	ldr	r3, [pc, #332]	; (80038a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	4a52      	ldr	r2, [pc, #328]	; (80038a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003756:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800375a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800375c:	4b50      	ldr	r3, [pc, #320]	; (80038a0 <HAL_RCC_ClockConfig+0x1c4>)
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	494d      	ldr	r1, [pc, #308]	; (80038a0 <HAL_RCC_ClockConfig+0x1c4>)
 800376a:	4313      	orrs	r3, r2
 800376c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0301 	and.w	r3, r3, #1
 8003776:	2b00      	cmp	r3, #0
 8003778:	d040      	beq.n	80037fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	2b01      	cmp	r3, #1
 8003780:	d107      	bne.n	8003792 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003782:	4b47      	ldr	r3, [pc, #284]	; (80038a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d115      	bne.n	80037ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e07f      	b.n	8003892 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	2b02      	cmp	r3, #2
 8003798:	d107      	bne.n	80037aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800379a:	4b41      	ldr	r3, [pc, #260]	; (80038a0 <HAL_RCC_ClockConfig+0x1c4>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d109      	bne.n	80037ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e073      	b.n	8003892 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037aa:	4b3d      	ldr	r3, [pc, #244]	; (80038a0 <HAL_RCC_ClockConfig+0x1c4>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0302 	and.w	r3, r3, #2
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d101      	bne.n	80037ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e06b      	b.n	8003892 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037ba:	4b39      	ldr	r3, [pc, #228]	; (80038a0 <HAL_RCC_ClockConfig+0x1c4>)
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	f023 0203 	bic.w	r2, r3, #3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	4936      	ldr	r1, [pc, #216]	; (80038a0 <HAL_RCC_ClockConfig+0x1c4>)
 80037c8:	4313      	orrs	r3, r2
 80037ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037cc:	f7fe fb0a 	bl	8001de4 <HAL_GetTick>
 80037d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037d2:	e00a      	b.n	80037ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037d4:	f7fe fb06 	bl	8001de4 <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	f241 3288 	movw	r2, #5000	; 0x1388
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d901      	bls.n	80037ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e053      	b.n	8003892 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ea:	4b2d      	ldr	r3, [pc, #180]	; (80038a0 <HAL_RCC_ClockConfig+0x1c4>)
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	f003 020c 	and.w	r2, r3, #12
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d1eb      	bne.n	80037d4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037fc:	4b27      	ldr	r3, [pc, #156]	; (800389c <HAL_RCC_ClockConfig+0x1c0>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0307 	and.w	r3, r3, #7
 8003804:	683a      	ldr	r2, [r7, #0]
 8003806:	429a      	cmp	r2, r3
 8003808:	d210      	bcs.n	800382c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800380a:	4b24      	ldr	r3, [pc, #144]	; (800389c <HAL_RCC_ClockConfig+0x1c0>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f023 0207 	bic.w	r2, r3, #7
 8003812:	4922      	ldr	r1, [pc, #136]	; (800389c <HAL_RCC_ClockConfig+0x1c0>)
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	4313      	orrs	r3, r2
 8003818:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800381a:	4b20      	ldr	r3, [pc, #128]	; (800389c <HAL_RCC_ClockConfig+0x1c0>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0307 	and.w	r3, r3, #7
 8003822:	683a      	ldr	r2, [r7, #0]
 8003824:	429a      	cmp	r2, r3
 8003826:	d001      	beq.n	800382c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e032      	b.n	8003892 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0304 	and.w	r3, r3, #4
 8003834:	2b00      	cmp	r3, #0
 8003836:	d008      	beq.n	800384a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003838:	4b19      	ldr	r3, [pc, #100]	; (80038a0 <HAL_RCC_ClockConfig+0x1c4>)
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	4916      	ldr	r1, [pc, #88]	; (80038a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003846:	4313      	orrs	r3, r2
 8003848:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0308 	and.w	r3, r3, #8
 8003852:	2b00      	cmp	r3, #0
 8003854:	d009      	beq.n	800386a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003856:	4b12      	ldr	r3, [pc, #72]	; (80038a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	691b      	ldr	r3, [r3, #16]
 8003862:	00db      	lsls	r3, r3, #3
 8003864:	490e      	ldr	r1, [pc, #56]	; (80038a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003866:	4313      	orrs	r3, r2
 8003868:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800386a:	f000 f821 	bl	80038b0 <HAL_RCC_GetSysClockFreq>
 800386e:	4602      	mov	r2, r0
 8003870:	4b0b      	ldr	r3, [pc, #44]	; (80038a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	091b      	lsrs	r3, r3, #4
 8003876:	f003 030f 	and.w	r3, r3, #15
 800387a:	490a      	ldr	r1, [pc, #40]	; (80038a4 <HAL_RCC_ClockConfig+0x1c8>)
 800387c:	5ccb      	ldrb	r3, [r1, r3]
 800387e:	fa22 f303 	lsr.w	r3, r2, r3
 8003882:	4a09      	ldr	r2, [pc, #36]	; (80038a8 <HAL_RCC_ClockConfig+0x1cc>)
 8003884:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003886:	4b09      	ldr	r3, [pc, #36]	; (80038ac <HAL_RCC_ClockConfig+0x1d0>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4618      	mov	r0, r3
 800388c:	f7fe fa68 	bl	8001d60 <HAL_InitTick>

  return HAL_OK;
 8003890:	2300      	movs	r3, #0
}
 8003892:	4618      	mov	r0, r3
 8003894:	3710      	adds	r7, #16
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	40022000 	.word	0x40022000
 80038a0:	40021000 	.word	0x40021000
 80038a4:	08006980 	.word	0x08006980
 80038a8:	2000011c 	.word	0x2000011c
 80038ac:	20000120 	.word	0x20000120

080038b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038b0:	b490      	push	{r4, r7}
 80038b2:	b08a      	sub	sp, #40	; 0x28
 80038b4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80038b6:	4b2a      	ldr	r3, [pc, #168]	; (8003960 <HAL_RCC_GetSysClockFreq+0xb0>)
 80038b8:	1d3c      	adds	r4, r7, #4
 80038ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80038bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80038c0:	f240 2301 	movw	r3, #513	; 0x201
 80038c4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80038c6:	2300      	movs	r3, #0
 80038c8:	61fb      	str	r3, [r7, #28]
 80038ca:	2300      	movs	r3, #0
 80038cc:	61bb      	str	r3, [r7, #24]
 80038ce:	2300      	movs	r3, #0
 80038d0:	627b      	str	r3, [r7, #36]	; 0x24
 80038d2:	2300      	movs	r3, #0
 80038d4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80038d6:	2300      	movs	r3, #0
 80038d8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80038da:	4b22      	ldr	r3, [pc, #136]	; (8003964 <HAL_RCC_GetSysClockFreq+0xb4>)
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	f003 030c 	and.w	r3, r3, #12
 80038e6:	2b04      	cmp	r3, #4
 80038e8:	d002      	beq.n	80038f0 <HAL_RCC_GetSysClockFreq+0x40>
 80038ea:	2b08      	cmp	r3, #8
 80038ec:	d003      	beq.n	80038f6 <HAL_RCC_GetSysClockFreq+0x46>
 80038ee:	e02d      	b.n	800394c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80038f0:	4b1d      	ldr	r3, [pc, #116]	; (8003968 <HAL_RCC_GetSysClockFreq+0xb8>)
 80038f2:	623b      	str	r3, [r7, #32]
      break;
 80038f4:	e02d      	b.n	8003952 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	0c9b      	lsrs	r3, r3, #18
 80038fa:	f003 030f 	and.w	r3, r3, #15
 80038fe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003902:	4413      	add	r3, r2
 8003904:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003908:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d013      	beq.n	800393c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003914:	4b13      	ldr	r3, [pc, #76]	; (8003964 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	0c5b      	lsrs	r3, r3, #17
 800391a:	f003 0301 	and.w	r3, r3, #1
 800391e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003922:	4413      	add	r3, r2
 8003924:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003928:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	4a0e      	ldr	r2, [pc, #56]	; (8003968 <HAL_RCC_GetSysClockFreq+0xb8>)
 800392e:	fb02 f203 	mul.w	r2, r2, r3
 8003932:	69bb      	ldr	r3, [r7, #24]
 8003934:	fbb2 f3f3 	udiv	r3, r2, r3
 8003938:	627b      	str	r3, [r7, #36]	; 0x24
 800393a:	e004      	b.n	8003946 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	4a0b      	ldr	r2, [pc, #44]	; (800396c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003940:	fb02 f303 	mul.w	r3, r2, r3
 8003944:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003948:	623b      	str	r3, [r7, #32]
      break;
 800394a:	e002      	b.n	8003952 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800394c:	4b06      	ldr	r3, [pc, #24]	; (8003968 <HAL_RCC_GetSysClockFreq+0xb8>)
 800394e:	623b      	str	r3, [r7, #32]
      break;
 8003950:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003952:	6a3b      	ldr	r3, [r7, #32]
}
 8003954:	4618      	mov	r0, r3
 8003956:	3728      	adds	r7, #40	; 0x28
 8003958:	46bd      	mov	sp, r7
 800395a:	bc90      	pop	{r4, r7}
 800395c:	4770      	bx	lr
 800395e:	bf00      	nop
 8003960:	08005f98 	.word	0x08005f98
 8003964:	40021000 	.word	0x40021000
 8003968:	007a1200 	.word	0x007a1200
 800396c:	003d0900 	.word	0x003d0900

08003970 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003970:	b480      	push	{r7}
 8003972:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003974:	4b02      	ldr	r3, [pc, #8]	; (8003980 <HAL_RCC_GetHCLKFreq+0x10>)
 8003976:	681b      	ldr	r3, [r3, #0]
}
 8003978:	4618      	mov	r0, r3
 800397a:	46bd      	mov	sp, r7
 800397c:	bc80      	pop	{r7}
 800397e:	4770      	bx	lr
 8003980:	2000011c 	.word	0x2000011c

08003984 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003988:	f7ff fff2 	bl	8003970 <HAL_RCC_GetHCLKFreq>
 800398c:	4602      	mov	r2, r0
 800398e:	4b05      	ldr	r3, [pc, #20]	; (80039a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	0a1b      	lsrs	r3, r3, #8
 8003994:	f003 0307 	and.w	r3, r3, #7
 8003998:	4903      	ldr	r1, [pc, #12]	; (80039a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800399a:	5ccb      	ldrb	r3, [r1, r3]
 800399c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	40021000 	.word	0x40021000
 80039a8:	08006990 	.word	0x08006990

080039ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80039b0:	f7ff ffde 	bl	8003970 <HAL_RCC_GetHCLKFreq>
 80039b4:	4602      	mov	r2, r0
 80039b6:	4b05      	ldr	r3, [pc, #20]	; (80039cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	0adb      	lsrs	r3, r3, #11
 80039bc:	f003 0307 	and.w	r3, r3, #7
 80039c0:	4903      	ldr	r1, [pc, #12]	; (80039d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039c2:	5ccb      	ldrb	r3, [r1, r3]
 80039c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	40021000 	.word	0x40021000
 80039d0:	08006990 	.word	0x08006990

080039d4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b085      	sub	sp, #20
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80039dc:	4b0a      	ldr	r3, [pc, #40]	; (8003a08 <RCC_Delay+0x34>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a0a      	ldr	r2, [pc, #40]	; (8003a0c <RCC_Delay+0x38>)
 80039e2:	fba2 2303 	umull	r2, r3, r2, r3
 80039e6:	0a5b      	lsrs	r3, r3, #9
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	fb02 f303 	mul.w	r3, r2, r3
 80039ee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80039f0:	bf00      	nop
  }
  while (Delay --);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	1e5a      	subs	r2, r3, #1
 80039f6:	60fa      	str	r2, [r7, #12]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d1f9      	bne.n	80039f0 <RCC_Delay+0x1c>
}
 80039fc:	bf00      	nop
 80039fe:	bf00      	nop
 8003a00:	3714      	adds	r7, #20
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bc80      	pop	{r7}
 8003a06:	4770      	bx	lr
 8003a08:	2000011c 	.word	0x2000011c
 8003a0c:	10624dd3 	.word	0x10624dd3

08003a10 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b086      	sub	sp, #24
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	613b      	str	r3, [r7, #16]
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0301 	and.w	r3, r3, #1
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d07d      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a30:	4b4f      	ldr	r3, [pc, #316]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a32:	69db      	ldr	r3, [r3, #28]
 8003a34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d10d      	bne.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a3c:	4b4c      	ldr	r3, [pc, #304]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a3e:	69db      	ldr	r3, [r3, #28]
 8003a40:	4a4b      	ldr	r2, [pc, #300]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a46:	61d3      	str	r3, [r2, #28]
 8003a48:	4b49      	ldr	r3, [pc, #292]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a4a:	69db      	ldr	r3, [r3, #28]
 8003a4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a50:	60bb      	str	r3, [r7, #8]
 8003a52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a54:	2301      	movs	r3, #1
 8003a56:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a58:	4b46      	ldr	r3, [pc, #280]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d118      	bne.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a64:	4b43      	ldr	r3, [pc, #268]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a42      	ldr	r2, [pc, #264]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a6e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a70:	f7fe f9b8 	bl	8001de4 <HAL_GetTick>
 8003a74:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a76:	e008      	b.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a78:	f7fe f9b4 	bl	8001de4 <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	2b64      	cmp	r3, #100	; 0x64
 8003a84:	d901      	bls.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e06d      	b.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a8a:	4b3a      	ldr	r3, [pc, #232]	; (8003b74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d0f0      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a96:	4b36      	ldr	r3, [pc, #216]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a98:	6a1b      	ldr	r3, [r3, #32]
 8003a9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a9e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d02e      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003aae:	68fa      	ldr	r2, [r7, #12]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d027      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ab4:	4b2e      	ldr	r3, [pc, #184]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ab6:	6a1b      	ldr	r3, [r3, #32]
 8003ab8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003abc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003abe:	4b2e      	ldr	r3, [pc, #184]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ac4:	4b2c      	ldr	r3, [pc, #176]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003aca:	4a29      	ldr	r2, [pc, #164]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f003 0301 	and.w	r3, r3, #1
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d014      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ada:	f7fe f983 	bl	8001de4 <HAL_GetTick>
 8003ade:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ae0:	e00a      	b.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ae2:	f7fe f97f 	bl	8001de4 <HAL_GetTick>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	f241 3288 	movw	r2, #5000	; 0x1388
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d901      	bls.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	e036      	b.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003af8:	4b1d      	ldr	r3, [pc, #116]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003afa:	6a1b      	ldr	r3, [r3, #32]
 8003afc:	f003 0302 	and.w	r3, r3, #2
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d0ee      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b04:	4b1a      	ldr	r3, [pc, #104]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b06:	6a1b      	ldr	r3, [r3, #32]
 8003b08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	4917      	ldr	r1, [pc, #92]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003b16:	7dfb      	ldrb	r3, [r7, #23]
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d105      	bne.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b1c:	4b14      	ldr	r3, [pc, #80]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b1e:	69db      	ldr	r3, [r3, #28]
 8003b20:	4a13      	ldr	r2, [pc, #76]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b26:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0302 	and.w	r3, r3, #2
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d008      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b34:	4b0e      	ldr	r3, [pc, #56]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	490b      	ldr	r1, [pc, #44]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0310 	and.w	r3, r3, #16
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d008      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b52:	4b07      	ldr	r3, [pc, #28]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	4904      	ldr	r1, [pc, #16]	; (8003b70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b60:	4313      	orrs	r3, r2
 8003b62:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3718      	adds	r7, #24
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	40021000 	.word	0x40021000
 8003b74:	40007000 	.word	0x40007000
 8003b78:	42420440 	.word	0x42420440

08003b7c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003b7c:	b590      	push	{r4, r7, lr}
 8003b7e:	b08d      	sub	sp, #52	; 0x34
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003b84:	4b5a      	ldr	r3, [pc, #360]	; (8003cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8003b86:	f107 040c 	add.w	r4, r7, #12
 8003b8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003b8c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003b90:	f240 2301 	movw	r3, #513	; 0x201
 8003b94:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003b96:	2300      	movs	r3, #0
 8003b98:	627b      	str	r3, [r7, #36]	; 0x24
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	61fb      	str	r3, [r7, #28]
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2b10      	cmp	r3, #16
 8003bae:	d00a      	beq.n	8003bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2b10      	cmp	r3, #16
 8003bb4:	f200 8091 	bhi.w	8003cda <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d04c      	beq.n	8003c58 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d07c      	beq.n	8003cbe <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003bc4:	e089      	b.n	8003cda <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 8003bc6:	4b4b      	ldr	r3, [pc, #300]	; (8003cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003bcc:	4b49      	ldr	r3, [pc, #292]	; (8003cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	f000 8082 	beq.w	8003cde <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	0c9b      	lsrs	r3, r3, #18
 8003bde:	f003 030f 	and.w	r3, r3, #15
 8003be2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003be6:	4413      	add	r3, r2
 8003be8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003bec:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d018      	beq.n	8003c2a <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003bf8:	4b3e      	ldr	r3, [pc, #248]	; (8003cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	0c5b      	lsrs	r3, r3, #17
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003c06:	4413      	add	r3, r2
 8003c08:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003c0c:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d00d      	beq.n	8003c34 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003c18:	4a37      	ldr	r2, [pc, #220]	; (8003cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8003c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c20:	6a3b      	ldr	r3, [r7, #32]
 8003c22:	fb02 f303 	mul.w	r3, r2, r3
 8003c26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c28:	e004      	b.n	8003c34 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003c2a:	6a3b      	ldr	r3, [r7, #32]
 8003c2c:	4a33      	ldr	r2, [pc, #204]	; (8003cfc <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8003c2e:	fb02 f303 	mul.w	r3, r2, r3
 8003c32:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003c34:	4b2f      	ldr	r3, [pc, #188]	; (8003cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c40:	d102      	bne.n	8003c48 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 8003c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c44:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003c46:	e04a      	b.n	8003cde <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 8003c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c4a:	005b      	lsls	r3, r3, #1
 8003c4c:	4a2c      	ldr	r2, [pc, #176]	; (8003d00 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 8003c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c52:	085b      	lsrs	r3, r3, #1
 8003c54:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003c56:	e042      	b.n	8003cde <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8003c58:	4b26      	ldr	r3, [pc, #152]	; (8003cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003c5a:	6a1b      	ldr	r3, [r3, #32]
 8003c5c:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c68:	d108      	bne.n	8003c7c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	f003 0302 	and.w	r3, r3, #2
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d003      	beq.n	8003c7c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8003c74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c78:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c7a:	e01f      	b.n	8003cbc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c86:	d109      	bne.n	8003c9c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8003c88:	4b1a      	ldr	r3, [pc, #104]	; (8003cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8c:	f003 0302 	and.w	r3, r3, #2
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d003      	beq.n	8003c9c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8003c94:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003c98:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c9a:	e00f      	b.n	8003cbc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ca2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ca6:	d11c      	bne.n	8003ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8003ca8:	4b12      	ldr	r3, [pc, #72]	; (8003cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d016      	beq.n	8003ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 8003cb4:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003cb8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003cba:	e012      	b.n	8003ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8003cbc:	e011      	b.n	8003ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003cbe:	f7ff fe75 	bl	80039ac <HAL_RCC_GetPCLK2Freq>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	4b0b      	ldr	r3, [pc, #44]	; (8003cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	0b9b      	lsrs	r3, r3, #14
 8003cca:	f003 0303 	and.w	r3, r3, #3
 8003cce:	3301      	adds	r3, #1
 8003cd0:	005b      	lsls	r3, r3, #1
 8003cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cd6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003cd8:	e004      	b.n	8003ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8003cda:	bf00      	nop
 8003cdc:	e002      	b.n	8003ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8003cde:	bf00      	nop
 8003ce0:	e000      	b.n	8003ce4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8003ce2:	bf00      	nop
    }
  }
  return (frequency);
 8003ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3734      	adds	r7, #52	; 0x34
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd90      	pop	{r4, r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	08005fa8 	.word	0x08005fa8
 8003cf4:	40021000 	.word	0x40021000
 8003cf8:	007a1200 	.word	0x007a1200
 8003cfc:	003d0900 	.word	0x003d0900
 8003d00:	aaaaaaab 	.word	0xaaaaaaab

08003d04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b082      	sub	sp, #8
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d101      	bne.n	8003d16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e076      	b.n	8003e04 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d108      	bne.n	8003d30 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d26:	d009      	beq.n	8003d3c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	61da      	str	r2, [r3, #28]
 8003d2e:	e005      	b.n	8003d3c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d106      	bne.n	8003d5c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f7fd fc8e 	bl	8001678 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2202      	movs	r2, #2
 8003d60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d72:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003d84:	431a      	orrs	r2, r3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d8e:	431a      	orrs	r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	691b      	ldr	r3, [r3, #16]
 8003d94:	f003 0302 	and.w	r3, r3, #2
 8003d98:	431a      	orrs	r2, r3
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	695b      	ldr	r3, [r3, #20]
 8003d9e:	f003 0301 	and.w	r3, r3, #1
 8003da2:	431a      	orrs	r2, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	699b      	ldr	r3, [r3, #24]
 8003da8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dac:	431a      	orrs	r2, r3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	69db      	ldr	r3, [r3, #28]
 8003db2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003db6:	431a      	orrs	r2, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6a1b      	ldr	r3, [r3, #32]
 8003dbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dc0:	ea42 0103 	orr.w	r1, r2, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	430a      	orrs	r2, r1
 8003dd2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	699b      	ldr	r3, [r3, #24]
 8003dd8:	0c1a      	lsrs	r2, r3, #16
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f002 0204 	and.w	r2, r2, #4
 8003de2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	69da      	ldr	r2, [r3, #28]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003df2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003e02:	2300      	movs	r3, #0
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3708      	adds	r7, #8
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b086      	sub	sp, #24
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	60b9      	str	r1, [r7, #8]
 8003e16:	4613      	mov	r3, r2
 8003e18:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d101      	bne.n	8003e2c <HAL_SPI_Transmit_DMA+0x20>
 8003e28:	2302      	movs	r3, #2
 8003e2a:	e09b      	b.n	8003f64 <HAL_SPI_Transmit_DMA+0x158>
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d002      	beq.n	8003e46 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8003e40:	2302      	movs	r3, #2
 8003e42:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003e44:	e089      	b.n	8003f5a <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d002      	beq.n	8003e52 <HAL_SPI_Transmit_DMA+0x46>
 8003e4c:	88fb      	ldrh	r3, [r7, #6]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d102      	bne.n	8003e58 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003e56:	e080      	b.n	8003f5a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2203      	movs	r2, #3
 8003e5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2200      	movs	r2, #0
 8003e64:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	68ba      	ldr	r2, [r7, #8]
 8003e6a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	88fa      	ldrh	r2, [r7, #6]
 8003e70:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	88fa      	ldrh	r2, [r7, #6]
 8003e76:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2200      	movs	r2, #0
 8003e82:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2200      	movs	r2, #0
 8003e88:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2200      	movs	r2, #0
 8003e94:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e9e:	d10f      	bne.n	8003ec0 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003eae:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ebe:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ec4:	4a29      	ldr	r2, [pc, #164]	; (8003f6c <HAL_SPI_Transmit_DMA+0x160>)
 8003ec6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ecc:	4a28      	ldr	r2, [pc, #160]	; (8003f70 <HAL_SPI_Transmit_DMA+0x164>)
 8003ece:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ed4:	4a27      	ldr	r2, [pc, #156]	; (8003f74 <HAL_SPI_Transmit_DMA+0x168>)
 8003ed6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003edc:	2200      	movs	r2, #0
 8003ede:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee8:	4619      	mov	r1, r3
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	330c      	adds	r3, #12
 8003ef0:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ef6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003ef8:	f7fe fd9a 	bl	8002a30 <HAL_DMA_Start_IT>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00c      	beq.n	8003f1c <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f06:	f043 0210 	orr.w	r2, r3, #16
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2201      	movs	r2, #1
 8003f16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8003f1a:	e01e      	b.n	8003f5a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f26:	2b40      	cmp	r3, #64	; 0x40
 8003f28:	d007      	beq.n	8003f3a <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f38:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	685a      	ldr	r2, [r3, #4]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f042 0220 	orr.w	r2, r2, #32
 8003f48:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	685a      	ldr	r2, [r3, #4]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f042 0202 	orr.w	r2, r2, #2
 8003f58:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003f62:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3718      	adds	r7, #24
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	0800420f 	.word	0x0800420f
 8003f70:	08004169 	.word	0x08004169
 8003f74:	0800422b 	.word	0x0800422b

08003f78 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b088      	sub	sp, #32
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	099b      	lsrs	r3, r3, #6
 8003f94:	f003 0301 	and.w	r3, r3, #1
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d10f      	bne.n	8003fbc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003f9c:	69bb      	ldr	r3, [r7, #24]
 8003f9e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00a      	beq.n	8003fbc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	099b      	lsrs	r3, r3, #6
 8003faa:	f003 0301 	and.w	r3, r3, #1
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d004      	beq.n	8003fbc <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	4798      	blx	r3
    return;
 8003fba:	e0be      	b.n	800413a <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	085b      	lsrs	r3, r3, #1
 8003fc0:	f003 0301 	and.w	r3, r3, #1
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d00a      	beq.n	8003fde <HAL_SPI_IRQHandler+0x66>
 8003fc8:	69fb      	ldr	r3, [r7, #28]
 8003fca:	09db      	lsrs	r3, r3, #7
 8003fcc:	f003 0301 	and.w	r3, r3, #1
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d004      	beq.n	8003fde <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	4798      	blx	r3
    return;
 8003fdc:	e0ad      	b.n	800413a <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8003fde:	69bb      	ldr	r3, [r7, #24]
 8003fe0:	095b      	lsrs	r3, r3, #5
 8003fe2:	f003 0301 	and.w	r3, r3, #1
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d106      	bne.n	8003ff8 <HAL_SPI_IRQHandler+0x80>
 8003fea:	69bb      	ldr	r3, [r7, #24]
 8003fec:	099b      	lsrs	r3, r3, #6
 8003fee:	f003 0301 	and.w	r3, r3, #1
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	f000 80a1 	beq.w	800413a <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003ff8:	69fb      	ldr	r3, [r7, #28]
 8003ffa:	095b      	lsrs	r3, r3, #5
 8003ffc:	f003 0301 	and.w	r3, r3, #1
 8004000:	2b00      	cmp	r3, #0
 8004002:	f000 809a 	beq.w	800413a <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	099b      	lsrs	r3, r3, #6
 800400a:	f003 0301 	and.w	r3, r3, #1
 800400e:	2b00      	cmp	r3, #0
 8004010:	d023      	beq.n	800405a <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004018:	b2db      	uxtb	r3, r3
 800401a:	2b03      	cmp	r3, #3
 800401c:	d011      	beq.n	8004042 <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004022:	f043 0204 	orr.w	r2, r3, #4
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800402a:	2300      	movs	r3, #0
 800402c:	617b      	str	r3, [r7, #20]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	617b      	str	r3, [r7, #20]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	617b      	str	r3, [r7, #20]
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	e00b      	b.n	800405a <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004042:	2300      	movs	r3, #0
 8004044:	613b      	str	r3, [r7, #16]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	613b      	str	r3, [r7, #16]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	613b      	str	r3, [r7, #16]
 8004056:	693b      	ldr	r3, [r7, #16]
        return;
 8004058:	e06f      	b.n	800413a <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800405a:	69bb      	ldr	r3, [r7, #24]
 800405c:	095b      	lsrs	r3, r3, #5
 800405e:	f003 0301 	and.w	r3, r3, #1
 8004062:	2b00      	cmp	r3, #0
 8004064:	d014      	beq.n	8004090 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800406a:	f043 0201 	orr.w	r2, r3, #1
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004072:	2300      	movs	r3, #0
 8004074:	60fb      	str	r3, [r7, #12]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	60fb      	str	r3, [r7, #12]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800408c:	601a      	str	r2, [r3, #0]
 800408e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004094:	2b00      	cmp	r3, #0
 8004096:	d04f      	beq.n	8004138 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	685a      	ldr	r2, [r3, #4]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80040a6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	f003 0302 	and.w	r3, r3, #2
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d104      	bne.n	80040c4 <HAL_SPI_IRQHandler+0x14c>
 80040ba:	69fb      	ldr	r3, [r7, #28]
 80040bc:	f003 0301 	and.w	r3, r3, #1
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d034      	beq.n	800412e <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	685a      	ldr	r2, [r3, #4]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f022 0203 	bic.w	r2, r2, #3
 80040d2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d011      	beq.n	8004100 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040e0:	4a17      	ldr	r2, [pc, #92]	; (8004140 <HAL_SPI_IRQHandler+0x1c8>)
 80040e2:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040e8:	4618      	mov	r0, r3
 80040ea:	f7fe fd01 	bl	8002af0 <HAL_DMA_Abort_IT>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d005      	beq.n	8004100 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040f8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004104:	2b00      	cmp	r3, #0
 8004106:	d016      	beq.n	8004136 <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800410c:	4a0c      	ldr	r2, [pc, #48]	; (8004140 <HAL_SPI_IRQHandler+0x1c8>)
 800410e:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004114:	4618      	mov	r0, r3
 8004116:	f7fe fceb 	bl	8002af0 <HAL_DMA_Abort_IT>
 800411a:	4603      	mov	r3, r0
 800411c:	2b00      	cmp	r3, #0
 800411e:	d00a      	beq.n	8004136 <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004124:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800412c:	e003      	b.n	8004136 <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f000 f811 	bl	8004156 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004134:	e000      	b.n	8004138 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 8004136:	bf00      	nop
    return;
 8004138:	bf00      	nop
  }
}
 800413a:	3720      	adds	r7, #32
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}
 8004140:	0800426b 	.word	0x0800426b

08004144 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800414c:	bf00      	nop
 800414e:	370c      	adds	r7, #12
 8004150:	46bd      	mov	sp, r7
 8004152:	bc80      	pop	{r7}
 8004154:	4770      	bx	lr

08004156 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004156:	b480      	push	{r7}
 8004158:	b083      	sub	sp, #12
 800415a:	af00      	add	r7, sp, #0
 800415c:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800415e:	bf00      	nop
 8004160:	370c      	adds	r7, #12
 8004162:	46bd      	mov	sp, r7
 8004164:	bc80      	pop	{r7}
 8004166:	4770      	bx	lr

08004168 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b086      	sub	sp, #24
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004174:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004176:	f7fd fe35 	bl	8001de4 <HAL_GetTick>
 800417a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0320 	and.w	r3, r3, #32
 8004186:	2b20      	cmp	r3, #32
 8004188:	d03b      	beq.n	8004202 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	685a      	ldr	r2, [r3, #4]
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f022 0220 	bic.w	r2, r2, #32
 8004198:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	685a      	ldr	r2, [r3, #4]
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f022 0202 	bic.w	r2, r2, #2
 80041a8:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80041aa:	693a      	ldr	r2, [r7, #16]
 80041ac:	2164      	movs	r1, #100	; 0x64
 80041ae:	6978      	ldr	r0, [r7, #20]
 80041b0:	f000 f8f8 	bl	80043a4 <SPI_EndRxTxTransaction>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d005      	beq.n	80041c6 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041be:	f043 0220 	orr.w	r2, r3, #32
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d10a      	bne.n	80041e4 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80041ce:	2300      	movs	r3, #0
 80041d0:	60fb      	str	r3, [r7, #12]
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	60fb      	str	r3, [r7, #12]
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	60fb      	str	r3, [r7, #12]
 80041e2:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	2200      	movs	r2, #0
 80041e8:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	2201      	movs	r2, #1
 80041ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d003      	beq.n	8004202 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80041fa:	6978      	ldr	r0, [r7, #20]
 80041fc:	f7ff ffab 	bl	8004156 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004200:	e002      	b.n	8004208 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8004202:	6978      	ldr	r0, [r7, #20]
 8004204:	f7fc fdc4 	bl	8000d90 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004208:	3718      	adds	r7, #24
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}

0800420e <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800420e:	b580      	push	{r7, lr}
 8004210:	b084      	sub	sp, #16
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421a:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800421c:	68f8      	ldr	r0, [r7, #12]
 800421e:	f7ff ff91 	bl	8004144 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004222:	bf00      	nop
 8004224:	3710      	adds	r7, #16
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}

0800422a <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800422a:	b580      	push	{r7, lr}
 800422c:	b084      	sub	sp, #16
 800422e:	af00      	add	r7, sp, #0
 8004230:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004236:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	685a      	ldr	r2, [r3, #4]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f022 0203 	bic.w	r2, r2, #3
 8004246:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800424c:	f043 0210 	orr.w	r2, r3, #16
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800425c:	68f8      	ldr	r0, [r7, #12]
 800425e:	f7ff ff7a 	bl	8004156 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004262:	bf00      	nop
 8004264:	3710      	adds	r7, #16
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}

0800426a <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800426a:	b580      	push	{r7, lr}
 800426c:	b084      	sub	sp, #16
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004276:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2200      	movs	r2, #0
 800427c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2200      	movs	r2, #0
 8004282:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004284:	68f8      	ldr	r0, [r7, #12]
 8004286:	f7ff ff66 	bl	8004156 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800428a:	bf00      	nop
 800428c:	3710      	adds	r7, #16
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
	...

08004294 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b088      	sub	sp, #32
 8004298:	af00      	add	r7, sp, #0
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	60b9      	str	r1, [r7, #8]
 800429e:	603b      	str	r3, [r7, #0]
 80042a0:	4613      	mov	r3, r2
 80042a2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80042a4:	f7fd fd9e 	bl	8001de4 <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ac:	1a9b      	subs	r3, r3, r2
 80042ae:	683a      	ldr	r2, [r7, #0]
 80042b0:	4413      	add	r3, r2
 80042b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80042b4:	f7fd fd96 	bl	8001de4 <HAL_GetTick>
 80042b8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80042ba:	4b39      	ldr	r3, [pc, #228]	; (80043a0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	015b      	lsls	r3, r3, #5
 80042c0:	0d1b      	lsrs	r3, r3, #20
 80042c2:	69fa      	ldr	r2, [r7, #28]
 80042c4:	fb02 f303 	mul.w	r3, r2, r3
 80042c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042ca:	e054      	b.n	8004376 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042d2:	d050      	beq.n	8004376 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80042d4:	f7fd fd86 	bl	8001de4 <HAL_GetTick>
 80042d8:	4602      	mov	r2, r0
 80042da:	69bb      	ldr	r3, [r7, #24]
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	69fa      	ldr	r2, [r7, #28]
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d902      	bls.n	80042ea <SPI_WaitFlagStateUntilTimeout+0x56>
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d13d      	bne.n	8004366 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	685a      	ldr	r2, [r3, #4]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80042f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004302:	d111      	bne.n	8004328 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800430c:	d004      	beq.n	8004318 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004316:	d107      	bne.n	8004328 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004326:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800432c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004330:	d10f      	bne.n	8004352 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004340:	601a      	str	r2, [r3, #0]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004350:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2201      	movs	r2, #1
 8004356:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2200      	movs	r2, #0
 800435e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004362:	2303      	movs	r3, #3
 8004364:	e017      	b.n	8004396 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d101      	bne.n	8004370 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800436c:	2300      	movs	r3, #0
 800436e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	3b01      	subs	r3, #1
 8004374:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	689a      	ldr	r2, [r3, #8]
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	4013      	ands	r3, r2
 8004380:	68ba      	ldr	r2, [r7, #8]
 8004382:	429a      	cmp	r2, r3
 8004384:	bf0c      	ite	eq
 8004386:	2301      	moveq	r3, #1
 8004388:	2300      	movne	r3, #0
 800438a:	b2db      	uxtb	r3, r3
 800438c:	461a      	mov	r2, r3
 800438e:	79fb      	ldrb	r3, [r7, #7]
 8004390:	429a      	cmp	r2, r3
 8004392:	d19b      	bne.n	80042cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004394:	2300      	movs	r3, #0
}
 8004396:	4618      	mov	r0, r3
 8004398:	3720      	adds	r7, #32
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	2000011c 	.word	0x2000011c

080043a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b086      	sub	sp, #24
 80043a8:	af02      	add	r7, sp, #8
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	60b9      	str	r1, [r7, #8]
 80043ae:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	9300      	str	r3, [sp, #0]
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	2200      	movs	r2, #0
 80043b8:	2180      	movs	r1, #128	; 0x80
 80043ba:	68f8      	ldr	r0, [r7, #12]
 80043bc:	f7ff ff6a 	bl	8004294 <SPI_WaitFlagStateUntilTimeout>
 80043c0:	4603      	mov	r3, r0
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d007      	beq.n	80043d6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ca:	f043 0220 	orr.w	r2, r3, #32
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	e000      	b.n	80043d8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80043d6:	2300      	movs	r3, #0
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3710      	adds	r7, #16
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}

080043e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b082      	sub	sp, #8
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d101      	bne.n	80043f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e041      	b.n	8004476 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d106      	bne.n	800440c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f7fd f9b4 	bl	8001774 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2202      	movs	r2, #2
 8004410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	3304      	adds	r3, #4
 800441c:	4619      	mov	r1, r3
 800441e:	4610      	mov	r0, r2
 8004420:	f000 fb68 	bl	8004af4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2201      	movs	r2, #1
 8004458:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004474:	2300      	movs	r3, #0
}
 8004476:	4618      	mov	r0, r3
 8004478:	3708      	adds	r7, #8
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
	...

08004480 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004480:	b480      	push	{r7}
 8004482:	b085      	sub	sp, #20
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800448e:	b2db      	uxtb	r3, r3
 8004490:	2b01      	cmp	r3, #1
 8004492:	d001      	beq.n	8004498 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e032      	b.n	80044fe <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2202      	movs	r2, #2
 800449c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a18      	ldr	r2, [pc, #96]	; (8004508 <HAL_TIM_Base_Start+0x88>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d00e      	beq.n	80044c8 <HAL_TIM_Base_Start+0x48>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044b2:	d009      	beq.n	80044c8 <HAL_TIM_Base_Start+0x48>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a14      	ldr	r2, [pc, #80]	; (800450c <HAL_TIM_Base_Start+0x8c>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d004      	beq.n	80044c8 <HAL_TIM_Base_Start+0x48>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a13      	ldr	r2, [pc, #76]	; (8004510 <HAL_TIM_Base_Start+0x90>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d111      	bne.n	80044ec <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	f003 0307 	and.w	r3, r3, #7
 80044d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2b06      	cmp	r3, #6
 80044d8:	d010      	beq.n	80044fc <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f042 0201 	orr.w	r2, r2, #1
 80044e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044ea:	e007      	b.n	80044fc <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f042 0201 	orr.w	r2, r2, #1
 80044fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3714      	adds	r7, #20
 8004502:	46bd      	mov	sp, r7
 8004504:	bc80      	pop	{r7}
 8004506:	4770      	bx	lr
 8004508:	40012c00 	.word	0x40012c00
 800450c:	40000400 	.word	0x40000400
 8004510:	40000800 	.word	0x40000800

08004514 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	6a1a      	ldr	r2, [r3, #32]
 8004522:	f241 1311 	movw	r3, #4369	; 0x1111
 8004526:	4013      	ands	r3, r2
 8004528:	2b00      	cmp	r3, #0
 800452a:	d10f      	bne.n	800454c <HAL_TIM_Base_Stop+0x38>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	6a1a      	ldr	r2, [r3, #32]
 8004532:	f240 4344 	movw	r3, #1092	; 0x444
 8004536:	4013      	ands	r3, r2
 8004538:	2b00      	cmp	r3, #0
 800453a:	d107      	bne.n	800454c <HAL_TIM_Base_Stop+0x38>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f022 0201 	bic.w	r2, r2, #1
 800454a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2201      	movs	r2, #1
 8004550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004554:	2300      	movs	r3, #0
}
 8004556:	4618      	mov	r0, r3
 8004558:	370c      	adds	r7, #12
 800455a:	46bd      	mov	sp, r7
 800455c:	bc80      	pop	{r7}
 800455e:	4770      	bx	lr

08004560 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004560:	b480      	push	{r7}
 8004562:	b085      	sub	sp, #20
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800456e:	b2db      	uxtb	r3, r3
 8004570:	2b01      	cmp	r3, #1
 8004572:	d001      	beq.n	8004578 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e03a      	b.n	80045ee <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2202      	movs	r2, #2
 800457c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	68da      	ldr	r2, [r3, #12]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f042 0201 	orr.w	r2, r2, #1
 800458e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a18      	ldr	r2, [pc, #96]	; (80045f8 <HAL_TIM_Base_Start_IT+0x98>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d00e      	beq.n	80045b8 <HAL_TIM_Base_Start_IT+0x58>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045a2:	d009      	beq.n	80045b8 <HAL_TIM_Base_Start_IT+0x58>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a14      	ldr	r2, [pc, #80]	; (80045fc <HAL_TIM_Base_Start_IT+0x9c>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d004      	beq.n	80045b8 <HAL_TIM_Base_Start_IT+0x58>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a13      	ldr	r2, [pc, #76]	; (8004600 <HAL_TIM_Base_Start_IT+0xa0>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d111      	bne.n	80045dc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	f003 0307 	and.w	r3, r3, #7
 80045c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2b06      	cmp	r3, #6
 80045c8:	d010      	beq.n	80045ec <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f042 0201 	orr.w	r2, r2, #1
 80045d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045da:	e007      	b.n	80045ec <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f042 0201 	orr.w	r2, r2, #1
 80045ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80045ec:	2300      	movs	r3, #0
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3714      	adds	r7, #20
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bc80      	pop	{r7}
 80045f6:	4770      	bx	lr
 80045f8:	40012c00 	.word	0x40012c00
 80045fc:	40000400 	.word	0x40000400
 8004600:	40000800 	.word	0x40000800

08004604 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	68da      	ldr	r2, [r3, #12]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f022 0201 	bic.w	r2, r2, #1
 800461a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	6a1a      	ldr	r2, [r3, #32]
 8004622:	f241 1311 	movw	r3, #4369	; 0x1111
 8004626:	4013      	ands	r3, r2
 8004628:	2b00      	cmp	r3, #0
 800462a:	d10f      	bne.n	800464c <HAL_TIM_Base_Stop_IT+0x48>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	6a1a      	ldr	r2, [r3, #32]
 8004632:	f240 4344 	movw	r3, #1092	; 0x444
 8004636:	4013      	ands	r3, r2
 8004638:	2b00      	cmp	r3, #0
 800463a:	d107      	bne.n	800464c <HAL_TIM_Base_Stop_IT+0x48>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f022 0201 	bic.w	r2, r2, #1
 800464a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004654:	2300      	movs	r3, #0
}
 8004656:	4618      	mov	r0, r3
 8004658:	370c      	adds	r7, #12
 800465a:	46bd      	mov	sp, r7
 800465c:	bc80      	pop	{r7}
 800465e:	4770      	bx	lr

08004660 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b082      	sub	sp, #8
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d101      	bne.n	8004674 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	e041      	b.n	80046f8 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800467a:	b2db      	uxtb	r3, r3
 800467c:	2b00      	cmp	r3, #0
 800467e:	d106      	bne.n	800468e <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2200      	movs	r2, #0
 8004684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f000 f839 	bl	8004700 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2202      	movs	r2, #2
 8004692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	3304      	adds	r3, #4
 800469e:	4619      	mov	r1, r3
 80046a0:	4610      	mov	r0, r2
 80046a2:	f000 fa27 	bl	8004af4 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f022 0208 	bic.w	r2, r2, #8
 80046b4:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	6819      	ldr	r1, [r3, #0]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	683a      	ldr	r2, [r7, #0]
 80046c2:	430a      	orrs	r2, r1
 80046c4:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2201      	movs	r2, #1
 80046ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2201      	movs	r2, #1
 80046d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2201      	movs	r2, #1
 80046da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2201      	movs	r2, #1
 80046e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2201      	movs	r2, #1
 80046ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2201      	movs	r2, #1
 80046f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046f6:	2300      	movs	r3, #0
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3708      	adds	r7, #8
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}

08004700 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8004700:	b480      	push	{r7}
 8004702:	b083      	sub	sp, #12
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8004708:	bf00      	nop
 800470a:	370c      	adds	r7, #12
 800470c:	46bd      	mov	sp, r7
 800470e:	bc80      	pop	{r7}
 8004710:	4770      	bx	lr

08004712 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004712:	b580      	push	{r7, lr}
 8004714:	b082      	sub	sp, #8
 8004716:	af00      	add	r7, sp, #0
 8004718:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	691b      	ldr	r3, [r3, #16]
 8004720:	f003 0302 	and.w	r3, r3, #2
 8004724:	2b02      	cmp	r3, #2
 8004726:	d122      	bne.n	800476e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	f003 0302 	and.w	r3, r3, #2
 8004732:	2b02      	cmp	r3, #2
 8004734:	d11b      	bne.n	800476e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f06f 0202 	mvn.w	r2, #2
 800473e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	699b      	ldr	r3, [r3, #24]
 800474c:	f003 0303 	and.w	r3, r3, #3
 8004750:	2b00      	cmp	r3, #0
 8004752:	d003      	beq.n	800475c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f000 f9b1 	bl	8004abc <HAL_TIM_IC_CaptureCallback>
 800475a:	e005      	b.n	8004768 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f000 f9a4 	bl	8004aaa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f000 f9b3 	bl	8004ace <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	691b      	ldr	r3, [r3, #16]
 8004774:	f003 0304 	and.w	r3, r3, #4
 8004778:	2b04      	cmp	r3, #4
 800477a:	d122      	bne.n	80047c2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	f003 0304 	and.w	r3, r3, #4
 8004786:	2b04      	cmp	r3, #4
 8004788:	d11b      	bne.n	80047c2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f06f 0204 	mvn.w	r2, #4
 8004792:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2202      	movs	r2, #2
 8004798:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	699b      	ldr	r3, [r3, #24]
 80047a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d003      	beq.n	80047b0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f000 f987 	bl	8004abc <HAL_TIM_IC_CaptureCallback>
 80047ae:	e005      	b.n	80047bc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f000 f97a 	bl	8004aaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f000 f989 	bl	8004ace <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	691b      	ldr	r3, [r3, #16]
 80047c8:	f003 0308 	and.w	r3, r3, #8
 80047cc:	2b08      	cmp	r3, #8
 80047ce:	d122      	bne.n	8004816 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	68db      	ldr	r3, [r3, #12]
 80047d6:	f003 0308 	and.w	r3, r3, #8
 80047da:	2b08      	cmp	r3, #8
 80047dc:	d11b      	bne.n	8004816 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f06f 0208 	mvn.w	r2, #8
 80047e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2204      	movs	r2, #4
 80047ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	69db      	ldr	r3, [r3, #28]
 80047f4:	f003 0303 	and.w	r3, r3, #3
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d003      	beq.n	8004804 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f000 f95d 	bl	8004abc <HAL_TIM_IC_CaptureCallback>
 8004802:	e005      	b.n	8004810 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f000 f950 	bl	8004aaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f000 f95f 	bl	8004ace <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	691b      	ldr	r3, [r3, #16]
 800481c:	f003 0310 	and.w	r3, r3, #16
 8004820:	2b10      	cmp	r3, #16
 8004822:	d122      	bne.n	800486a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	68db      	ldr	r3, [r3, #12]
 800482a:	f003 0310 	and.w	r3, r3, #16
 800482e:	2b10      	cmp	r3, #16
 8004830:	d11b      	bne.n	800486a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f06f 0210 	mvn.w	r2, #16
 800483a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2208      	movs	r2, #8
 8004840:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	69db      	ldr	r3, [r3, #28]
 8004848:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800484c:	2b00      	cmp	r3, #0
 800484e:	d003      	beq.n	8004858 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f000 f933 	bl	8004abc <HAL_TIM_IC_CaptureCallback>
 8004856:	e005      	b.n	8004864 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f000 f926 	bl	8004aaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f000 f935 	bl	8004ace <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	691b      	ldr	r3, [r3, #16]
 8004870:	f003 0301 	and.w	r3, r3, #1
 8004874:	2b01      	cmp	r3, #1
 8004876:	d10e      	bne.n	8004896 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	f003 0301 	and.w	r3, r3, #1
 8004882:	2b01      	cmp	r3, #1
 8004884:	d107      	bne.n	8004896 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f06f 0201 	mvn.w	r2, #1
 800488e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f7fc facf 	bl	8000e34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	691b      	ldr	r3, [r3, #16]
 800489c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048a0:	2b80      	cmp	r3, #128	; 0x80
 80048a2:	d10e      	bne.n	80048c2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	68db      	ldr	r3, [r3, #12]
 80048aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048ae:	2b80      	cmp	r3, #128	; 0x80
 80048b0:	d107      	bne.n	80048c2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80048ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f000 fa78 	bl	8004db2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	691b      	ldr	r3, [r3, #16]
 80048c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048cc:	2b40      	cmp	r3, #64	; 0x40
 80048ce:	d10e      	bne.n	80048ee <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	68db      	ldr	r3, [r3, #12]
 80048d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048da:	2b40      	cmp	r3, #64	; 0x40
 80048dc:	d107      	bne.n	80048ee <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80048e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f000 f8f9 	bl	8004ae0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	691b      	ldr	r3, [r3, #16]
 80048f4:	f003 0320 	and.w	r3, r3, #32
 80048f8:	2b20      	cmp	r3, #32
 80048fa:	d10e      	bne.n	800491a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	68db      	ldr	r3, [r3, #12]
 8004902:	f003 0320 	and.w	r3, r3, #32
 8004906:	2b20      	cmp	r3, #32
 8004908:	d107      	bne.n	800491a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f06f 0220 	mvn.w	r2, #32
 8004912:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f000 fa43 	bl	8004da0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800491a:	bf00      	nop
 800491c:	3708      	adds	r7, #8
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}

08004922 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004922:	b580      	push	{r7, lr}
 8004924:	b084      	sub	sp, #16
 8004926:	af00      	add	r7, sp, #0
 8004928:	6078      	str	r0, [r7, #4]
 800492a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004932:	2b01      	cmp	r3, #1
 8004934:	d101      	bne.n	800493a <HAL_TIM_ConfigClockSource+0x18>
 8004936:	2302      	movs	r3, #2
 8004938:	e0b3      	b.n	8004aa2 <HAL_TIM_ConfigClockSource+0x180>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2201      	movs	r2, #1
 800493e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2202      	movs	r2, #2
 8004946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004958:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004960:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	68fa      	ldr	r2, [r7, #12]
 8004968:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004972:	d03e      	beq.n	80049f2 <HAL_TIM_ConfigClockSource+0xd0>
 8004974:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004978:	f200 8087 	bhi.w	8004a8a <HAL_TIM_ConfigClockSource+0x168>
 800497c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004980:	f000 8085 	beq.w	8004a8e <HAL_TIM_ConfigClockSource+0x16c>
 8004984:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004988:	d87f      	bhi.n	8004a8a <HAL_TIM_ConfigClockSource+0x168>
 800498a:	2b70      	cmp	r3, #112	; 0x70
 800498c:	d01a      	beq.n	80049c4 <HAL_TIM_ConfigClockSource+0xa2>
 800498e:	2b70      	cmp	r3, #112	; 0x70
 8004990:	d87b      	bhi.n	8004a8a <HAL_TIM_ConfigClockSource+0x168>
 8004992:	2b60      	cmp	r3, #96	; 0x60
 8004994:	d050      	beq.n	8004a38 <HAL_TIM_ConfigClockSource+0x116>
 8004996:	2b60      	cmp	r3, #96	; 0x60
 8004998:	d877      	bhi.n	8004a8a <HAL_TIM_ConfigClockSource+0x168>
 800499a:	2b50      	cmp	r3, #80	; 0x50
 800499c:	d03c      	beq.n	8004a18 <HAL_TIM_ConfigClockSource+0xf6>
 800499e:	2b50      	cmp	r3, #80	; 0x50
 80049a0:	d873      	bhi.n	8004a8a <HAL_TIM_ConfigClockSource+0x168>
 80049a2:	2b40      	cmp	r3, #64	; 0x40
 80049a4:	d058      	beq.n	8004a58 <HAL_TIM_ConfigClockSource+0x136>
 80049a6:	2b40      	cmp	r3, #64	; 0x40
 80049a8:	d86f      	bhi.n	8004a8a <HAL_TIM_ConfigClockSource+0x168>
 80049aa:	2b30      	cmp	r3, #48	; 0x30
 80049ac:	d064      	beq.n	8004a78 <HAL_TIM_ConfigClockSource+0x156>
 80049ae:	2b30      	cmp	r3, #48	; 0x30
 80049b0:	d86b      	bhi.n	8004a8a <HAL_TIM_ConfigClockSource+0x168>
 80049b2:	2b20      	cmp	r3, #32
 80049b4:	d060      	beq.n	8004a78 <HAL_TIM_ConfigClockSource+0x156>
 80049b6:	2b20      	cmp	r3, #32
 80049b8:	d867      	bhi.n	8004a8a <HAL_TIM_ConfigClockSource+0x168>
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d05c      	beq.n	8004a78 <HAL_TIM_ConfigClockSource+0x156>
 80049be:	2b10      	cmp	r3, #16
 80049c0:	d05a      	beq.n	8004a78 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80049c2:	e062      	b.n	8004a8a <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6818      	ldr	r0, [r3, #0]
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	6899      	ldr	r1, [r3, #8]
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	685a      	ldr	r2, [r3, #4]
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	f000 f967 	bl	8004ca6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80049e6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	68fa      	ldr	r2, [r7, #12]
 80049ee:	609a      	str	r2, [r3, #8]
      break;
 80049f0:	e04e      	b.n	8004a90 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6818      	ldr	r0, [r3, #0]
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	6899      	ldr	r1, [r3, #8]
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	685a      	ldr	r2, [r3, #4]
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	f000 f950 	bl	8004ca6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	689a      	ldr	r2, [r3, #8]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a14:	609a      	str	r2, [r3, #8]
      break;
 8004a16:	e03b      	b.n	8004a90 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6818      	ldr	r0, [r3, #0]
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	6859      	ldr	r1, [r3, #4]
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	461a      	mov	r2, r3
 8004a26:	f000 f8c7 	bl	8004bb8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	2150      	movs	r1, #80	; 0x50
 8004a30:	4618      	mov	r0, r3
 8004a32:	f000 f91e 	bl	8004c72 <TIM_ITRx_SetConfig>
      break;
 8004a36:	e02b      	b.n	8004a90 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6818      	ldr	r0, [r3, #0]
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	6859      	ldr	r1, [r3, #4]
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	461a      	mov	r2, r3
 8004a46:	f000 f8e5 	bl	8004c14 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	2160      	movs	r1, #96	; 0x60
 8004a50:	4618      	mov	r0, r3
 8004a52:	f000 f90e 	bl	8004c72 <TIM_ITRx_SetConfig>
      break;
 8004a56:	e01b      	b.n	8004a90 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6818      	ldr	r0, [r3, #0]
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	6859      	ldr	r1, [r3, #4]
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	461a      	mov	r2, r3
 8004a66:	f000 f8a7 	bl	8004bb8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	2140      	movs	r1, #64	; 0x40
 8004a70:	4618      	mov	r0, r3
 8004a72:	f000 f8fe 	bl	8004c72 <TIM_ITRx_SetConfig>
      break;
 8004a76:	e00b      	b.n	8004a90 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4619      	mov	r1, r3
 8004a82:	4610      	mov	r0, r2
 8004a84:	f000 f8f5 	bl	8004c72 <TIM_ITRx_SetConfig>
        break;
 8004a88:	e002      	b.n	8004a90 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004a8a:	bf00      	nop
 8004a8c:	e000      	b.n	8004a90 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004a8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004aa0:	2300      	movs	r3, #0
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3710      	adds	r7, #16
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}

08004aaa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004aaa:	b480      	push	{r7}
 8004aac:	b083      	sub	sp, #12
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ab2:	bf00      	nop
 8004ab4:	370c      	adds	r7, #12
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bc80      	pop	{r7}
 8004aba:	4770      	bx	lr

08004abc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b083      	sub	sp, #12
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ac4:	bf00      	nop
 8004ac6:	370c      	adds	r7, #12
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bc80      	pop	{r7}
 8004acc:	4770      	bx	lr

08004ace <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ace:	b480      	push	{r7}
 8004ad0:	b083      	sub	sp, #12
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ad6:	bf00      	nop
 8004ad8:	370c      	adds	r7, #12
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bc80      	pop	{r7}
 8004ade:	4770      	bx	lr

08004ae0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b083      	sub	sp, #12
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ae8:	bf00      	nop
 8004aea:	370c      	adds	r7, #12
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bc80      	pop	{r7}
 8004af0:	4770      	bx	lr
	...

08004af4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b085      	sub	sp, #20
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	4a29      	ldr	r2, [pc, #164]	; (8004bac <TIM_Base_SetConfig+0xb8>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d00b      	beq.n	8004b24 <TIM_Base_SetConfig+0x30>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b12:	d007      	beq.n	8004b24 <TIM_Base_SetConfig+0x30>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	4a26      	ldr	r2, [pc, #152]	; (8004bb0 <TIM_Base_SetConfig+0xbc>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d003      	beq.n	8004b24 <TIM_Base_SetConfig+0x30>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	4a25      	ldr	r2, [pc, #148]	; (8004bb4 <TIM_Base_SetConfig+0xc0>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d108      	bne.n	8004b36 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	68fa      	ldr	r2, [r7, #12]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4a1c      	ldr	r2, [pc, #112]	; (8004bac <TIM_Base_SetConfig+0xb8>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d00b      	beq.n	8004b56 <TIM_Base_SetConfig+0x62>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b44:	d007      	beq.n	8004b56 <TIM_Base_SetConfig+0x62>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a19      	ldr	r2, [pc, #100]	; (8004bb0 <TIM_Base_SetConfig+0xbc>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d003      	beq.n	8004b56 <TIM_Base_SetConfig+0x62>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4a18      	ldr	r2, [pc, #96]	; (8004bb4 <TIM_Base_SetConfig+0xc0>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d108      	bne.n	8004b68 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	68fa      	ldr	r2, [r7, #12]
 8004b64:	4313      	orrs	r3, r2
 8004b66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	695b      	ldr	r3, [r3, #20]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	68fa      	ldr	r2, [r7, #12]
 8004b7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	689a      	ldr	r2, [r3, #8]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	4a07      	ldr	r2, [pc, #28]	; (8004bac <TIM_Base_SetConfig+0xb8>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d103      	bne.n	8004b9c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	691a      	ldr	r2, [r3, #16]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	615a      	str	r2, [r3, #20]
}
 8004ba2:	bf00      	nop
 8004ba4:	3714      	adds	r7, #20
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bc80      	pop	{r7}
 8004baa:	4770      	bx	lr
 8004bac:	40012c00 	.word	0x40012c00
 8004bb0:	40000400 	.word	0x40000400
 8004bb4:	40000800 	.word	0x40000800

08004bb8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b087      	sub	sp, #28
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	60f8      	str	r0, [r7, #12]
 8004bc0:	60b9      	str	r1, [r7, #8]
 8004bc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	6a1b      	ldr	r3, [r3, #32]
 8004bc8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	6a1b      	ldr	r3, [r3, #32]
 8004bce:	f023 0201 	bic.w	r2, r3, #1
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	699b      	ldr	r3, [r3, #24]
 8004bda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004be2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	011b      	lsls	r3, r3, #4
 8004be8:	693a      	ldr	r2, [r7, #16]
 8004bea:	4313      	orrs	r3, r2
 8004bec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	f023 030a 	bic.w	r3, r3, #10
 8004bf4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004bf6:	697a      	ldr	r2, [r7, #20]
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	693a      	ldr	r2, [r7, #16]
 8004c02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	697a      	ldr	r2, [r7, #20]
 8004c08:	621a      	str	r2, [r3, #32]
}
 8004c0a:	bf00      	nop
 8004c0c:	371c      	adds	r7, #28
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bc80      	pop	{r7}
 8004c12:	4770      	bx	lr

08004c14 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b087      	sub	sp, #28
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	60f8      	str	r0, [r7, #12]
 8004c1c:	60b9      	str	r1, [r7, #8]
 8004c1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	6a1b      	ldr	r3, [r3, #32]
 8004c24:	f023 0210 	bic.w	r2, r3, #16
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	699b      	ldr	r3, [r3, #24]
 8004c30:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	6a1b      	ldr	r3, [r3, #32]
 8004c36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c3e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	031b      	lsls	r3, r3, #12
 8004c44:	697a      	ldr	r2, [r7, #20]
 8004c46:	4313      	orrs	r3, r2
 8004c48:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004c50:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	011b      	lsls	r3, r3, #4
 8004c56:	693a      	ldr	r2, [r7, #16]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	697a      	ldr	r2, [r7, #20]
 8004c60:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	693a      	ldr	r2, [r7, #16]
 8004c66:	621a      	str	r2, [r3, #32]
}
 8004c68:	bf00      	nop
 8004c6a:	371c      	adds	r7, #28
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bc80      	pop	{r7}
 8004c70:	4770      	bx	lr

08004c72 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c72:	b480      	push	{r7}
 8004c74:	b085      	sub	sp, #20
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	6078      	str	r0, [r7, #4]
 8004c7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c88:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c8a:	683a      	ldr	r2, [r7, #0]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	f043 0307 	orr.w	r3, r3, #7
 8004c94:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	68fa      	ldr	r2, [r7, #12]
 8004c9a:	609a      	str	r2, [r3, #8]
}
 8004c9c:	bf00      	nop
 8004c9e:	3714      	adds	r7, #20
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bc80      	pop	{r7}
 8004ca4:	4770      	bx	lr

08004ca6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ca6:	b480      	push	{r7}
 8004ca8:	b087      	sub	sp, #28
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	60f8      	str	r0, [r7, #12]
 8004cae:	60b9      	str	r1, [r7, #8]
 8004cb0:	607a      	str	r2, [r7, #4]
 8004cb2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004cc0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	021a      	lsls	r2, r3, #8
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	431a      	orrs	r2, r3
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	697a      	ldr	r2, [r7, #20]
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	697a      	ldr	r2, [r7, #20]
 8004cd8:	609a      	str	r2, [r3, #8]
}
 8004cda:	bf00      	nop
 8004cdc:	371c      	adds	r7, #28
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bc80      	pop	{r7}
 8004ce2:	4770      	bx	lr

08004ce4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b085      	sub	sp, #20
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d101      	bne.n	8004cfc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004cf8:	2302      	movs	r3, #2
 8004cfa:	e046      	b.n	8004d8a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2202      	movs	r2, #2
 8004d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	68fa      	ldr	r2, [r7, #12]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	68fa      	ldr	r2, [r7, #12]
 8004d34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a16      	ldr	r2, [pc, #88]	; (8004d94 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d00e      	beq.n	8004d5e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d48:	d009      	beq.n	8004d5e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a12      	ldr	r2, [pc, #72]	; (8004d98 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d004      	beq.n	8004d5e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a10      	ldr	r2, [pc, #64]	; (8004d9c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d10c      	bne.n	8004d78 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	68ba      	ldr	r2, [r7, #8]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	68ba      	ldr	r2, [r7, #8]
 8004d76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d88:	2300      	movs	r3, #0
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3714      	adds	r7, #20
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bc80      	pop	{r7}
 8004d92:	4770      	bx	lr
 8004d94:	40012c00 	.word	0x40012c00
 8004d98:	40000400 	.word	0x40000400
 8004d9c:	40000800 	.word	0x40000800

08004da0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004da8:	bf00      	nop
 8004daa:	370c      	adds	r7, #12
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bc80      	pop	{r7}
 8004db0:	4770      	bx	lr

08004db2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004db2:	b480      	push	{r7}
 8004db4:	b083      	sub	sp, #12
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004dba:	bf00      	nop
 8004dbc:	370c      	adds	r7, #12
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bc80      	pop	{r7}
 8004dc2:	4770      	bx	lr

08004dc4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b082      	sub	sp, #8
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d101      	bne.n	8004dd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e03f      	b.n	8004e56 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d106      	bne.n	8004df0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f7fc fcfc 	bl	80017e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2224      	movs	r2, #36	; 0x24
 8004df4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	68da      	ldr	r2, [r3, #12]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e06:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f000 fb83 	bl	8005514 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	691a      	ldr	r2, [r3, #16]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e1c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	695a      	ldr	r2, [r3, #20]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e2c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	68da      	ldr	r2, [r3, #12]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e3c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2220      	movs	r2, #32
 8004e48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2220      	movs	r2, #32
 8004e50:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004e54:	2300      	movs	r3, #0
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3708      	adds	r7, #8
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}

08004e5e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e5e:	b580      	push	{r7, lr}
 8004e60:	b08a      	sub	sp, #40	; 0x28
 8004e62:	af02      	add	r7, sp, #8
 8004e64:	60f8      	str	r0, [r7, #12]
 8004e66:	60b9      	str	r1, [r7, #8]
 8004e68:	603b      	str	r3, [r7, #0]
 8004e6a:	4613      	mov	r3, r2
 8004e6c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	2b20      	cmp	r3, #32
 8004e7c:	d17c      	bne.n	8004f78 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d002      	beq.n	8004e8a <HAL_UART_Transmit+0x2c>
 8004e84:	88fb      	ldrh	r3, [r7, #6]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d101      	bne.n	8004e8e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e075      	b.n	8004f7a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d101      	bne.n	8004e9c <HAL_UART_Transmit+0x3e>
 8004e98:	2302      	movs	r3, #2
 8004e9a:	e06e      	b.n	8004f7a <HAL_UART_Transmit+0x11c>
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2221      	movs	r2, #33	; 0x21
 8004eae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004eb2:	f7fc ff97 	bl	8001de4 <HAL_GetTick>
 8004eb6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	88fa      	ldrh	r2, [r7, #6]
 8004ebc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	88fa      	ldrh	r2, [r7, #6]
 8004ec2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ecc:	d108      	bne.n	8004ee0 <HAL_UART_Transmit+0x82>
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	691b      	ldr	r3, [r3, #16]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d104      	bne.n	8004ee0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	61bb      	str	r3, [r7, #24]
 8004ede:	e003      	b.n	8004ee8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2200      	movs	r2, #0
 8004eec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8004ef0:	e02a      	b.n	8004f48 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	9300      	str	r3, [sp, #0]
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	2180      	movs	r1, #128	; 0x80
 8004efc:	68f8      	ldr	r0, [r7, #12]
 8004efe:	f000 f9a7 	bl	8005250 <UART_WaitOnFlagUntilTimeout>
 8004f02:	4603      	mov	r3, r0
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d001      	beq.n	8004f0c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004f08:	2303      	movs	r3, #3
 8004f0a:	e036      	b.n	8004f7a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004f0c:	69fb      	ldr	r3, [r7, #28]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d10b      	bne.n	8004f2a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f12:	69bb      	ldr	r3, [r7, #24]
 8004f14:	881b      	ldrh	r3, [r3, #0]
 8004f16:	461a      	mov	r2, r3
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f20:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004f22:	69bb      	ldr	r3, [r7, #24]
 8004f24:	3302      	adds	r3, #2
 8004f26:	61bb      	str	r3, [r7, #24]
 8004f28:	e007      	b.n	8004f3a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f2a:	69fb      	ldr	r3, [r7, #28]
 8004f2c:	781a      	ldrb	r2, [r3, #0]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004f34:	69fb      	ldr	r3, [r7, #28]
 8004f36:	3301      	adds	r3, #1
 8004f38:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f3e:	b29b      	uxth	r3, r3
 8004f40:	3b01      	subs	r3, #1
 8004f42:	b29a      	uxth	r2, r3
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f4c:	b29b      	uxth	r3, r3
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d1cf      	bne.n	8004ef2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	9300      	str	r3, [sp, #0]
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	2140      	movs	r1, #64	; 0x40
 8004f5c:	68f8      	ldr	r0, [r7, #12]
 8004f5e:	f000 f977 	bl	8005250 <UART_WaitOnFlagUntilTimeout>
 8004f62:	4603      	mov	r3, r0
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d001      	beq.n	8004f6c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004f68:	2303      	movs	r3, #3
 8004f6a:	e006      	b.n	8004f7a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2220      	movs	r2, #32
 8004f70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004f74:	2300      	movs	r3, #0
 8004f76:	e000      	b.n	8004f7a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004f78:	2302      	movs	r3, #2
  }
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3720      	adds	r7, #32
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}

08004f82 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f82:	b480      	push	{r7}
 8004f84:	b085      	sub	sp, #20
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	60f8      	str	r0, [r7, #12]
 8004f8a:	60b9      	str	r1, [r7, #8]
 8004f8c:	4613      	mov	r3, r2
 8004f8e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	2b20      	cmp	r3, #32
 8004f9a:	d140      	bne.n	800501e <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d002      	beq.n	8004fa8 <HAL_UART_Receive_IT+0x26>
 8004fa2:	88fb      	ldrh	r3, [r7, #6]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d101      	bne.n	8004fac <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e039      	b.n	8005020 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	d101      	bne.n	8004fba <HAL_UART_Receive_IT+0x38>
 8004fb6:	2302      	movs	r3, #2
 8004fb8:	e032      	b.n	8005020 <HAL_UART_Receive_IT+0x9e>
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	68ba      	ldr	r2, [r7, #8]
 8004fc6:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	88fa      	ldrh	r2, [r7, #6]
 8004fcc:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	88fa      	ldrh	r2, [r7, #6]
 8004fd2:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2222      	movs	r2, #34	; 0x22
 8004fde:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	68da      	ldr	r2, [r3, #12]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ff8:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	695a      	ldr	r2, [r3, #20]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f042 0201 	orr.w	r2, r2, #1
 8005008:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	68da      	ldr	r2, [r3, #12]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f042 0220 	orr.w	r2, r2, #32
 8005018:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800501a:	2300      	movs	r3, #0
 800501c:	e000      	b.n	8005020 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800501e:	2302      	movs	r3, #2
  }
}
 8005020:	4618      	mov	r0, r3
 8005022:	3714      	adds	r7, #20
 8005024:	46bd      	mov	sp, r7
 8005026:	bc80      	pop	{r7}
 8005028:	4770      	bx	lr
	...

0800502c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b088      	sub	sp, #32
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	68db      	ldr	r3, [r3, #12]
 8005042:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	695b      	ldr	r3, [r3, #20]
 800504a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800504c:	2300      	movs	r3, #0
 800504e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005050:	2300      	movs	r3, #0
 8005052:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005054:	69fb      	ldr	r3, [r7, #28]
 8005056:	f003 030f 	and.w	r3, r3, #15
 800505a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d10d      	bne.n	800507e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005062:	69fb      	ldr	r3, [r7, #28]
 8005064:	f003 0320 	and.w	r3, r3, #32
 8005068:	2b00      	cmp	r3, #0
 800506a:	d008      	beq.n	800507e <HAL_UART_IRQHandler+0x52>
 800506c:	69bb      	ldr	r3, [r7, #24]
 800506e:	f003 0320 	and.w	r3, r3, #32
 8005072:	2b00      	cmp	r3, #0
 8005074:	d003      	beq.n	800507e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f000 f9cc 	bl	8005414 <UART_Receive_IT>
      return;
 800507c:	e0d0      	b.n	8005220 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	2b00      	cmp	r3, #0
 8005082:	f000 80b0 	beq.w	80051e6 <HAL_UART_IRQHandler+0x1ba>
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	f003 0301 	and.w	r3, r3, #1
 800508c:	2b00      	cmp	r3, #0
 800508e:	d105      	bne.n	800509c <HAL_UART_IRQHandler+0x70>
 8005090:	69bb      	ldr	r3, [r7, #24]
 8005092:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005096:	2b00      	cmp	r3, #0
 8005098:	f000 80a5 	beq.w	80051e6 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800509c:	69fb      	ldr	r3, [r7, #28]
 800509e:	f003 0301 	and.w	r3, r3, #1
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d00a      	beq.n	80050bc <HAL_UART_IRQHandler+0x90>
 80050a6:	69bb      	ldr	r3, [r7, #24]
 80050a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d005      	beq.n	80050bc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050b4:	f043 0201 	orr.w	r2, r3, #1
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	f003 0304 	and.w	r3, r3, #4
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d00a      	beq.n	80050dc <HAL_UART_IRQHandler+0xb0>
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	f003 0301 	and.w	r3, r3, #1
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d005      	beq.n	80050dc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050d4:	f043 0202 	orr.w	r2, r3, #2
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80050dc:	69fb      	ldr	r3, [r7, #28]
 80050de:	f003 0302 	and.w	r3, r3, #2
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d00a      	beq.n	80050fc <HAL_UART_IRQHandler+0xd0>
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	f003 0301 	and.w	r3, r3, #1
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d005      	beq.n	80050fc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050f4:	f043 0204 	orr.w	r2, r3, #4
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80050fc:	69fb      	ldr	r3, [r7, #28]
 80050fe:	f003 0308 	and.w	r3, r3, #8
 8005102:	2b00      	cmp	r3, #0
 8005104:	d00f      	beq.n	8005126 <HAL_UART_IRQHandler+0xfa>
 8005106:	69bb      	ldr	r3, [r7, #24]
 8005108:	f003 0320 	and.w	r3, r3, #32
 800510c:	2b00      	cmp	r3, #0
 800510e:	d104      	bne.n	800511a <HAL_UART_IRQHandler+0xee>
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	f003 0301 	and.w	r3, r3, #1
 8005116:	2b00      	cmp	r3, #0
 8005118:	d005      	beq.n	8005126 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800511e:	f043 0208 	orr.w	r2, r3, #8
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800512a:	2b00      	cmp	r3, #0
 800512c:	d077      	beq.n	800521e <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800512e:	69fb      	ldr	r3, [r7, #28]
 8005130:	f003 0320 	and.w	r3, r3, #32
 8005134:	2b00      	cmp	r3, #0
 8005136:	d007      	beq.n	8005148 <HAL_UART_IRQHandler+0x11c>
 8005138:	69bb      	ldr	r3, [r7, #24]
 800513a:	f003 0320 	and.w	r3, r3, #32
 800513e:	2b00      	cmp	r3, #0
 8005140:	d002      	beq.n	8005148 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 f966 	bl	8005414 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	695b      	ldr	r3, [r3, #20]
 800514e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005152:	2b00      	cmp	r3, #0
 8005154:	bf14      	ite	ne
 8005156:	2301      	movne	r3, #1
 8005158:	2300      	moveq	r3, #0
 800515a:	b2db      	uxtb	r3, r3
 800515c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005162:	f003 0308 	and.w	r3, r3, #8
 8005166:	2b00      	cmp	r3, #0
 8005168:	d102      	bne.n	8005170 <HAL_UART_IRQHandler+0x144>
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d031      	beq.n	80051d4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f000 f8b7 	bl	80052e4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	695b      	ldr	r3, [r3, #20]
 800517c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005180:	2b00      	cmp	r3, #0
 8005182:	d023      	beq.n	80051cc <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	695a      	ldr	r2, [r3, #20]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005192:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005198:	2b00      	cmp	r3, #0
 800519a:	d013      	beq.n	80051c4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051a0:	4a21      	ldr	r2, [pc, #132]	; (8005228 <HAL_UART_IRQHandler+0x1fc>)
 80051a2:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051a8:	4618      	mov	r0, r3
 80051aa:	f7fd fca1 	bl	8002af0 <HAL_DMA_Abort_IT>
 80051ae:	4603      	mov	r3, r0
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d016      	beq.n	80051e2 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051ba:	687a      	ldr	r2, [r7, #4]
 80051bc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80051be:	4610      	mov	r0, r2
 80051c0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051c2:	e00e      	b.n	80051e2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f000 f83a 	bl	800523e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051ca:	e00a      	b.n	80051e2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f000 f836 	bl	800523e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051d2:	e006      	b.n	80051e2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f000 f832 	bl	800523e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2200      	movs	r2, #0
 80051de:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80051e0:	e01d      	b.n	800521e <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051e2:	bf00      	nop
    return;
 80051e4:	e01b      	b.n	800521e <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d008      	beq.n	8005202 <HAL_UART_IRQHandler+0x1d6>
 80051f0:	69bb      	ldr	r3, [r7, #24]
 80051f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d003      	beq.n	8005202 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f000 f8a3 	bl	8005346 <UART_Transmit_IT>
    return;
 8005200:	e00e      	b.n	8005220 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005202:	69fb      	ldr	r3, [r7, #28]
 8005204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005208:	2b00      	cmp	r3, #0
 800520a:	d009      	beq.n	8005220 <HAL_UART_IRQHandler+0x1f4>
 800520c:	69bb      	ldr	r3, [r7, #24]
 800520e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005212:	2b00      	cmp	r3, #0
 8005214:	d004      	beq.n	8005220 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f000 f8e4 	bl	80053e4 <UART_EndTransmit_IT>
    return;
 800521c:	e000      	b.n	8005220 <HAL_UART_IRQHandler+0x1f4>
    return;
 800521e:	bf00      	nop
  }
}
 8005220:	3720      	adds	r7, #32
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}
 8005226:	bf00      	nop
 8005228:	0800531f 	.word	0x0800531f

0800522c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800522c:	b480      	push	{r7}
 800522e:	b083      	sub	sp, #12
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005234:	bf00      	nop
 8005236:	370c      	adds	r7, #12
 8005238:	46bd      	mov	sp, r7
 800523a:	bc80      	pop	{r7}
 800523c:	4770      	bx	lr

0800523e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800523e:	b480      	push	{r7}
 8005240:	b083      	sub	sp, #12
 8005242:	af00      	add	r7, sp, #0
 8005244:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005246:	bf00      	nop
 8005248:	370c      	adds	r7, #12
 800524a:	46bd      	mov	sp, r7
 800524c:	bc80      	pop	{r7}
 800524e:	4770      	bx	lr

08005250 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b084      	sub	sp, #16
 8005254:	af00      	add	r7, sp, #0
 8005256:	60f8      	str	r0, [r7, #12]
 8005258:	60b9      	str	r1, [r7, #8]
 800525a:	603b      	str	r3, [r7, #0]
 800525c:	4613      	mov	r3, r2
 800525e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005260:	e02c      	b.n	80052bc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005262:	69bb      	ldr	r3, [r7, #24]
 8005264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005268:	d028      	beq.n	80052bc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800526a:	69bb      	ldr	r3, [r7, #24]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d007      	beq.n	8005280 <UART_WaitOnFlagUntilTimeout+0x30>
 8005270:	f7fc fdb8 	bl	8001de4 <HAL_GetTick>
 8005274:	4602      	mov	r2, r0
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	1ad3      	subs	r3, r2, r3
 800527a:	69ba      	ldr	r2, [r7, #24]
 800527c:	429a      	cmp	r2, r3
 800527e:	d21d      	bcs.n	80052bc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	68da      	ldr	r2, [r3, #12]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800528e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	695a      	ldr	r2, [r3, #20]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f022 0201 	bic.w	r2, r2, #1
 800529e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2220      	movs	r2, #32
 80052a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2220      	movs	r2, #32
 80052ac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2200      	movs	r2, #0
 80052b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80052b8:	2303      	movs	r3, #3
 80052ba:	e00f      	b.n	80052dc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	4013      	ands	r3, r2
 80052c6:	68ba      	ldr	r2, [r7, #8]
 80052c8:	429a      	cmp	r2, r3
 80052ca:	bf0c      	ite	eq
 80052cc:	2301      	moveq	r3, #1
 80052ce:	2300      	movne	r3, #0
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	461a      	mov	r2, r3
 80052d4:	79fb      	ldrb	r3, [r7, #7]
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d0c3      	beq.n	8005262 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80052da:	2300      	movs	r3, #0
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3710      	adds	r7, #16
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}

080052e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b083      	sub	sp, #12
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	68da      	ldr	r2, [r3, #12]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80052fa:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	695a      	ldr	r2, [r3, #20]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f022 0201 	bic.w	r2, r2, #1
 800530a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2220      	movs	r2, #32
 8005310:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005314:	bf00      	nop
 8005316:	370c      	adds	r7, #12
 8005318:	46bd      	mov	sp, r7
 800531a:	bc80      	pop	{r7}
 800531c:	4770      	bx	lr

0800531e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800531e:	b580      	push	{r7, lr}
 8005320:	b084      	sub	sp, #16
 8005322:	af00      	add	r7, sp, #0
 8005324:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2200      	movs	r2, #0
 8005330:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2200      	movs	r2, #0
 8005336:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005338:	68f8      	ldr	r0, [r7, #12]
 800533a:	f7ff ff80 	bl	800523e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800533e:	bf00      	nop
 8005340:	3710      	adds	r7, #16
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}

08005346 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005346:	b480      	push	{r7}
 8005348:	b085      	sub	sp, #20
 800534a:	af00      	add	r7, sp, #0
 800534c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005354:	b2db      	uxtb	r3, r3
 8005356:	2b21      	cmp	r3, #33	; 0x21
 8005358:	d13e      	bne.n	80053d8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005362:	d114      	bne.n	800538e <UART_Transmit_IT+0x48>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	691b      	ldr	r3, [r3, #16]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d110      	bne.n	800538e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6a1b      	ldr	r3, [r3, #32]
 8005370:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	881b      	ldrh	r3, [r3, #0]
 8005376:	461a      	mov	r2, r3
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005380:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6a1b      	ldr	r3, [r3, #32]
 8005386:	1c9a      	adds	r2, r3, #2
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	621a      	str	r2, [r3, #32]
 800538c:	e008      	b.n	80053a0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6a1b      	ldr	r3, [r3, #32]
 8005392:	1c59      	adds	r1, r3, #1
 8005394:	687a      	ldr	r2, [r7, #4]
 8005396:	6211      	str	r1, [r2, #32]
 8005398:	781a      	ldrb	r2, [r3, #0]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	3b01      	subs	r3, #1
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	687a      	ldr	r2, [r7, #4]
 80053ac:	4619      	mov	r1, r3
 80053ae:	84d1      	strh	r1, [r2, #38]	; 0x26
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d10f      	bne.n	80053d4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	68da      	ldr	r2, [r3, #12]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053c2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	68da      	ldr	r2, [r3, #12]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053d2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80053d4:	2300      	movs	r3, #0
 80053d6:	e000      	b.n	80053da <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80053d8:	2302      	movs	r3, #2
  }
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3714      	adds	r7, #20
 80053de:	46bd      	mov	sp, r7
 80053e0:	bc80      	pop	{r7}
 80053e2:	4770      	bx	lr

080053e4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b082      	sub	sp, #8
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	68da      	ldr	r2, [r3, #12]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053fa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2220      	movs	r2, #32
 8005400:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f7ff ff11 	bl	800522c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800540a:	2300      	movs	r3, #0
}
 800540c:	4618      	mov	r0, r3
 800540e:	3708      	adds	r7, #8
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}

08005414 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b084      	sub	sp, #16
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005422:	b2db      	uxtb	r3, r3
 8005424:	2b22      	cmp	r3, #34	; 0x22
 8005426:	d170      	bne.n	800550a <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005430:	d117      	bne.n	8005462 <UART_Receive_IT+0x4e>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	691b      	ldr	r3, [r3, #16]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d113      	bne.n	8005462 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 800543a:	2300      	movs	r3, #0
 800543c:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005442:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	b29b      	uxth	r3, r3
 800544c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005450:	b29a      	uxth	r2, r3
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800545a:	1c9a      	adds	r2, r3, #2
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	629a      	str	r2, [r3, #40]	; 0x28
 8005460:	e026      	b.n	80054b0 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005466:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8005468:	2300      	movs	r3, #0
 800546a:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005474:	d007      	beq.n	8005486 <UART_Receive_IT+0x72>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d10a      	bne.n	8005494 <UART_Receive_IT+0x80>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	691b      	ldr	r3, [r3, #16]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d106      	bne.n	8005494 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	b2da      	uxtb	r2, r3
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	701a      	strb	r2, [r3, #0]
 8005492:	e008      	b.n	80054a6 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	b2db      	uxtb	r3, r3
 800549c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054a0:	b2da      	uxtb	r2, r3
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054aa:	1c5a      	adds	r2, r3, #1
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80054b4:	b29b      	uxth	r3, r3
 80054b6:	3b01      	subs	r3, #1
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	687a      	ldr	r2, [r7, #4]
 80054bc:	4619      	mov	r1, r3
 80054be:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d120      	bne.n	8005506 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	68da      	ldr	r2, [r3, #12]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f022 0220 	bic.w	r2, r2, #32
 80054d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	68da      	ldr	r2, [r3, #12]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80054e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	695a      	ldr	r2, [r3, #20]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f022 0201 	bic.w	r2, r2, #1
 80054f2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2220      	movs	r2, #32
 80054f8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f7fb fc5d 	bl	8000dbc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005502:	2300      	movs	r3, #0
 8005504:	e002      	b.n	800550c <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8005506:	2300      	movs	r3, #0
 8005508:	e000      	b.n	800550c <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 800550a:	2302      	movs	r3, #2
  }
}
 800550c:	4618      	mov	r0, r3
 800550e:	3710      	adds	r7, #16
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}

08005514 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b084      	sub	sp, #16
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	691b      	ldr	r3, [r3, #16]
 8005522:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	68da      	ldr	r2, [r3, #12]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	430a      	orrs	r2, r1
 8005530:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	689a      	ldr	r2, [r3, #8]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	691b      	ldr	r3, [r3, #16]
 800553a:	431a      	orrs	r2, r3
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	695b      	ldr	r3, [r3, #20]
 8005540:	4313      	orrs	r3, r2
 8005542:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800554e:	f023 030c 	bic.w	r3, r3, #12
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	6812      	ldr	r2, [r2, #0]
 8005556:	68b9      	ldr	r1, [r7, #8]
 8005558:	430b      	orrs	r3, r1
 800555a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	695b      	ldr	r3, [r3, #20]
 8005562:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	699a      	ldr	r2, [r3, #24]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	430a      	orrs	r2, r1
 8005570:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a2c      	ldr	r2, [pc, #176]	; (8005628 <UART_SetConfig+0x114>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d103      	bne.n	8005584 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800557c:	f7fe fa16 	bl	80039ac <HAL_RCC_GetPCLK2Freq>
 8005580:	60f8      	str	r0, [r7, #12]
 8005582:	e002      	b.n	800558a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005584:	f7fe f9fe 	bl	8003984 <HAL_RCC_GetPCLK1Freq>
 8005588:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800558a:	68fa      	ldr	r2, [r7, #12]
 800558c:	4613      	mov	r3, r2
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	4413      	add	r3, r2
 8005592:	009a      	lsls	r2, r3, #2
 8005594:	441a      	add	r2, r3
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	009b      	lsls	r3, r3, #2
 800559c:	fbb2 f3f3 	udiv	r3, r2, r3
 80055a0:	4a22      	ldr	r2, [pc, #136]	; (800562c <UART_SetConfig+0x118>)
 80055a2:	fba2 2303 	umull	r2, r3, r2, r3
 80055a6:	095b      	lsrs	r3, r3, #5
 80055a8:	0119      	lsls	r1, r3, #4
 80055aa:	68fa      	ldr	r2, [r7, #12]
 80055ac:	4613      	mov	r3, r2
 80055ae:	009b      	lsls	r3, r3, #2
 80055b0:	4413      	add	r3, r2
 80055b2:	009a      	lsls	r2, r3, #2
 80055b4:	441a      	add	r2, r3
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	009b      	lsls	r3, r3, #2
 80055bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80055c0:	4b1a      	ldr	r3, [pc, #104]	; (800562c <UART_SetConfig+0x118>)
 80055c2:	fba3 0302 	umull	r0, r3, r3, r2
 80055c6:	095b      	lsrs	r3, r3, #5
 80055c8:	2064      	movs	r0, #100	; 0x64
 80055ca:	fb00 f303 	mul.w	r3, r0, r3
 80055ce:	1ad3      	subs	r3, r2, r3
 80055d0:	011b      	lsls	r3, r3, #4
 80055d2:	3332      	adds	r3, #50	; 0x32
 80055d4:	4a15      	ldr	r2, [pc, #84]	; (800562c <UART_SetConfig+0x118>)
 80055d6:	fba2 2303 	umull	r2, r3, r2, r3
 80055da:	095b      	lsrs	r3, r3, #5
 80055dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80055e0:	4419      	add	r1, r3
 80055e2:	68fa      	ldr	r2, [r7, #12]
 80055e4:	4613      	mov	r3, r2
 80055e6:	009b      	lsls	r3, r3, #2
 80055e8:	4413      	add	r3, r2
 80055ea:	009a      	lsls	r2, r3, #2
 80055ec:	441a      	add	r2, r3
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	009b      	lsls	r3, r3, #2
 80055f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80055f8:	4b0c      	ldr	r3, [pc, #48]	; (800562c <UART_SetConfig+0x118>)
 80055fa:	fba3 0302 	umull	r0, r3, r3, r2
 80055fe:	095b      	lsrs	r3, r3, #5
 8005600:	2064      	movs	r0, #100	; 0x64
 8005602:	fb00 f303 	mul.w	r3, r0, r3
 8005606:	1ad3      	subs	r3, r2, r3
 8005608:	011b      	lsls	r3, r3, #4
 800560a:	3332      	adds	r3, #50	; 0x32
 800560c:	4a07      	ldr	r2, [pc, #28]	; (800562c <UART_SetConfig+0x118>)
 800560e:	fba2 2303 	umull	r2, r3, r2, r3
 8005612:	095b      	lsrs	r3, r3, #5
 8005614:	f003 020f 	and.w	r2, r3, #15
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	440a      	add	r2, r1
 800561e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005620:	bf00      	nop
 8005622:	3710      	adds	r7, #16
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}
 8005628:	40013800 	.word	0x40013800
 800562c:	51eb851f 	.word	0x51eb851f

08005630 <__errno>:
 8005630:	4b01      	ldr	r3, [pc, #4]	; (8005638 <__errno+0x8>)
 8005632:	6818      	ldr	r0, [r3, #0]
 8005634:	4770      	bx	lr
 8005636:	bf00      	nop
 8005638:	20000128 	.word	0x20000128

0800563c <__libc_init_array>:
 800563c:	b570      	push	{r4, r5, r6, lr}
 800563e:	2600      	movs	r6, #0
 8005640:	4d0c      	ldr	r5, [pc, #48]	; (8005674 <__libc_init_array+0x38>)
 8005642:	4c0d      	ldr	r4, [pc, #52]	; (8005678 <__libc_init_array+0x3c>)
 8005644:	1b64      	subs	r4, r4, r5
 8005646:	10a4      	asrs	r4, r4, #2
 8005648:	42a6      	cmp	r6, r4
 800564a:	d109      	bne.n	8005660 <__libc_init_array+0x24>
 800564c:	f000 fc6a 	bl	8005f24 <_init>
 8005650:	2600      	movs	r6, #0
 8005652:	4d0a      	ldr	r5, [pc, #40]	; (800567c <__libc_init_array+0x40>)
 8005654:	4c0a      	ldr	r4, [pc, #40]	; (8005680 <__libc_init_array+0x44>)
 8005656:	1b64      	subs	r4, r4, r5
 8005658:	10a4      	asrs	r4, r4, #2
 800565a:	42a6      	cmp	r6, r4
 800565c:	d105      	bne.n	800566a <__libc_init_array+0x2e>
 800565e:	bd70      	pop	{r4, r5, r6, pc}
 8005660:	f855 3b04 	ldr.w	r3, [r5], #4
 8005664:	4798      	blx	r3
 8005666:	3601      	adds	r6, #1
 8005668:	e7ee      	b.n	8005648 <__libc_init_array+0xc>
 800566a:	f855 3b04 	ldr.w	r3, [r5], #4
 800566e:	4798      	blx	r3
 8005670:	3601      	adds	r6, #1
 8005672:	e7f2      	b.n	800565a <__libc_init_array+0x1e>
 8005674:	080069cc 	.word	0x080069cc
 8005678:	080069cc 	.word	0x080069cc
 800567c:	080069cc 	.word	0x080069cc
 8005680:	080069d0 	.word	0x080069d0

08005684 <memset>:
 8005684:	4603      	mov	r3, r0
 8005686:	4402      	add	r2, r0
 8005688:	4293      	cmp	r3, r2
 800568a:	d100      	bne.n	800568e <memset+0xa>
 800568c:	4770      	bx	lr
 800568e:	f803 1b01 	strb.w	r1, [r3], #1
 8005692:	e7f9      	b.n	8005688 <memset+0x4>

08005694 <siprintf>:
 8005694:	b40e      	push	{r1, r2, r3}
 8005696:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800569a:	b500      	push	{lr}
 800569c:	b09c      	sub	sp, #112	; 0x70
 800569e:	ab1d      	add	r3, sp, #116	; 0x74
 80056a0:	9002      	str	r0, [sp, #8]
 80056a2:	9006      	str	r0, [sp, #24]
 80056a4:	9107      	str	r1, [sp, #28]
 80056a6:	9104      	str	r1, [sp, #16]
 80056a8:	4808      	ldr	r0, [pc, #32]	; (80056cc <siprintf+0x38>)
 80056aa:	4909      	ldr	r1, [pc, #36]	; (80056d0 <siprintf+0x3c>)
 80056ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80056b0:	9105      	str	r1, [sp, #20]
 80056b2:	6800      	ldr	r0, [r0, #0]
 80056b4:	a902      	add	r1, sp, #8
 80056b6:	9301      	str	r3, [sp, #4]
 80056b8:	f000 f876 	bl	80057a8 <_svfiprintf_r>
 80056bc:	2200      	movs	r2, #0
 80056be:	9b02      	ldr	r3, [sp, #8]
 80056c0:	701a      	strb	r2, [r3, #0]
 80056c2:	b01c      	add	sp, #112	; 0x70
 80056c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80056c8:	b003      	add	sp, #12
 80056ca:	4770      	bx	lr
 80056cc:	20000128 	.word	0x20000128
 80056d0:	ffff0208 	.word	0xffff0208

080056d4 <strcat>:
 80056d4:	4602      	mov	r2, r0
 80056d6:	b510      	push	{r4, lr}
 80056d8:	7814      	ldrb	r4, [r2, #0]
 80056da:	4613      	mov	r3, r2
 80056dc:	3201      	adds	r2, #1
 80056de:	2c00      	cmp	r4, #0
 80056e0:	d1fa      	bne.n	80056d8 <strcat+0x4>
 80056e2:	3b01      	subs	r3, #1
 80056e4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80056e8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80056ec:	2a00      	cmp	r2, #0
 80056ee:	d1f9      	bne.n	80056e4 <strcat+0x10>
 80056f0:	bd10      	pop	{r4, pc}

080056f2 <__ssputs_r>:
 80056f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056f6:	688e      	ldr	r6, [r1, #8]
 80056f8:	4682      	mov	sl, r0
 80056fa:	429e      	cmp	r6, r3
 80056fc:	460c      	mov	r4, r1
 80056fe:	4690      	mov	r8, r2
 8005700:	461f      	mov	r7, r3
 8005702:	d838      	bhi.n	8005776 <__ssputs_r+0x84>
 8005704:	898a      	ldrh	r2, [r1, #12]
 8005706:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800570a:	d032      	beq.n	8005772 <__ssputs_r+0x80>
 800570c:	6825      	ldr	r5, [r4, #0]
 800570e:	6909      	ldr	r1, [r1, #16]
 8005710:	3301      	adds	r3, #1
 8005712:	eba5 0901 	sub.w	r9, r5, r1
 8005716:	6965      	ldr	r5, [r4, #20]
 8005718:	444b      	add	r3, r9
 800571a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800571e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005722:	106d      	asrs	r5, r5, #1
 8005724:	429d      	cmp	r5, r3
 8005726:	bf38      	it	cc
 8005728:	461d      	movcc	r5, r3
 800572a:	0553      	lsls	r3, r2, #21
 800572c:	d531      	bpl.n	8005792 <__ssputs_r+0xa0>
 800572e:	4629      	mov	r1, r5
 8005730:	f000 fb52 	bl	8005dd8 <_malloc_r>
 8005734:	4606      	mov	r6, r0
 8005736:	b950      	cbnz	r0, 800574e <__ssputs_r+0x5c>
 8005738:	230c      	movs	r3, #12
 800573a:	f04f 30ff 	mov.w	r0, #4294967295
 800573e:	f8ca 3000 	str.w	r3, [sl]
 8005742:	89a3      	ldrh	r3, [r4, #12]
 8005744:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005748:	81a3      	strh	r3, [r4, #12]
 800574a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800574e:	464a      	mov	r2, r9
 8005750:	6921      	ldr	r1, [r4, #16]
 8005752:	f000 facd 	bl	8005cf0 <memcpy>
 8005756:	89a3      	ldrh	r3, [r4, #12]
 8005758:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800575c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005760:	81a3      	strh	r3, [r4, #12]
 8005762:	6126      	str	r6, [r4, #16]
 8005764:	444e      	add	r6, r9
 8005766:	6026      	str	r6, [r4, #0]
 8005768:	463e      	mov	r6, r7
 800576a:	6165      	str	r5, [r4, #20]
 800576c:	eba5 0509 	sub.w	r5, r5, r9
 8005770:	60a5      	str	r5, [r4, #8]
 8005772:	42be      	cmp	r6, r7
 8005774:	d900      	bls.n	8005778 <__ssputs_r+0x86>
 8005776:	463e      	mov	r6, r7
 8005778:	4632      	mov	r2, r6
 800577a:	4641      	mov	r1, r8
 800577c:	6820      	ldr	r0, [r4, #0]
 800577e:	f000 fac5 	bl	8005d0c <memmove>
 8005782:	68a3      	ldr	r3, [r4, #8]
 8005784:	6822      	ldr	r2, [r4, #0]
 8005786:	1b9b      	subs	r3, r3, r6
 8005788:	4432      	add	r2, r6
 800578a:	2000      	movs	r0, #0
 800578c:	60a3      	str	r3, [r4, #8]
 800578e:	6022      	str	r2, [r4, #0]
 8005790:	e7db      	b.n	800574a <__ssputs_r+0x58>
 8005792:	462a      	mov	r2, r5
 8005794:	f000 fb7a 	bl	8005e8c <_realloc_r>
 8005798:	4606      	mov	r6, r0
 800579a:	2800      	cmp	r0, #0
 800579c:	d1e1      	bne.n	8005762 <__ssputs_r+0x70>
 800579e:	4650      	mov	r0, sl
 80057a0:	6921      	ldr	r1, [r4, #16]
 80057a2:	f000 facd 	bl	8005d40 <_free_r>
 80057a6:	e7c7      	b.n	8005738 <__ssputs_r+0x46>

080057a8 <_svfiprintf_r>:
 80057a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057ac:	4698      	mov	r8, r3
 80057ae:	898b      	ldrh	r3, [r1, #12]
 80057b0:	4607      	mov	r7, r0
 80057b2:	061b      	lsls	r3, r3, #24
 80057b4:	460d      	mov	r5, r1
 80057b6:	4614      	mov	r4, r2
 80057b8:	b09d      	sub	sp, #116	; 0x74
 80057ba:	d50e      	bpl.n	80057da <_svfiprintf_r+0x32>
 80057bc:	690b      	ldr	r3, [r1, #16]
 80057be:	b963      	cbnz	r3, 80057da <_svfiprintf_r+0x32>
 80057c0:	2140      	movs	r1, #64	; 0x40
 80057c2:	f000 fb09 	bl	8005dd8 <_malloc_r>
 80057c6:	6028      	str	r0, [r5, #0]
 80057c8:	6128      	str	r0, [r5, #16]
 80057ca:	b920      	cbnz	r0, 80057d6 <_svfiprintf_r+0x2e>
 80057cc:	230c      	movs	r3, #12
 80057ce:	603b      	str	r3, [r7, #0]
 80057d0:	f04f 30ff 	mov.w	r0, #4294967295
 80057d4:	e0d1      	b.n	800597a <_svfiprintf_r+0x1d2>
 80057d6:	2340      	movs	r3, #64	; 0x40
 80057d8:	616b      	str	r3, [r5, #20]
 80057da:	2300      	movs	r3, #0
 80057dc:	9309      	str	r3, [sp, #36]	; 0x24
 80057de:	2320      	movs	r3, #32
 80057e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80057e4:	2330      	movs	r3, #48	; 0x30
 80057e6:	f04f 0901 	mov.w	r9, #1
 80057ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80057ee:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005994 <_svfiprintf_r+0x1ec>
 80057f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80057f6:	4623      	mov	r3, r4
 80057f8:	469a      	mov	sl, r3
 80057fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80057fe:	b10a      	cbz	r2, 8005804 <_svfiprintf_r+0x5c>
 8005800:	2a25      	cmp	r2, #37	; 0x25
 8005802:	d1f9      	bne.n	80057f8 <_svfiprintf_r+0x50>
 8005804:	ebba 0b04 	subs.w	fp, sl, r4
 8005808:	d00b      	beq.n	8005822 <_svfiprintf_r+0x7a>
 800580a:	465b      	mov	r3, fp
 800580c:	4622      	mov	r2, r4
 800580e:	4629      	mov	r1, r5
 8005810:	4638      	mov	r0, r7
 8005812:	f7ff ff6e 	bl	80056f2 <__ssputs_r>
 8005816:	3001      	adds	r0, #1
 8005818:	f000 80aa 	beq.w	8005970 <_svfiprintf_r+0x1c8>
 800581c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800581e:	445a      	add	r2, fp
 8005820:	9209      	str	r2, [sp, #36]	; 0x24
 8005822:	f89a 3000 	ldrb.w	r3, [sl]
 8005826:	2b00      	cmp	r3, #0
 8005828:	f000 80a2 	beq.w	8005970 <_svfiprintf_r+0x1c8>
 800582c:	2300      	movs	r3, #0
 800582e:	f04f 32ff 	mov.w	r2, #4294967295
 8005832:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005836:	f10a 0a01 	add.w	sl, sl, #1
 800583a:	9304      	str	r3, [sp, #16]
 800583c:	9307      	str	r3, [sp, #28]
 800583e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005842:	931a      	str	r3, [sp, #104]	; 0x68
 8005844:	4654      	mov	r4, sl
 8005846:	2205      	movs	r2, #5
 8005848:	f814 1b01 	ldrb.w	r1, [r4], #1
 800584c:	4851      	ldr	r0, [pc, #324]	; (8005994 <_svfiprintf_r+0x1ec>)
 800584e:	f000 fa41 	bl	8005cd4 <memchr>
 8005852:	9a04      	ldr	r2, [sp, #16]
 8005854:	b9d8      	cbnz	r0, 800588e <_svfiprintf_r+0xe6>
 8005856:	06d0      	lsls	r0, r2, #27
 8005858:	bf44      	itt	mi
 800585a:	2320      	movmi	r3, #32
 800585c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005860:	0711      	lsls	r1, r2, #28
 8005862:	bf44      	itt	mi
 8005864:	232b      	movmi	r3, #43	; 0x2b
 8005866:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800586a:	f89a 3000 	ldrb.w	r3, [sl]
 800586e:	2b2a      	cmp	r3, #42	; 0x2a
 8005870:	d015      	beq.n	800589e <_svfiprintf_r+0xf6>
 8005872:	4654      	mov	r4, sl
 8005874:	2000      	movs	r0, #0
 8005876:	f04f 0c0a 	mov.w	ip, #10
 800587a:	9a07      	ldr	r2, [sp, #28]
 800587c:	4621      	mov	r1, r4
 800587e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005882:	3b30      	subs	r3, #48	; 0x30
 8005884:	2b09      	cmp	r3, #9
 8005886:	d94e      	bls.n	8005926 <_svfiprintf_r+0x17e>
 8005888:	b1b0      	cbz	r0, 80058b8 <_svfiprintf_r+0x110>
 800588a:	9207      	str	r2, [sp, #28]
 800588c:	e014      	b.n	80058b8 <_svfiprintf_r+0x110>
 800588e:	eba0 0308 	sub.w	r3, r0, r8
 8005892:	fa09 f303 	lsl.w	r3, r9, r3
 8005896:	4313      	orrs	r3, r2
 8005898:	46a2      	mov	sl, r4
 800589a:	9304      	str	r3, [sp, #16]
 800589c:	e7d2      	b.n	8005844 <_svfiprintf_r+0x9c>
 800589e:	9b03      	ldr	r3, [sp, #12]
 80058a0:	1d19      	adds	r1, r3, #4
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	9103      	str	r1, [sp, #12]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	bfbb      	ittet	lt
 80058aa:	425b      	neglt	r3, r3
 80058ac:	f042 0202 	orrlt.w	r2, r2, #2
 80058b0:	9307      	strge	r3, [sp, #28]
 80058b2:	9307      	strlt	r3, [sp, #28]
 80058b4:	bfb8      	it	lt
 80058b6:	9204      	strlt	r2, [sp, #16]
 80058b8:	7823      	ldrb	r3, [r4, #0]
 80058ba:	2b2e      	cmp	r3, #46	; 0x2e
 80058bc:	d10c      	bne.n	80058d8 <_svfiprintf_r+0x130>
 80058be:	7863      	ldrb	r3, [r4, #1]
 80058c0:	2b2a      	cmp	r3, #42	; 0x2a
 80058c2:	d135      	bne.n	8005930 <_svfiprintf_r+0x188>
 80058c4:	9b03      	ldr	r3, [sp, #12]
 80058c6:	3402      	adds	r4, #2
 80058c8:	1d1a      	adds	r2, r3, #4
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	9203      	str	r2, [sp, #12]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	bfb8      	it	lt
 80058d2:	f04f 33ff 	movlt.w	r3, #4294967295
 80058d6:	9305      	str	r3, [sp, #20]
 80058d8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80059a4 <_svfiprintf_r+0x1fc>
 80058dc:	2203      	movs	r2, #3
 80058de:	4650      	mov	r0, sl
 80058e0:	7821      	ldrb	r1, [r4, #0]
 80058e2:	f000 f9f7 	bl	8005cd4 <memchr>
 80058e6:	b140      	cbz	r0, 80058fa <_svfiprintf_r+0x152>
 80058e8:	2340      	movs	r3, #64	; 0x40
 80058ea:	eba0 000a 	sub.w	r0, r0, sl
 80058ee:	fa03 f000 	lsl.w	r0, r3, r0
 80058f2:	9b04      	ldr	r3, [sp, #16]
 80058f4:	3401      	adds	r4, #1
 80058f6:	4303      	orrs	r3, r0
 80058f8:	9304      	str	r3, [sp, #16]
 80058fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058fe:	2206      	movs	r2, #6
 8005900:	4825      	ldr	r0, [pc, #148]	; (8005998 <_svfiprintf_r+0x1f0>)
 8005902:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005906:	f000 f9e5 	bl	8005cd4 <memchr>
 800590a:	2800      	cmp	r0, #0
 800590c:	d038      	beq.n	8005980 <_svfiprintf_r+0x1d8>
 800590e:	4b23      	ldr	r3, [pc, #140]	; (800599c <_svfiprintf_r+0x1f4>)
 8005910:	bb1b      	cbnz	r3, 800595a <_svfiprintf_r+0x1b2>
 8005912:	9b03      	ldr	r3, [sp, #12]
 8005914:	3307      	adds	r3, #7
 8005916:	f023 0307 	bic.w	r3, r3, #7
 800591a:	3308      	adds	r3, #8
 800591c:	9303      	str	r3, [sp, #12]
 800591e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005920:	4433      	add	r3, r6
 8005922:	9309      	str	r3, [sp, #36]	; 0x24
 8005924:	e767      	b.n	80057f6 <_svfiprintf_r+0x4e>
 8005926:	460c      	mov	r4, r1
 8005928:	2001      	movs	r0, #1
 800592a:	fb0c 3202 	mla	r2, ip, r2, r3
 800592e:	e7a5      	b.n	800587c <_svfiprintf_r+0xd4>
 8005930:	2300      	movs	r3, #0
 8005932:	f04f 0c0a 	mov.w	ip, #10
 8005936:	4619      	mov	r1, r3
 8005938:	3401      	adds	r4, #1
 800593a:	9305      	str	r3, [sp, #20]
 800593c:	4620      	mov	r0, r4
 800593e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005942:	3a30      	subs	r2, #48	; 0x30
 8005944:	2a09      	cmp	r2, #9
 8005946:	d903      	bls.n	8005950 <_svfiprintf_r+0x1a8>
 8005948:	2b00      	cmp	r3, #0
 800594a:	d0c5      	beq.n	80058d8 <_svfiprintf_r+0x130>
 800594c:	9105      	str	r1, [sp, #20]
 800594e:	e7c3      	b.n	80058d8 <_svfiprintf_r+0x130>
 8005950:	4604      	mov	r4, r0
 8005952:	2301      	movs	r3, #1
 8005954:	fb0c 2101 	mla	r1, ip, r1, r2
 8005958:	e7f0      	b.n	800593c <_svfiprintf_r+0x194>
 800595a:	ab03      	add	r3, sp, #12
 800595c:	9300      	str	r3, [sp, #0]
 800595e:	462a      	mov	r2, r5
 8005960:	4638      	mov	r0, r7
 8005962:	4b0f      	ldr	r3, [pc, #60]	; (80059a0 <_svfiprintf_r+0x1f8>)
 8005964:	a904      	add	r1, sp, #16
 8005966:	f3af 8000 	nop.w
 800596a:	1c42      	adds	r2, r0, #1
 800596c:	4606      	mov	r6, r0
 800596e:	d1d6      	bne.n	800591e <_svfiprintf_r+0x176>
 8005970:	89ab      	ldrh	r3, [r5, #12]
 8005972:	065b      	lsls	r3, r3, #25
 8005974:	f53f af2c 	bmi.w	80057d0 <_svfiprintf_r+0x28>
 8005978:	9809      	ldr	r0, [sp, #36]	; 0x24
 800597a:	b01d      	add	sp, #116	; 0x74
 800597c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005980:	ab03      	add	r3, sp, #12
 8005982:	9300      	str	r3, [sp, #0]
 8005984:	462a      	mov	r2, r5
 8005986:	4638      	mov	r0, r7
 8005988:	4b05      	ldr	r3, [pc, #20]	; (80059a0 <_svfiprintf_r+0x1f8>)
 800598a:	a904      	add	r1, sp, #16
 800598c:	f000 f87c 	bl	8005a88 <_printf_i>
 8005990:	e7eb      	b.n	800596a <_svfiprintf_r+0x1c2>
 8005992:	bf00      	nop
 8005994:	08006998 	.word	0x08006998
 8005998:	080069a2 	.word	0x080069a2
 800599c:	00000000 	.word	0x00000000
 80059a0:	080056f3 	.word	0x080056f3
 80059a4:	0800699e 	.word	0x0800699e

080059a8 <_printf_common>:
 80059a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059ac:	4616      	mov	r6, r2
 80059ae:	4699      	mov	r9, r3
 80059b0:	688a      	ldr	r2, [r1, #8]
 80059b2:	690b      	ldr	r3, [r1, #16]
 80059b4:	4607      	mov	r7, r0
 80059b6:	4293      	cmp	r3, r2
 80059b8:	bfb8      	it	lt
 80059ba:	4613      	movlt	r3, r2
 80059bc:	6033      	str	r3, [r6, #0]
 80059be:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80059c2:	460c      	mov	r4, r1
 80059c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80059c8:	b10a      	cbz	r2, 80059ce <_printf_common+0x26>
 80059ca:	3301      	adds	r3, #1
 80059cc:	6033      	str	r3, [r6, #0]
 80059ce:	6823      	ldr	r3, [r4, #0]
 80059d0:	0699      	lsls	r1, r3, #26
 80059d2:	bf42      	ittt	mi
 80059d4:	6833      	ldrmi	r3, [r6, #0]
 80059d6:	3302      	addmi	r3, #2
 80059d8:	6033      	strmi	r3, [r6, #0]
 80059da:	6825      	ldr	r5, [r4, #0]
 80059dc:	f015 0506 	ands.w	r5, r5, #6
 80059e0:	d106      	bne.n	80059f0 <_printf_common+0x48>
 80059e2:	f104 0a19 	add.w	sl, r4, #25
 80059e6:	68e3      	ldr	r3, [r4, #12]
 80059e8:	6832      	ldr	r2, [r6, #0]
 80059ea:	1a9b      	subs	r3, r3, r2
 80059ec:	42ab      	cmp	r3, r5
 80059ee:	dc28      	bgt.n	8005a42 <_printf_common+0x9a>
 80059f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80059f4:	1e13      	subs	r3, r2, #0
 80059f6:	6822      	ldr	r2, [r4, #0]
 80059f8:	bf18      	it	ne
 80059fa:	2301      	movne	r3, #1
 80059fc:	0692      	lsls	r2, r2, #26
 80059fe:	d42d      	bmi.n	8005a5c <_printf_common+0xb4>
 8005a00:	4649      	mov	r1, r9
 8005a02:	4638      	mov	r0, r7
 8005a04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a08:	47c0      	blx	r8
 8005a0a:	3001      	adds	r0, #1
 8005a0c:	d020      	beq.n	8005a50 <_printf_common+0xa8>
 8005a0e:	6823      	ldr	r3, [r4, #0]
 8005a10:	68e5      	ldr	r5, [r4, #12]
 8005a12:	f003 0306 	and.w	r3, r3, #6
 8005a16:	2b04      	cmp	r3, #4
 8005a18:	bf18      	it	ne
 8005a1a:	2500      	movne	r5, #0
 8005a1c:	6832      	ldr	r2, [r6, #0]
 8005a1e:	f04f 0600 	mov.w	r6, #0
 8005a22:	68a3      	ldr	r3, [r4, #8]
 8005a24:	bf08      	it	eq
 8005a26:	1aad      	subeq	r5, r5, r2
 8005a28:	6922      	ldr	r2, [r4, #16]
 8005a2a:	bf08      	it	eq
 8005a2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a30:	4293      	cmp	r3, r2
 8005a32:	bfc4      	itt	gt
 8005a34:	1a9b      	subgt	r3, r3, r2
 8005a36:	18ed      	addgt	r5, r5, r3
 8005a38:	341a      	adds	r4, #26
 8005a3a:	42b5      	cmp	r5, r6
 8005a3c:	d11a      	bne.n	8005a74 <_printf_common+0xcc>
 8005a3e:	2000      	movs	r0, #0
 8005a40:	e008      	b.n	8005a54 <_printf_common+0xac>
 8005a42:	2301      	movs	r3, #1
 8005a44:	4652      	mov	r2, sl
 8005a46:	4649      	mov	r1, r9
 8005a48:	4638      	mov	r0, r7
 8005a4a:	47c0      	blx	r8
 8005a4c:	3001      	adds	r0, #1
 8005a4e:	d103      	bne.n	8005a58 <_printf_common+0xb0>
 8005a50:	f04f 30ff 	mov.w	r0, #4294967295
 8005a54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a58:	3501      	adds	r5, #1
 8005a5a:	e7c4      	b.n	80059e6 <_printf_common+0x3e>
 8005a5c:	2030      	movs	r0, #48	; 0x30
 8005a5e:	18e1      	adds	r1, r4, r3
 8005a60:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005a64:	1c5a      	adds	r2, r3, #1
 8005a66:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005a6a:	4422      	add	r2, r4
 8005a6c:	3302      	adds	r3, #2
 8005a6e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005a72:	e7c5      	b.n	8005a00 <_printf_common+0x58>
 8005a74:	2301      	movs	r3, #1
 8005a76:	4622      	mov	r2, r4
 8005a78:	4649      	mov	r1, r9
 8005a7a:	4638      	mov	r0, r7
 8005a7c:	47c0      	blx	r8
 8005a7e:	3001      	adds	r0, #1
 8005a80:	d0e6      	beq.n	8005a50 <_printf_common+0xa8>
 8005a82:	3601      	adds	r6, #1
 8005a84:	e7d9      	b.n	8005a3a <_printf_common+0x92>
	...

08005a88 <_printf_i>:
 8005a88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a8c:	460c      	mov	r4, r1
 8005a8e:	7e27      	ldrb	r7, [r4, #24]
 8005a90:	4691      	mov	r9, r2
 8005a92:	2f78      	cmp	r7, #120	; 0x78
 8005a94:	4680      	mov	r8, r0
 8005a96:	469a      	mov	sl, r3
 8005a98:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005a9a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a9e:	d807      	bhi.n	8005ab0 <_printf_i+0x28>
 8005aa0:	2f62      	cmp	r7, #98	; 0x62
 8005aa2:	d80a      	bhi.n	8005aba <_printf_i+0x32>
 8005aa4:	2f00      	cmp	r7, #0
 8005aa6:	f000 80d9 	beq.w	8005c5c <_printf_i+0x1d4>
 8005aaa:	2f58      	cmp	r7, #88	; 0x58
 8005aac:	f000 80a4 	beq.w	8005bf8 <_printf_i+0x170>
 8005ab0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005ab4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005ab8:	e03a      	b.n	8005b30 <_printf_i+0xa8>
 8005aba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005abe:	2b15      	cmp	r3, #21
 8005ac0:	d8f6      	bhi.n	8005ab0 <_printf_i+0x28>
 8005ac2:	a001      	add	r0, pc, #4	; (adr r0, 8005ac8 <_printf_i+0x40>)
 8005ac4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005ac8:	08005b21 	.word	0x08005b21
 8005acc:	08005b35 	.word	0x08005b35
 8005ad0:	08005ab1 	.word	0x08005ab1
 8005ad4:	08005ab1 	.word	0x08005ab1
 8005ad8:	08005ab1 	.word	0x08005ab1
 8005adc:	08005ab1 	.word	0x08005ab1
 8005ae0:	08005b35 	.word	0x08005b35
 8005ae4:	08005ab1 	.word	0x08005ab1
 8005ae8:	08005ab1 	.word	0x08005ab1
 8005aec:	08005ab1 	.word	0x08005ab1
 8005af0:	08005ab1 	.word	0x08005ab1
 8005af4:	08005c43 	.word	0x08005c43
 8005af8:	08005b65 	.word	0x08005b65
 8005afc:	08005c25 	.word	0x08005c25
 8005b00:	08005ab1 	.word	0x08005ab1
 8005b04:	08005ab1 	.word	0x08005ab1
 8005b08:	08005c65 	.word	0x08005c65
 8005b0c:	08005ab1 	.word	0x08005ab1
 8005b10:	08005b65 	.word	0x08005b65
 8005b14:	08005ab1 	.word	0x08005ab1
 8005b18:	08005ab1 	.word	0x08005ab1
 8005b1c:	08005c2d 	.word	0x08005c2d
 8005b20:	680b      	ldr	r3, [r1, #0]
 8005b22:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005b26:	1d1a      	adds	r2, r3, #4
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	600a      	str	r2, [r1, #0]
 8005b2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b30:	2301      	movs	r3, #1
 8005b32:	e0a4      	b.n	8005c7e <_printf_i+0x1f6>
 8005b34:	6825      	ldr	r5, [r4, #0]
 8005b36:	6808      	ldr	r0, [r1, #0]
 8005b38:	062e      	lsls	r6, r5, #24
 8005b3a:	f100 0304 	add.w	r3, r0, #4
 8005b3e:	d50a      	bpl.n	8005b56 <_printf_i+0xce>
 8005b40:	6805      	ldr	r5, [r0, #0]
 8005b42:	600b      	str	r3, [r1, #0]
 8005b44:	2d00      	cmp	r5, #0
 8005b46:	da03      	bge.n	8005b50 <_printf_i+0xc8>
 8005b48:	232d      	movs	r3, #45	; 0x2d
 8005b4a:	426d      	negs	r5, r5
 8005b4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b50:	230a      	movs	r3, #10
 8005b52:	485e      	ldr	r0, [pc, #376]	; (8005ccc <_printf_i+0x244>)
 8005b54:	e019      	b.n	8005b8a <_printf_i+0x102>
 8005b56:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005b5a:	6805      	ldr	r5, [r0, #0]
 8005b5c:	600b      	str	r3, [r1, #0]
 8005b5e:	bf18      	it	ne
 8005b60:	b22d      	sxthne	r5, r5
 8005b62:	e7ef      	b.n	8005b44 <_printf_i+0xbc>
 8005b64:	680b      	ldr	r3, [r1, #0]
 8005b66:	6825      	ldr	r5, [r4, #0]
 8005b68:	1d18      	adds	r0, r3, #4
 8005b6a:	6008      	str	r0, [r1, #0]
 8005b6c:	0628      	lsls	r0, r5, #24
 8005b6e:	d501      	bpl.n	8005b74 <_printf_i+0xec>
 8005b70:	681d      	ldr	r5, [r3, #0]
 8005b72:	e002      	b.n	8005b7a <_printf_i+0xf2>
 8005b74:	0669      	lsls	r1, r5, #25
 8005b76:	d5fb      	bpl.n	8005b70 <_printf_i+0xe8>
 8005b78:	881d      	ldrh	r5, [r3, #0]
 8005b7a:	2f6f      	cmp	r7, #111	; 0x6f
 8005b7c:	bf0c      	ite	eq
 8005b7e:	2308      	moveq	r3, #8
 8005b80:	230a      	movne	r3, #10
 8005b82:	4852      	ldr	r0, [pc, #328]	; (8005ccc <_printf_i+0x244>)
 8005b84:	2100      	movs	r1, #0
 8005b86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005b8a:	6866      	ldr	r6, [r4, #4]
 8005b8c:	2e00      	cmp	r6, #0
 8005b8e:	bfa8      	it	ge
 8005b90:	6821      	ldrge	r1, [r4, #0]
 8005b92:	60a6      	str	r6, [r4, #8]
 8005b94:	bfa4      	itt	ge
 8005b96:	f021 0104 	bicge.w	r1, r1, #4
 8005b9a:	6021      	strge	r1, [r4, #0]
 8005b9c:	b90d      	cbnz	r5, 8005ba2 <_printf_i+0x11a>
 8005b9e:	2e00      	cmp	r6, #0
 8005ba0:	d04d      	beq.n	8005c3e <_printf_i+0x1b6>
 8005ba2:	4616      	mov	r6, r2
 8005ba4:	fbb5 f1f3 	udiv	r1, r5, r3
 8005ba8:	fb03 5711 	mls	r7, r3, r1, r5
 8005bac:	5dc7      	ldrb	r7, [r0, r7]
 8005bae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005bb2:	462f      	mov	r7, r5
 8005bb4:	42bb      	cmp	r3, r7
 8005bb6:	460d      	mov	r5, r1
 8005bb8:	d9f4      	bls.n	8005ba4 <_printf_i+0x11c>
 8005bba:	2b08      	cmp	r3, #8
 8005bbc:	d10b      	bne.n	8005bd6 <_printf_i+0x14e>
 8005bbe:	6823      	ldr	r3, [r4, #0]
 8005bc0:	07df      	lsls	r7, r3, #31
 8005bc2:	d508      	bpl.n	8005bd6 <_printf_i+0x14e>
 8005bc4:	6923      	ldr	r3, [r4, #16]
 8005bc6:	6861      	ldr	r1, [r4, #4]
 8005bc8:	4299      	cmp	r1, r3
 8005bca:	bfde      	ittt	le
 8005bcc:	2330      	movle	r3, #48	; 0x30
 8005bce:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005bd2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005bd6:	1b92      	subs	r2, r2, r6
 8005bd8:	6122      	str	r2, [r4, #16]
 8005bda:	464b      	mov	r3, r9
 8005bdc:	4621      	mov	r1, r4
 8005bde:	4640      	mov	r0, r8
 8005be0:	f8cd a000 	str.w	sl, [sp]
 8005be4:	aa03      	add	r2, sp, #12
 8005be6:	f7ff fedf 	bl	80059a8 <_printf_common>
 8005bea:	3001      	adds	r0, #1
 8005bec:	d14c      	bne.n	8005c88 <_printf_i+0x200>
 8005bee:	f04f 30ff 	mov.w	r0, #4294967295
 8005bf2:	b004      	add	sp, #16
 8005bf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bf8:	4834      	ldr	r0, [pc, #208]	; (8005ccc <_printf_i+0x244>)
 8005bfa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005bfe:	680e      	ldr	r6, [r1, #0]
 8005c00:	6823      	ldr	r3, [r4, #0]
 8005c02:	f856 5b04 	ldr.w	r5, [r6], #4
 8005c06:	061f      	lsls	r7, r3, #24
 8005c08:	600e      	str	r6, [r1, #0]
 8005c0a:	d514      	bpl.n	8005c36 <_printf_i+0x1ae>
 8005c0c:	07d9      	lsls	r1, r3, #31
 8005c0e:	bf44      	itt	mi
 8005c10:	f043 0320 	orrmi.w	r3, r3, #32
 8005c14:	6023      	strmi	r3, [r4, #0]
 8005c16:	b91d      	cbnz	r5, 8005c20 <_printf_i+0x198>
 8005c18:	6823      	ldr	r3, [r4, #0]
 8005c1a:	f023 0320 	bic.w	r3, r3, #32
 8005c1e:	6023      	str	r3, [r4, #0]
 8005c20:	2310      	movs	r3, #16
 8005c22:	e7af      	b.n	8005b84 <_printf_i+0xfc>
 8005c24:	6823      	ldr	r3, [r4, #0]
 8005c26:	f043 0320 	orr.w	r3, r3, #32
 8005c2a:	6023      	str	r3, [r4, #0]
 8005c2c:	2378      	movs	r3, #120	; 0x78
 8005c2e:	4828      	ldr	r0, [pc, #160]	; (8005cd0 <_printf_i+0x248>)
 8005c30:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005c34:	e7e3      	b.n	8005bfe <_printf_i+0x176>
 8005c36:	065e      	lsls	r6, r3, #25
 8005c38:	bf48      	it	mi
 8005c3a:	b2ad      	uxthmi	r5, r5
 8005c3c:	e7e6      	b.n	8005c0c <_printf_i+0x184>
 8005c3e:	4616      	mov	r6, r2
 8005c40:	e7bb      	b.n	8005bba <_printf_i+0x132>
 8005c42:	680b      	ldr	r3, [r1, #0]
 8005c44:	6826      	ldr	r6, [r4, #0]
 8005c46:	1d1d      	adds	r5, r3, #4
 8005c48:	6960      	ldr	r0, [r4, #20]
 8005c4a:	600d      	str	r5, [r1, #0]
 8005c4c:	0635      	lsls	r5, r6, #24
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	d501      	bpl.n	8005c56 <_printf_i+0x1ce>
 8005c52:	6018      	str	r0, [r3, #0]
 8005c54:	e002      	b.n	8005c5c <_printf_i+0x1d4>
 8005c56:	0671      	lsls	r1, r6, #25
 8005c58:	d5fb      	bpl.n	8005c52 <_printf_i+0x1ca>
 8005c5a:	8018      	strh	r0, [r3, #0]
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	4616      	mov	r6, r2
 8005c60:	6123      	str	r3, [r4, #16]
 8005c62:	e7ba      	b.n	8005bda <_printf_i+0x152>
 8005c64:	680b      	ldr	r3, [r1, #0]
 8005c66:	1d1a      	adds	r2, r3, #4
 8005c68:	600a      	str	r2, [r1, #0]
 8005c6a:	681e      	ldr	r6, [r3, #0]
 8005c6c:	2100      	movs	r1, #0
 8005c6e:	4630      	mov	r0, r6
 8005c70:	6862      	ldr	r2, [r4, #4]
 8005c72:	f000 f82f 	bl	8005cd4 <memchr>
 8005c76:	b108      	cbz	r0, 8005c7c <_printf_i+0x1f4>
 8005c78:	1b80      	subs	r0, r0, r6
 8005c7a:	6060      	str	r0, [r4, #4]
 8005c7c:	6863      	ldr	r3, [r4, #4]
 8005c7e:	6123      	str	r3, [r4, #16]
 8005c80:	2300      	movs	r3, #0
 8005c82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c86:	e7a8      	b.n	8005bda <_printf_i+0x152>
 8005c88:	4632      	mov	r2, r6
 8005c8a:	4649      	mov	r1, r9
 8005c8c:	4640      	mov	r0, r8
 8005c8e:	6923      	ldr	r3, [r4, #16]
 8005c90:	47d0      	blx	sl
 8005c92:	3001      	adds	r0, #1
 8005c94:	d0ab      	beq.n	8005bee <_printf_i+0x166>
 8005c96:	6823      	ldr	r3, [r4, #0]
 8005c98:	079b      	lsls	r3, r3, #30
 8005c9a:	d413      	bmi.n	8005cc4 <_printf_i+0x23c>
 8005c9c:	68e0      	ldr	r0, [r4, #12]
 8005c9e:	9b03      	ldr	r3, [sp, #12]
 8005ca0:	4298      	cmp	r0, r3
 8005ca2:	bfb8      	it	lt
 8005ca4:	4618      	movlt	r0, r3
 8005ca6:	e7a4      	b.n	8005bf2 <_printf_i+0x16a>
 8005ca8:	2301      	movs	r3, #1
 8005caa:	4632      	mov	r2, r6
 8005cac:	4649      	mov	r1, r9
 8005cae:	4640      	mov	r0, r8
 8005cb0:	47d0      	blx	sl
 8005cb2:	3001      	adds	r0, #1
 8005cb4:	d09b      	beq.n	8005bee <_printf_i+0x166>
 8005cb6:	3501      	adds	r5, #1
 8005cb8:	68e3      	ldr	r3, [r4, #12]
 8005cba:	9903      	ldr	r1, [sp, #12]
 8005cbc:	1a5b      	subs	r3, r3, r1
 8005cbe:	42ab      	cmp	r3, r5
 8005cc0:	dcf2      	bgt.n	8005ca8 <_printf_i+0x220>
 8005cc2:	e7eb      	b.n	8005c9c <_printf_i+0x214>
 8005cc4:	2500      	movs	r5, #0
 8005cc6:	f104 0619 	add.w	r6, r4, #25
 8005cca:	e7f5      	b.n	8005cb8 <_printf_i+0x230>
 8005ccc:	080069a9 	.word	0x080069a9
 8005cd0:	080069ba 	.word	0x080069ba

08005cd4 <memchr>:
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	b510      	push	{r4, lr}
 8005cd8:	b2c9      	uxtb	r1, r1
 8005cda:	4402      	add	r2, r0
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	4618      	mov	r0, r3
 8005ce0:	d101      	bne.n	8005ce6 <memchr+0x12>
 8005ce2:	2000      	movs	r0, #0
 8005ce4:	e003      	b.n	8005cee <memchr+0x1a>
 8005ce6:	7804      	ldrb	r4, [r0, #0]
 8005ce8:	3301      	adds	r3, #1
 8005cea:	428c      	cmp	r4, r1
 8005cec:	d1f6      	bne.n	8005cdc <memchr+0x8>
 8005cee:	bd10      	pop	{r4, pc}

08005cf0 <memcpy>:
 8005cf0:	440a      	add	r2, r1
 8005cf2:	4291      	cmp	r1, r2
 8005cf4:	f100 33ff 	add.w	r3, r0, #4294967295
 8005cf8:	d100      	bne.n	8005cfc <memcpy+0xc>
 8005cfa:	4770      	bx	lr
 8005cfc:	b510      	push	{r4, lr}
 8005cfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d02:	4291      	cmp	r1, r2
 8005d04:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d08:	d1f9      	bne.n	8005cfe <memcpy+0xe>
 8005d0a:	bd10      	pop	{r4, pc}

08005d0c <memmove>:
 8005d0c:	4288      	cmp	r0, r1
 8005d0e:	b510      	push	{r4, lr}
 8005d10:	eb01 0402 	add.w	r4, r1, r2
 8005d14:	d902      	bls.n	8005d1c <memmove+0x10>
 8005d16:	4284      	cmp	r4, r0
 8005d18:	4623      	mov	r3, r4
 8005d1a:	d807      	bhi.n	8005d2c <memmove+0x20>
 8005d1c:	1e43      	subs	r3, r0, #1
 8005d1e:	42a1      	cmp	r1, r4
 8005d20:	d008      	beq.n	8005d34 <memmove+0x28>
 8005d22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d26:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005d2a:	e7f8      	b.n	8005d1e <memmove+0x12>
 8005d2c:	4601      	mov	r1, r0
 8005d2e:	4402      	add	r2, r0
 8005d30:	428a      	cmp	r2, r1
 8005d32:	d100      	bne.n	8005d36 <memmove+0x2a>
 8005d34:	bd10      	pop	{r4, pc}
 8005d36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005d3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005d3e:	e7f7      	b.n	8005d30 <memmove+0x24>

08005d40 <_free_r>:
 8005d40:	b538      	push	{r3, r4, r5, lr}
 8005d42:	4605      	mov	r5, r0
 8005d44:	2900      	cmp	r1, #0
 8005d46:	d043      	beq.n	8005dd0 <_free_r+0x90>
 8005d48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d4c:	1f0c      	subs	r4, r1, #4
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	bfb8      	it	lt
 8005d52:	18e4      	addlt	r4, r4, r3
 8005d54:	f000 f8d0 	bl	8005ef8 <__malloc_lock>
 8005d58:	4a1e      	ldr	r2, [pc, #120]	; (8005dd4 <_free_r+0x94>)
 8005d5a:	6813      	ldr	r3, [r2, #0]
 8005d5c:	4610      	mov	r0, r2
 8005d5e:	b933      	cbnz	r3, 8005d6e <_free_r+0x2e>
 8005d60:	6063      	str	r3, [r4, #4]
 8005d62:	6014      	str	r4, [r2, #0]
 8005d64:	4628      	mov	r0, r5
 8005d66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d6a:	f000 b8cb 	b.w	8005f04 <__malloc_unlock>
 8005d6e:	42a3      	cmp	r3, r4
 8005d70:	d90a      	bls.n	8005d88 <_free_r+0x48>
 8005d72:	6821      	ldr	r1, [r4, #0]
 8005d74:	1862      	adds	r2, r4, r1
 8005d76:	4293      	cmp	r3, r2
 8005d78:	bf01      	itttt	eq
 8005d7a:	681a      	ldreq	r2, [r3, #0]
 8005d7c:	685b      	ldreq	r3, [r3, #4]
 8005d7e:	1852      	addeq	r2, r2, r1
 8005d80:	6022      	streq	r2, [r4, #0]
 8005d82:	6063      	str	r3, [r4, #4]
 8005d84:	6004      	str	r4, [r0, #0]
 8005d86:	e7ed      	b.n	8005d64 <_free_r+0x24>
 8005d88:	461a      	mov	r2, r3
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	b10b      	cbz	r3, 8005d92 <_free_r+0x52>
 8005d8e:	42a3      	cmp	r3, r4
 8005d90:	d9fa      	bls.n	8005d88 <_free_r+0x48>
 8005d92:	6811      	ldr	r1, [r2, #0]
 8005d94:	1850      	adds	r0, r2, r1
 8005d96:	42a0      	cmp	r0, r4
 8005d98:	d10b      	bne.n	8005db2 <_free_r+0x72>
 8005d9a:	6820      	ldr	r0, [r4, #0]
 8005d9c:	4401      	add	r1, r0
 8005d9e:	1850      	adds	r0, r2, r1
 8005da0:	4283      	cmp	r3, r0
 8005da2:	6011      	str	r1, [r2, #0]
 8005da4:	d1de      	bne.n	8005d64 <_free_r+0x24>
 8005da6:	6818      	ldr	r0, [r3, #0]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	4401      	add	r1, r0
 8005dac:	6011      	str	r1, [r2, #0]
 8005dae:	6053      	str	r3, [r2, #4]
 8005db0:	e7d8      	b.n	8005d64 <_free_r+0x24>
 8005db2:	d902      	bls.n	8005dba <_free_r+0x7a>
 8005db4:	230c      	movs	r3, #12
 8005db6:	602b      	str	r3, [r5, #0]
 8005db8:	e7d4      	b.n	8005d64 <_free_r+0x24>
 8005dba:	6820      	ldr	r0, [r4, #0]
 8005dbc:	1821      	adds	r1, r4, r0
 8005dbe:	428b      	cmp	r3, r1
 8005dc0:	bf01      	itttt	eq
 8005dc2:	6819      	ldreq	r1, [r3, #0]
 8005dc4:	685b      	ldreq	r3, [r3, #4]
 8005dc6:	1809      	addeq	r1, r1, r0
 8005dc8:	6021      	streq	r1, [r4, #0]
 8005dca:	6063      	str	r3, [r4, #4]
 8005dcc:	6054      	str	r4, [r2, #4]
 8005dce:	e7c9      	b.n	8005d64 <_free_r+0x24>
 8005dd0:	bd38      	pop	{r3, r4, r5, pc}
 8005dd2:	bf00      	nop
 8005dd4:	200001b8 	.word	0x200001b8

08005dd8 <_malloc_r>:
 8005dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dda:	1ccd      	adds	r5, r1, #3
 8005ddc:	f025 0503 	bic.w	r5, r5, #3
 8005de0:	3508      	adds	r5, #8
 8005de2:	2d0c      	cmp	r5, #12
 8005de4:	bf38      	it	cc
 8005de6:	250c      	movcc	r5, #12
 8005de8:	2d00      	cmp	r5, #0
 8005dea:	4606      	mov	r6, r0
 8005dec:	db01      	blt.n	8005df2 <_malloc_r+0x1a>
 8005dee:	42a9      	cmp	r1, r5
 8005df0:	d903      	bls.n	8005dfa <_malloc_r+0x22>
 8005df2:	230c      	movs	r3, #12
 8005df4:	6033      	str	r3, [r6, #0]
 8005df6:	2000      	movs	r0, #0
 8005df8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005dfa:	f000 f87d 	bl	8005ef8 <__malloc_lock>
 8005dfe:	4921      	ldr	r1, [pc, #132]	; (8005e84 <_malloc_r+0xac>)
 8005e00:	680a      	ldr	r2, [r1, #0]
 8005e02:	4614      	mov	r4, r2
 8005e04:	b99c      	cbnz	r4, 8005e2e <_malloc_r+0x56>
 8005e06:	4f20      	ldr	r7, [pc, #128]	; (8005e88 <_malloc_r+0xb0>)
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	b923      	cbnz	r3, 8005e16 <_malloc_r+0x3e>
 8005e0c:	4621      	mov	r1, r4
 8005e0e:	4630      	mov	r0, r6
 8005e10:	f000 f862 	bl	8005ed8 <_sbrk_r>
 8005e14:	6038      	str	r0, [r7, #0]
 8005e16:	4629      	mov	r1, r5
 8005e18:	4630      	mov	r0, r6
 8005e1a:	f000 f85d 	bl	8005ed8 <_sbrk_r>
 8005e1e:	1c43      	adds	r3, r0, #1
 8005e20:	d123      	bne.n	8005e6a <_malloc_r+0x92>
 8005e22:	230c      	movs	r3, #12
 8005e24:	4630      	mov	r0, r6
 8005e26:	6033      	str	r3, [r6, #0]
 8005e28:	f000 f86c 	bl	8005f04 <__malloc_unlock>
 8005e2c:	e7e3      	b.n	8005df6 <_malloc_r+0x1e>
 8005e2e:	6823      	ldr	r3, [r4, #0]
 8005e30:	1b5b      	subs	r3, r3, r5
 8005e32:	d417      	bmi.n	8005e64 <_malloc_r+0x8c>
 8005e34:	2b0b      	cmp	r3, #11
 8005e36:	d903      	bls.n	8005e40 <_malloc_r+0x68>
 8005e38:	6023      	str	r3, [r4, #0]
 8005e3a:	441c      	add	r4, r3
 8005e3c:	6025      	str	r5, [r4, #0]
 8005e3e:	e004      	b.n	8005e4a <_malloc_r+0x72>
 8005e40:	6863      	ldr	r3, [r4, #4]
 8005e42:	42a2      	cmp	r2, r4
 8005e44:	bf0c      	ite	eq
 8005e46:	600b      	streq	r3, [r1, #0]
 8005e48:	6053      	strne	r3, [r2, #4]
 8005e4a:	4630      	mov	r0, r6
 8005e4c:	f000 f85a 	bl	8005f04 <__malloc_unlock>
 8005e50:	f104 000b 	add.w	r0, r4, #11
 8005e54:	1d23      	adds	r3, r4, #4
 8005e56:	f020 0007 	bic.w	r0, r0, #7
 8005e5a:	1ac2      	subs	r2, r0, r3
 8005e5c:	d0cc      	beq.n	8005df8 <_malloc_r+0x20>
 8005e5e:	1a1b      	subs	r3, r3, r0
 8005e60:	50a3      	str	r3, [r4, r2]
 8005e62:	e7c9      	b.n	8005df8 <_malloc_r+0x20>
 8005e64:	4622      	mov	r2, r4
 8005e66:	6864      	ldr	r4, [r4, #4]
 8005e68:	e7cc      	b.n	8005e04 <_malloc_r+0x2c>
 8005e6a:	1cc4      	adds	r4, r0, #3
 8005e6c:	f024 0403 	bic.w	r4, r4, #3
 8005e70:	42a0      	cmp	r0, r4
 8005e72:	d0e3      	beq.n	8005e3c <_malloc_r+0x64>
 8005e74:	1a21      	subs	r1, r4, r0
 8005e76:	4630      	mov	r0, r6
 8005e78:	f000 f82e 	bl	8005ed8 <_sbrk_r>
 8005e7c:	3001      	adds	r0, #1
 8005e7e:	d1dd      	bne.n	8005e3c <_malloc_r+0x64>
 8005e80:	e7cf      	b.n	8005e22 <_malloc_r+0x4a>
 8005e82:	bf00      	nop
 8005e84:	200001b8 	.word	0x200001b8
 8005e88:	200001bc 	.word	0x200001bc

08005e8c <_realloc_r>:
 8005e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e8e:	4607      	mov	r7, r0
 8005e90:	4614      	mov	r4, r2
 8005e92:	460e      	mov	r6, r1
 8005e94:	b921      	cbnz	r1, 8005ea0 <_realloc_r+0x14>
 8005e96:	4611      	mov	r1, r2
 8005e98:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005e9c:	f7ff bf9c 	b.w	8005dd8 <_malloc_r>
 8005ea0:	b922      	cbnz	r2, 8005eac <_realloc_r+0x20>
 8005ea2:	f7ff ff4d 	bl	8005d40 <_free_r>
 8005ea6:	4625      	mov	r5, r4
 8005ea8:	4628      	mov	r0, r5
 8005eaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005eac:	f000 f830 	bl	8005f10 <_malloc_usable_size_r>
 8005eb0:	42a0      	cmp	r0, r4
 8005eb2:	d20f      	bcs.n	8005ed4 <_realloc_r+0x48>
 8005eb4:	4621      	mov	r1, r4
 8005eb6:	4638      	mov	r0, r7
 8005eb8:	f7ff ff8e 	bl	8005dd8 <_malloc_r>
 8005ebc:	4605      	mov	r5, r0
 8005ebe:	2800      	cmp	r0, #0
 8005ec0:	d0f2      	beq.n	8005ea8 <_realloc_r+0x1c>
 8005ec2:	4631      	mov	r1, r6
 8005ec4:	4622      	mov	r2, r4
 8005ec6:	f7ff ff13 	bl	8005cf0 <memcpy>
 8005eca:	4631      	mov	r1, r6
 8005ecc:	4638      	mov	r0, r7
 8005ece:	f7ff ff37 	bl	8005d40 <_free_r>
 8005ed2:	e7e9      	b.n	8005ea8 <_realloc_r+0x1c>
 8005ed4:	4635      	mov	r5, r6
 8005ed6:	e7e7      	b.n	8005ea8 <_realloc_r+0x1c>

08005ed8 <_sbrk_r>:
 8005ed8:	b538      	push	{r3, r4, r5, lr}
 8005eda:	2300      	movs	r3, #0
 8005edc:	4d05      	ldr	r5, [pc, #20]	; (8005ef4 <_sbrk_r+0x1c>)
 8005ede:	4604      	mov	r4, r0
 8005ee0:	4608      	mov	r0, r1
 8005ee2:	602b      	str	r3, [r5, #0]
 8005ee4:	f7fb fec4 	bl	8001c70 <_sbrk>
 8005ee8:	1c43      	adds	r3, r0, #1
 8005eea:	d102      	bne.n	8005ef2 <_sbrk_r+0x1a>
 8005eec:	682b      	ldr	r3, [r5, #0]
 8005eee:	b103      	cbz	r3, 8005ef2 <_sbrk_r+0x1a>
 8005ef0:	6023      	str	r3, [r4, #0]
 8005ef2:	bd38      	pop	{r3, r4, r5, pc}
 8005ef4:	200003b8 	.word	0x200003b8

08005ef8 <__malloc_lock>:
 8005ef8:	4801      	ldr	r0, [pc, #4]	; (8005f00 <__malloc_lock+0x8>)
 8005efa:	f000 b811 	b.w	8005f20 <__retarget_lock_acquire_recursive>
 8005efe:	bf00      	nop
 8005f00:	200003c0 	.word	0x200003c0

08005f04 <__malloc_unlock>:
 8005f04:	4801      	ldr	r0, [pc, #4]	; (8005f0c <__malloc_unlock+0x8>)
 8005f06:	f000 b80c 	b.w	8005f22 <__retarget_lock_release_recursive>
 8005f0a:	bf00      	nop
 8005f0c:	200003c0 	.word	0x200003c0

08005f10 <_malloc_usable_size_r>:
 8005f10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f14:	1f18      	subs	r0, r3, #4
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	bfbc      	itt	lt
 8005f1a:	580b      	ldrlt	r3, [r1, r0]
 8005f1c:	18c0      	addlt	r0, r0, r3
 8005f1e:	4770      	bx	lr

08005f20 <__retarget_lock_acquire_recursive>:
 8005f20:	4770      	bx	lr

08005f22 <__retarget_lock_release_recursive>:
 8005f22:	4770      	bx	lr

08005f24 <_init>:
 8005f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f26:	bf00      	nop
 8005f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f2a:	bc08      	pop	{r3}
 8005f2c:	469e      	mov	lr, r3
 8005f2e:	4770      	bx	lr

08005f30 <_fini>:
 8005f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f32:	bf00      	nop
 8005f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f36:	bc08      	pop	{r3}
 8005f38:	469e      	mov	lr, r3
 8005f3a:	4770      	bx	lr
