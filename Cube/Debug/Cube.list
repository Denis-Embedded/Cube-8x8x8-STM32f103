
Cube.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006744  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004bc  08006850  08006850  00016850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d0c  08006d0c  000200d8  2**0
                  CONTENTS
  4 .ARM          00000000  08006d0c  08006d0c  000200d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006d0c  08006d0c  000200d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08006d0c  08006d0c  00016d0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d14  08006d14  00016d14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d8  20000000  08006d18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e0  200000d8  08006df0  000200d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  200002b8  08006df0  000202b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017530  00000000  00000000  00020101  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034f9  00000000  00000000  00037631  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00002ad8  00000000  00000000  0003ab2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e68  00000000  00000000  0003d608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000017f8  00000000  00000000  0003e470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b83d  00000000  00000000  0003fc68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013b45  00000000  00000000  0005b4a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00091c27  00000000  00000000  0006efea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00100c11  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000449c  00000000  00000000  00100c64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         000000cc  00000000  00000000  00105100  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      000001b9  00000000  00000000  001051cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000d8 	.word	0x200000d8
 8000128:	00000000 	.word	0x00000000
 800012c:	08006838 	.word	0x08006838

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000dc 	.word	0x200000dc
 8000148:	08006838 	.word	0x08006838

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <_ZN4Cube20constChangeBrightnesEv>:
    	m_IsModeSwitched = 0;
    }
}

void Cube::constChangeBrightnes()
{
 800015c:	b510      	push	{r4, lr}
	/*---------------------Setup----------------------------*/
	if (m_IsModeSwitched)
 800015e:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
{
 8000162:	4604      	mov	r4, r0
	if (m_IsModeSwitched)
 8000164:	bb5b      	cbnz	r3, 80001be <_ZN4Cube20constChangeBrightnesEv+0x62>
	/*-----------------------Main loop----------------------*/
	/*
	 * Таймер нужен только для того, чтобы ярксоть менялась более плавно
	 * в момент когда идет смена векторов
	 */
	if (HAL_GetTick() - m_lastTrigger > m_modeTimer)
 8000166:	f001 ffef 	bl	8002148 <HAL_GetTick>
 800016a:	e9d4 2319 	ldrd	r2, r3, [r4, #100]	; 0x64
 800016e:	1a80      	subs	r0, r0, r2
 8000170:	4298      	cmp	r0, r3
 8000172:	d800      	bhi.n	8000176 <_ZN4Cube20constChangeBrightnesEv+0x1a>
		}

		TIM2->CCR4 = brightness;
	}
	/*-----------------------Main loop----------------------*/
}
 8000174:	bd10      	pop	{r4, pc}
		m_lastTrigger = HAL_GetTick();
 8000176:	f001 ffe7 	bl	8002148 <HAL_GetTick>
		switch(vector)
 800017a:	f894 306e 	ldrb.w	r3, [r4, #110]	; 0x6e
 800017e:	f8b4 206c 	ldrh.w	r2, [r4, #108]	; 0x6c
		m_lastTrigger = HAL_GetTick();
 8000182:	6660      	str	r0, [r4, #100]	; 0x64
		switch(vector)
 8000184:	b36b      	cbz	r3, 80001e2 <_ZN4Cube20constChangeBrightnesEv+0x86>
 8000186:	2b01      	cmp	r3, #1
 8000188:	d026      	beq.n	80001d8 <_ZN4Cube20constChangeBrightnesEv+0x7c>
		if(brightness == 0 && vector == H2L)
 800018a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800018c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000190:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000194:	d108      	bne.n	80001a8 <_ZN4Cube20constChangeBrightnesEv+0x4c>
		    vector = L2H;
 8000196:	2300      	movs	r3, #0
 8000198:	f884 306e 	strb.w	r3, [r4, #110]	; 0x6e
		    m_lastTrigger += 1000;
 800019c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800019e:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
 80001a2:	6660      	str	r0, [r4, #100]	; 0x64
 80001a4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		if (brightness == 4094 && vector == L2H)
 80001a8:	f640 71fe 	movw	r1, #4094	; 0xffe
 80001ac:	428b      	cmp	r3, r1
		    vector = H2L;
 80001ae:	bf04      	itt	eq
 80001b0:	2301      	moveq	r3, #1
 80001b2:	f884 306e 	strbeq.w	r3, [r4, #110]	; 0x6e
		TIM2->CCR4 = brightness;
 80001b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80001ba:	641a      	str	r2, [r3, #64]	; 0x40
}
 80001bc:	bd10      	pop	{r4, pc}
 80001be:	2240      	movs	r2, #64	; 0x40
 80001c0:	21ff      	movs	r1, #255	; 0xff
 80001c2:	3008      	adds	r0, #8
 80001c4:	f005 faa6 	bl	8005714 <memset>
    	m_IsModeSwitched = 0;
 80001c8:	2300      	movs	r3, #0
 80001ca:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
		brightness = 0;
 80001ce:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
		vector = L2H;
 80001d2:	f884 306e 	strb.w	r3, [r4, #110]	; 0x6e
 80001d6:	e7c6      	b.n	8000166 <_ZN4Cube20constChangeBrightnesEv+0xa>
			    --brightness;
 80001d8:	3a01      	subs	r2, #1
 80001da:	b292      	uxth	r2, r2
 80001dc:	f8a4 206c 	strh.w	r2, [r4, #108]	; 0x6c
			break;
 80001e0:	e7d3      	b.n	800018a <_ZN4Cube20constChangeBrightnesEv+0x2e>
			    ++brightness;//if(++brightness == 4095)
 80001e2:	3201      	adds	r2, #1
 80001e4:	b292      	uxth	r2, r2
 80001e6:	f8a4 206c 	strh.w	r2, [r4, #108]	; 0x6c
			break;
 80001ea:	e7ce      	b.n	800018a <_ZN4Cube20constChangeBrightnesEv+0x2e>

080001ec <_ZN4Cube11walkingCubeEv>:
	Text.lengh = lengh;
}


void Cube::walkingCube()								//Летающий куб внутри пространства
{
 80001ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	/*---------------------Setup----------------------------*/
	if (m_IsModeSwitched)
 80001f0:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
{
 80001f4:	4604      	mov	r4, r0
	if (m_IsModeSwitched)
 80001f6:	b1fb      	cbz	r3, 8000238 <_ZN4Cube11walkingCubeEv+0x4c>
 80001f8:	2240      	movs	r2, #64	; 0x40
 80001fa:	2100      	movs	r1, #0
 80001fc:	3008      	adds	r0, #8
 80001fe:	f005 fa89 	bl	8005714 <memset>
	{
		clearCube();
		m_IsModeSwitched = 0;
 8000202:	f104 0650 	add.w	r6, r4, #80	; 0x50
 8000206:	2200      	movs	r2, #0
		m_modeTimer = WALKING_TIME;
 8000208:	2364      	movs	r3, #100	; 0x64
 800020a:	46b0      	mov	r8, r6
		for (uint8_t i = 0; i < 3; ++i)
		{
			m_coord[i] = 300;							//300, чтобы не использовать долгие вычисления с плавающей точкой
 800020c:	f44f 7796 	mov.w	r7, #300	; 0x12c
		m_IsModeSwitched = 0;
 8000210:	f884 2049 	strb.w	r2, [r4, #73]	; 0x49
		m_modeTimer = WALKING_TIME;
 8000214:	66a3      	str	r3, [r4, #104]	; 0x68
		for (uint8_t i = 0; i < 3; ++i)
 8000216:	f104 054a 	add.w	r5, r4, #74	; 0x4a
			m_coord[i] = 300;							//300, чтобы не использовать долгие вычисления с плавающей точкой
 800021a:	f825 7b02 	strh.w	r7, [r5], #2
			m_vector[i] = getRandomNumber(3, 7) * 15;	//В f103 нет блока FPU
 800021e:	2107      	movs	r1, #7
 8000220:	2003      	movs	r0, #3
 8000222:	f001 fb97 	bl	8001954 <_Z15getRandomNumberii>
		for (uint8_t i = 0; i < 3; ++i)
 8000226:	45a8      	cmp	r8, r5
			m_vector[i] = getRandomNumber(3, 7) * 15;	//В f103 нет блока FPU
 8000228:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
 800022c:	f806 0b01 	strb.w	r0, [r6], #1
		for (uint8_t i = 0; i < 3; ++i)
 8000230:	d1f3      	bne.n	800021a <_ZN4Cube11walkingCubeEv+0x2e>
		}
		m_lastTrigger = HAL_GetTick();
 8000232:	f001 ff89 	bl	8002148 <HAL_GetTick>
 8000236:	6660      	str	r0, [r4, #100]	; 0x64
	}
	/*---------------------Setup----------------------------*/


	/*-----------------------Main loop----------------------*/
	if (HAL_GetTick() - m_lastTrigger > m_modeTimer)
 8000238:	f001 ff86 	bl	8002148 <HAL_GetTick>
 800023c:	e9d4 2319 	ldrd	r2, r3, [r4, #100]	; 0x64
 8000240:	1a80      	subs	r0, r0, r2
 8000242:	4298      	cmp	r0, r3
 8000244:	d801      	bhi.n	800024a <_ZN4Cube11walkingCubeEv+0x5e>
		setDot(thisX, 		thisY + 1, 	thisZ + 1, 	1);
		setDot(thisX + 1, 	thisY, 		thisZ + 1, 	1);
		setDot(thisX + 1, 	thisY + 1, 	thisZ + 1, 	1);
	}
	/*-----------------------Main loop----------------------*/
}
 8000246:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		m_lastTrigger = HAL_GetTick();
 800024a:	f001 ff7d 	bl	8002148 <HAL_GetTick>
			m_coord[i] += m_vector[i];
 800024e:	f994 2050 	ldrsb.w	r2, [r4, #80]	; 0x50
 8000252:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
		m_lastTrigger = HAL_GetTick();
 8000256:	6660      	str	r0, [r4, #100]	; 0x64
			m_coord[i] += m_vector[i];
 8000258:	4413      	add	r3, r2
 800025a:	b21b      	sxth	r3, r3
			if (m_coord[i] <= 1)				//Защита от отрицательных координат и векторов
 800025c:	2b01      	cmp	r3, #1
 800025e:	f340 80c5 	ble.w	80003ec <_ZN4Cube11walkingCubeEv+0x200>
			m_coord[i] += m_vector[i];
 8000262:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
			if (m_coord[i] >= (700 - 100))
 8000266:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800026a:	da75      	bge.n	8000358 <_ZN4Cube11walkingCubeEv+0x16c>
			m_coord[i] += m_vector[i];
 800026c:	f994 2051 	ldrsb.w	r2, [r4, #81]	; 0x51
 8000270:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
 8000274:	4413      	add	r3, r2
 8000276:	b21b      	sxth	r3, r3
			if (m_coord[i] <= 1)				//Защита от отрицательных координат и векторов
 8000278:	2b01      	cmp	r3, #1
 800027a:	f340 80a3 	ble.w	80003c4 <_ZN4Cube11walkingCubeEv+0x1d8>
			m_coord[i] += m_vector[i];
 800027e:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
			if (m_coord[i] >= (700 - 100))
 8000282:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8000286:	f280 808b 	bge.w	80003a0 <_ZN4Cube11walkingCubeEv+0x1b4>
			m_coord[i] += m_vector[i];
 800028a:	f994 2052 	ldrsb.w	r2, [r4, #82]	; 0x52
 800028e:	f8b4 304e 	ldrh.w	r3, [r4, #78]	; 0x4e
 8000292:	4413      	add	r3, r2
 8000294:	b21b      	sxth	r3, r3
			if (m_coord[i] <= 1)				//Защита от отрицательных координат и векторов
 8000296:	2b01      	cmp	r3, #1
 8000298:	f340 80bc 	ble.w	8000414 <_ZN4Cube11walkingCubeEv+0x228>
			m_coord[i] += m_vector[i];
 800029c:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
			if (m_coord[i] >= (700 - 100))
 80002a0:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 80002a4:	da6a      	bge.n	800037c <_ZN4Cube11walkingCubeEv+0x190>
		for(uint8_t i = 0; i < 3; ++i)
 80002a6:	2100      	movs	r1, #0
 80002a8:	2240      	movs	r2, #64	; 0x40
 80002aa:	f104 0008 	add.w	r0, r4, #8
 80002ae:	f005 fa31 	bl	8005714 <memset>
    m_OutFrame[7 - z][x] &= ~(128 >> y); 							//сбрасываем бит
 80002b2:	f04f 0e80 	mov.w	lr, #128	; 0x80
		int8_t thisZ = m_coord[2] / 100;
 80002b6:	f9b4 304e 	ldrsh.w	r3, [r4, #78]	; 0x4e
		int8_t thisX = m_coord[0] / 100;
 80002ba:	4860      	ldr	r0, [pc, #384]	; (800043c <_ZN4Cube11walkingCubeEv+0x250>)
 80002bc:	f9b4 204a 	ldrsh.w	r2, [r4, #74]	; 0x4a
		int8_t thisZ = m_coord[2] / 100;
 80002c0:	fb80 1503 	smull	r1, r5, r0, r3
		int8_t thisY = m_coord[1] / 100;
 80002c4:	f9b4 104c 	ldrsh.w	r1, [r4, #76]	; 0x4c
		int8_t thisX = m_coord[0] / 100;
 80002c8:	fb80 7602 	smull	r7, r6, r0, r2
		int8_t thisZ = m_coord[2] / 100;
 80002cc:	17db      	asrs	r3, r3, #31
		int8_t thisY = m_coord[1] / 100;
 80002ce:	fb80 7001 	smull	r7, r0, r0, r1
		int8_t thisZ = m_coord[2] / 100;
 80002d2:	ebc3 1365 	rsb	r3, r3, r5, asr #5
		setDot(thisX, 		thisY, 		thisZ, 		1);
 80002d6:	b2db      	uxtb	r3, r3
		int8_t thisX = m_coord[0] / 100;
 80002d8:	17d2      	asrs	r2, r2, #31
    m_OutFrame[7 - z][x] &= ~(128 >> y); 							//сбрасываем бит
 80002da:	f1c3 0507 	rsb	r5, r3, #7
		int8_t thisX = m_coord[0] / 100;
 80002de:	ebc2 1266 	rsb	r2, r2, r6, asr #5
		int8_t thisY = m_coord[1] / 100;
 80002e2:	17c9      	asrs	r1, r1, #31
    m_OutFrame[7 - z][x] |= (128 >> y) * set_num; 						//устанавливаем 0 или 1 в зависимости от set_num
 80002e4:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
		setDot(thisX, 		thisY, 		thisZ, 		1);
 80002e8:	b2d2      	uxtb	r2, r2
		int8_t thisY = m_coord[1] / 100;
 80002ea:	ebc1 1160 	rsb	r1, r1, r0, asr #5
    m_OutFrame[7 - z][x] |= (128 >> y) * set_num; 						//устанавливаем 0 или 1 в зависимости от set_num
 80002ee:	eb05 0c02 	add.w	ip, r5, r2
		setDot(thisX, 		thisY, 		thisZ, 		1);
 80002f2:	b2c9      	uxtb	r1, r1
    m_OutFrame[7 - z][x] |= (128 >> y) * set_num; 						//устанавливаем 0 или 1 в зависимости от set_num
 80002f4:	f89c 0008 	ldrb.w	r0, [ip, #8]
    m_OutFrame[7 - z][x] &= ~(128 >> y); 							//сбрасываем бит
 80002f8:	fa4e f601 	asr.w	r6, lr, r1
 80002fc:	b276      	sxtb	r6, r6
		setDot(thisX + 1, 	thisY, 		thisZ, 		1);
 80002fe:	1c57      	adds	r7, r2, #1
    m_OutFrame[7 - z][x] |= (128 >> y) * set_num; 						//устанавливаем 0 или 1 в зависимости от set_num
 8000300:	4330      	orrs	r0, r6
    m_OutFrame[7 - z][x] &= ~(128 >> y); 							//сбрасываем бит
 8000302:	b2ff      	uxtb	r7, r7
    m_OutFrame[7 - z][x] |= (128 >> y) * set_num; 						//устанавливаем 0 или 1 в зависимости от set_num
 8000304:	f88c 0008 	strb.w	r0, [ip, #8]
 8000308:	443d      	add	r5, r7
 800030a:	f895 8008 	ldrb.w	r8, [r5, #8]
		setDot(thisX, 		thisY + 1, 	thisZ, 		1);
 800030e:	1c48      	adds	r0, r1, #1
    m_OutFrame[7 - z][x] |= (128 >> y) * set_num; 						//устанавливаем 0 или 1 в зависимости от set_num
 8000310:	ea46 0108 	orr.w	r1, r6, r8
 8000314:	7229      	strb	r1, [r5, #8]
		setDot(thisX, 		thisY, 		thisZ + 1, 	1);
 8000316:	3301      	adds	r3, #1
    m_OutFrame[7 - z][x] &= ~(128 >> y); 							//сбрасываем бит
 8000318:	b2c0      	uxtb	r0, r0
    m_OutFrame[7 - z][x] |= (128 >> y) * set_num; 						//устанавливаем 0 или 1 в зависимости от set_num
 800031a:	f89c 1008 	ldrb.w	r1, [ip, #8]
    m_OutFrame[7 - z][x] &= ~(128 >> y); 							//сбрасываем бит
 800031e:	b2db      	uxtb	r3, r3
 8000320:	fa4e f000 	asr.w	r0, lr, r0
 8000324:	b240      	sxtb	r0, r0
 8000326:	f1c3 0307 	rsb	r3, r3, #7
    m_OutFrame[7 - z][x] |= (128 >> y) * set_num; 						//устанавливаем 0 или 1 в зависимости от set_num
 800032a:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800032e:	4301      	orrs	r1, r0
 8000330:	f88c 1008 	strb.w	r1, [ip, #8]
 8000334:	441a      	add	r2, r3
 8000336:	7a11      	ldrb	r1, [r2, #8]
 8000338:	443b      	add	r3, r7
 800033a:	4331      	orrs	r1, r6
 800033c:	7211      	strb	r1, [r2, #8]
 800033e:	7a2c      	ldrb	r4, [r5, #8]
 8000340:	ea46 0100 	orr.w	r1, r6, r0
 8000344:	4304      	orrs	r4, r0
 8000346:	722c      	strb	r4, [r5, #8]
 8000348:	7a14      	ldrb	r4, [r2, #8]
 800034a:	4320      	orrs	r0, r4
 800034c:	7210      	strb	r0, [r2, #8]
 800034e:	7a1a      	ldrb	r2, [r3, #8]
 8000350:	4311      	orrs	r1, r2
 8000352:	7219      	strb	r1, [r3, #8]
}
 8000354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				m_coord[i] = (700 - 100);
 8000358:	f44f 7316 	mov.w	r3, #600	; 0x258
				m_vector[i] = -m_vector[i];
 800035c:	4252      	negs	r2, r2
 800035e:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
				m_coord[i] = (700 - 100);
 8000362:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
				m_vector[i] += getRandomNumber(0, 5) - 3;
 8000366:	2105      	movs	r1, #5
 8000368:	2000      	movs	r0, #0
 800036a:	f001 faf3 	bl	8001954 <_Z15getRandomNumberii>
 800036e:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
 8000372:	1ec3      	subs	r3, r0, #3
 8000374:	4413      	add	r3, r2
 8000376:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 800037a:	e777      	b.n	800026c <_ZN4Cube11walkingCubeEv+0x80>
				m_coord[i] = (700 - 100);
 800037c:	f44f 7316 	mov.w	r3, #600	; 0x258
				m_vector[i] = -m_vector[i];
 8000380:	4252      	negs	r2, r2
 8000382:	f884 2052 	strb.w	r2, [r4, #82]	; 0x52
				m_coord[i] = (700 - 100);
 8000386:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
				m_vector[i] += getRandomNumber(0, 5) - 3;
 800038a:	2105      	movs	r1, #5
 800038c:	2000      	movs	r0, #0
 800038e:	f001 fae1 	bl	8001954 <_Z15getRandomNumberii>
 8000392:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
 8000396:	1ec2      	subs	r2, r0, #3
 8000398:	4413      	add	r3, r2
 800039a:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
 800039e:	e782      	b.n	80002a6 <_ZN4Cube11walkingCubeEv+0xba>
				m_coord[i] = (700 - 100);
 80003a0:	f44f 7316 	mov.w	r3, #600	; 0x258
				m_vector[i] = -m_vector[i];
 80003a4:	4252      	negs	r2, r2
 80003a6:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
				m_coord[i] = (700 - 100);
 80003aa:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
				m_vector[i] += getRandomNumber(0, 5) - 3;
 80003ae:	2105      	movs	r1, #5
 80003b0:	2000      	movs	r0, #0
 80003b2:	f001 facf 	bl	8001954 <_Z15getRandomNumberii>
 80003b6:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
 80003ba:	1ec3      	subs	r3, r0, #3
 80003bc:	4413      	add	r3, r2
 80003be:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
 80003c2:	e762      	b.n	800028a <_ZN4Cube11walkingCubeEv+0x9e>
				m_coord[i] = 1;
 80003c4:	2301      	movs	r3, #1
				m_vector[i] = -m_vector[i];
 80003c6:	4252      	negs	r2, r2
 80003c8:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
				m_coord[i] = 1;
 80003cc:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
				m_vector[i] += getRandomNumber(0, 5) - 3;
 80003d0:	2105      	movs	r1, #5
 80003d2:	2000      	movs	r0, #0
 80003d4:	f001 fabe 	bl	8001954 <_Z15getRandomNumberii>
 80003d8:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80003dc:	1ec2      	subs	r2, r0, #3
 80003de:	441a      	add	r2, r3
 80003e0:	b252      	sxtb	r2, r2
 80003e2:	f9b4 304c 	ldrsh.w	r3, [r4, #76]	; 0x4c
 80003e6:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
 80003ea:	e74a      	b.n	8000282 <_ZN4Cube11walkingCubeEv+0x96>
				m_coord[i] = 1;
 80003ec:	2301      	movs	r3, #1
				m_vector[i] = -m_vector[i];
 80003ee:	4252      	negs	r2, r2
 80003f0:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
				m_coord[i] = 1;
 80003f4:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
				m_vector[i] += getRandomNumber(0, 5) - 3;
 80003f8:	2105      	movs	r1, #5
 80003fa:	2000      	movs	r0, #0
 80003fc:	f001 faaa 	bl	8001954 <_Z15getRandomNumberii>
 8000400:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8000404:	1ec2      	subs	r2, r0, #3
 8000406:	4413      	add	r3, r2
 8000408:	b25a      	sxtb	r2, r3
 800040a:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
 800040e:	f9b4 304a 	ldrsh.w	r3, [r4, #74]	; 0x4a
 8000412:	e728      	b.n	8000266 <_ZN4Cube11walkingCubeEv+0x7a>
				m_coord[i] = 1;
 8000414:	2301      	movs	r3, #1
				m_vector[i] = -m_vector[i];
 8000416:	4252      	negs	r2, r2
 8000418:	f884 2052 	strb.w	r2, [r4, #82]	; 0x52
				m_coord[i] = 1;
 800041c:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
				m_vector[i] += getRandomNumber(0, 5) - 3;
 8000420:	2105      	movs	r1, #5
 8000422:	2000      	movs	r0, #0
 8000424:	f001 fa96 	bl	8001954 <_Z15getRandomNumberii>
 8000428:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
 800042c:	1ec2      	subs	r2, r0, #3
 800042e:	4413      	add	r3, r2
 8000430:	b25a      	sxtb	r2, r3
 8000432:	f884 2052 	strb.w	r2, [r4, #82]	; 0x52
 8000436:	f9b4 304e 	ldrsh.w	r3, [r4, #78]	; 0x4e
 800043a:	e731      	b.n	80002a0 <_ZN4Cube11walkingCubeEv+0xb4>
 800043c:	51eb851f 	.word	0x51eb851f

08000440 <_ZN4Cube4textEv>:
{
 8000440:	b538      	push	{r3, r4, r5, lr}
	if (m_IsModeSwitched)
 8000442:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
{
 8000446:	4604      	mov	r4, r0
	if (m_IsModeSwitched)
 8000448:	b173      	cbz	r3, 8000468 <_ZN4Cube4textEv+0x28>
		if(Text.stringPtr == nullptr)
 800044a:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800044c:	b19b      	cbz	r3, 8000476 <_ZN4Cube4textEv+0x36>
		m_IsModeSwitched = 0;
 800044e:	2500      	movs	r5, #0
 8000450:	2240      	movs	r2, #64	; 0x40
 8000452:	f880 5049 	strb.w	r5, [r0, #73]	; 0x49
    for(uint8_t x = 0; x < 8; ++x)
 8000456:	4629      	mov	r1, r5
 8000458:	3008      	adds	r0, #8
 800045a:	f005 f95b 	bl	8005714 <memset>
		Text.charPosition = -1;
 800045e:	23ff      	movs	r3, #255	; 0xff
		Text.charCounter = 0;
 8000460:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
		Text.charPosition = -1;
 8000464:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
	if (HAL_GetTick() - m_lastTrigger > m_modeTimer)
 8000468:	f001 fe6e 	bl	8002148 <HAL_GetTick>
 800046c:	e9d4 2319 	ldrd	r2, r3, [r4, #100]	; 0x64
 8000470:	1a80      	subs	r0, r0, r2
 8000472:	4298      	cmp	r0, r3
 8000474:	d800      	bhi.n	8000478 <_ZN4Cube4textEv+0x38>
}
 8000476:	bd38      	pop	{r3, r4, r5, pc}
		m_lastTrigger = HAL_GetTick();
 8000478:	f001 fe66 	bl	8002148 <HAL_GetTick>
 800047c:	2207      	movs	r2, #7
 800047e:	6660      	str	r0, [r4, #100]	; 0x64
{
	switch(dir)
	{
		case POS_X:													//Каждый столбец начиная со восьмого копирует то, что
																	//находится в левом столбце
			for (uint8_t x = 7; x > 0; --x)
 8000480:	f104 0108 	add.w	r1, r4, #8
 8000484:	f104 0009 	add.w	r0, r4, #9
 8000488:	f005 f92a 	bl	80056e0 <memmove>
 800048c:	2207      	movs	r2, #7
 800048e:	f104 0110 	add.w	r1, r4, #16
 8000492:	f104 0011 	add.w	r0, r4, #17
 8000496:	f005 f923 	bl	80056e0 <memmove>
 800049a:	2207      	movs	r2, #7
 800049c:	f104 0118 	add.w	r1, r4, #24
 80004a0:	f104 0019 	add.w	r0, r4, #25
 80004a4:	f005 f91c 	bl	80056e0 <memmove>
 80004a8:	2207      	movs	r2, #7
 80004aa:	f104 0120 	add.w	r1, r4, #32
 80004ae:	f104 0021 	add.w	r0, r4, #33	; 0x21
 80004b2:	f005 f915 	bl	80056e0 <memmove>
 80004b6:	2207      	movs	r2, #7
 80004b8:	f104 0128 	add.w	r1, r4, #40	; 0x28
 80004bc:	f104 0029 	add.w	r0, r4, #41	; 0x29
 80004c0:	f005 f90e 	bl	80056e0 <memmove>
 80004c4:	2207      	movs	r2, #7
 80004c6:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80004ca:	f104 0031 	add.w	r0, r4, #49	; 0x31
 80004ce:	f005 f907 	bl	80056e0 <memmove>
 80004d2:	2207      	movs	r2, #7
 80004d4:	f104 0138 	add.w	r1, r4, #56	; 0x38
 80004d8:	f104 0039 	add.w	r0, r4, #57	; 0x39
 80004dc:	f005 f900 	bl	80056e0 <memmove>
 80004e0:	2207      	movs	r2, #7
 80004e2:	f104 0140 	add.w	r1, r4, #64	; 0x40
 80004e6:	f104 0041 	add.w	r0, r4, #65	; 0x41
 80004ea:	f005 f8f9 	bl	80056e0 <memmove>
					m_OutFrame[z][x] = m_OutFrame[z][x - 1];
				}
			}
			for (uint8_t i = 0; i < 8; ++i)							//Затем все что в самом левом столбце затирается
			{
				m_OutFrame[i][0] = 0;
 80004ee:	2200      	movs	r2, #0
		if(++Text.charPosition == 7)
 80004f0:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
				m_OutFrame[i][0] = 0;
 80004f4:	7222      	strb	r2, [r4, #8]
		if(++Text.charPosition == 7)
 80004f6:	3301      	adds	r3, #1
 80004f8:	b2db      	uxtb	r3, r3
 80004fa:	2b07      	cmp	r3, #7
 80004fc:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
				m_OutFrame[i][0] = 0;
 8000500:	7422      	strb	r2, [r4, #16]
 8000502:	7622      	strb	r2, [r4, #24]
 8000504:	f884 2020 	strb.w	r2, [r4, #32]
 8000508:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
 800050c:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
 8000510:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
 8000514:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
		if(++Text.charPosition == 7)
 8000518:	d004      	beq.n	8000524 <_ZN4Cube4textEv+0xe4>
		if(Text.charPosition == 0)
 800051a:	2b00      	cmp	r3, #0
 800051c:	d1ab      	bne.n	8000476 <_ZN4Cube4textEv+0x36>
 800051e:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8000522:	e011      	b.n	8000548 <_ZN4Cube4textEv+0x108>
			if(++Text.charCounter > Text.lengh - 1)
 8000524:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8000528:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
 800052c:	3301      	adds	r3, #1
 800052e:	b2db      	uxtb	r3, r3
 8000530:	4299      	cmp	r1, r3
 8000532:	bf9c      	itt	ls
 8000534:	4613      	movls	r3, r2
				Text.charCounter = 0;
 8000536:	f884 2061 	strbls.w	r2, [r4, #97]	; 0x61
			Text.charPosition = 0;
 800053a:	f04f 0200 	mov.w	r2, #0
			if(++Text.charCounter > Text.lengh - 1)
 800053e:	bf88      	it	hi
 8000540:	f884 3061 	strbhi.w	r3, [r4, #97]	; 0x61
			Text.charPosition = 0;
 8000544:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
		if(Text.charPosition == 0)
 8000548:	2501      	movs	r5, #1
 800054a:	e001      	b.n	8000550 <_ZN4Cube4textEv+0x110>
 800054c:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
				m_OutFrame[i][0] = getFont(Text.stringPtr[Text.charCounter], i);
 8000550:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8000552:	1e6a      	subs	r2, r5, #1
 8000554:	4620      	mov	r0, r4
 8000556:	5cc9      	ldrb	r1, [r1, r3]
 8000558:	b2d2      	uxtb	r2, r2
 800055a:	f001 f973 	bl	8001844 <_ZN4Cube7getFontEhh>
 800055e:	f804 0035 	strb.w	r0, [r4, r5, lsl #3]
			for(uint8_t i = 0; i < 8; ++i)
 8000562:	3501      	adds	r5, #1
 8000564:	2d09      	cmp	r5, #9
 8000566:	d1f1      	bne.n	800054c <_ZN4Cube4textEv+0x10c>
}
 8000568:	bd38      	pop	{r3, r4, r5, pc}
 800056a:	bf00      	nop

0800056c <_ZN4Cube4rainEv>:
{
 800056c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (m_IsModeSwitched)
 8000570:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
{
 8000574:	4604      	mov	r4, r0
	if (m_IsModeSwitched)
 8000576:	b153      	cbz	r3, 800058e <_ZN4Cube4rainEv+0x22>
 8000578:	2240      	movs	r2, #64	; 0x40
 800057a:	2100      	movs	r1, #0
 800057c:	3008      	adds	r0, #8
 800057e:	f005 f8c9 	bl	8005714 <memset>
		m_IsModeSwitched = 0;
 8000582:	2300      	movs	r3, #0
 8000584:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
		m_lastTrigger = HAL_GetTick();
 8000588:	f001 fdde 	bl	8002148 <HAL_GetTick>
 800058c:	6660      	str	r0, [r4, #100]	; 0x64
	if (HAL_GetTick() - m_lastTrigger > m_modeTimer)
 800058e:	f001 fddb 	bl	8002148 <HAL_GetTick>
 8000592:	e9d4 2319 	ldrd	r2, r3, [r4, #100]	; 0x64
 8000596:	1a80      	subs	r0, r0, r2
 8000598:	4298      	cmp	r0, r3
 800059a:	d801      	bhi.n	80005a0 <_ZN4Cube4rainEv+0x34>
}
 800059c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		m_lastTrigger = HAL_GetTick();
 80005a0:	f001 fdd2 	bl	8002148 <HAL_GetTick>
		case NEG_Y:
			for (uint8_t x = 0; x < 8; ++x)							//Каждая ячейка сдвигатся на 1 влево
			{
				for (uint8_t z = 0; z < 8; ++z)
				{
					m_OutFrame[z][x] <<= 1;
 80005a4:	7c21      	ldrb	r1, [r4, #16]
 80005a6:	7e22      	ldrb	r2, [r4, #24]
 80005a8:	f894 3020 	ldrb.w	r3, [r4, #32]
 80005ac:	0049      	lsls	r1, r1, #1
 80005ae:	0052      	lsls	r2, r2, #1
 80005b0:	005b      	lsls	r3, r3, #1
 80005b2:	f894 6028 	ldrb.w	r6, [r4, #40]	; 0x28
 80005b6:	f894 5030 	ldrb.w	r5, [r4, #48]	; 0x30
		m_lastTrigger = HAL_GetTick();
 80005ba:	6660      	str	r0, [r4, #100]	; 0x64
					m_OutFrame[z][x] <<= 1;
 80005bc:	7421      	strb	r1, [r4, #16]
 80005be:	f894 0038 	ldrb.w	r0, [r4, #56]	; 0x38
 80005c2:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
 80005c6:	7622      	strb	r2, [r4, #24]
 80005c8:	f884 3020 	strb.w	r3, [r4, #32]
 80005cc:	7a62      	ldrb	r2, [r4, #9]
 80005ce:	7c63      	ldrb	r3, [r4, #17]
 80005d0:	0076      	lsls	r6, r6, #1
 80005d2:	006d      	lsls	r5, r5, #1
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	0049      	lsls	r1, r1, #1
 80005d8:	0052      	lsls	r2, r2, #1
 80005da:	005b      	lsls	r3, r3, #1
 80005dc:	7a27      	ldrb	r7, [r4, #8]
 80005de:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
 80005e2:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
 80005e6:	7e66      	ldrb	r6, [r4, #25]
 80005e8:	f894 5021 	ldrb.w	r5, [r4, #33]	; 0x21
 80005ec:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
 80005f0:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
 80005f4:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
 80005f8:	f894 1031 	ldrb.w	r1, [r4, #49]	; 0x31
 80005fc:	7262      	strb	r2, [r4, #9]
 80005fe:	7463      	strb	r3, [r4, #17]
 8000600:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8000604:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8000608:	0076      	lsls	r6, r6, #1
 800060a:	006d      	lsls	r5, r5, #1
 800060c:	0040      	lsls	r0, r0, #1
 800060e:	0049      	lsls	r1, r1, #1
 8000610:	0052      	lsls	r2, r2, #1
 8000612:	005b      	lsls	r3, r3, #1
 8000614:	007f      	lsls	r7, r7, #1
 8000616:	7666      	strb	r6, [r4, #25]
 8000618:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
 800061c:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
 8000620:	f884 1031 	strb.w	r1, [r4, #49]	; 0x31
 8000624:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
 8000628:	7227      	strb	r7, [r4, #8]
 800062a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800062e:	7aa0      	ldrb	r0, [r4, #10]
 8000630:	7ca1      	ldrb	r1, [r4, #18]
 8000632:	7ea2      	ldrb	r2, [r4, #26]
 8000634:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8000638:	0040      	lsls	r0, r0, #1
 800063a:	0049      	lsls	r1, r1, #1
 800063c:	0052      	lsls	r2, r2, #1
 800063e:	005b      	lsls	r3, r3, #1
 8000640:	f894 602a 	ldrb.w	r6, [r4, #42]	; 0x2a
 8000644:	f894 5032 	ldrb.w	r5, [r4, #50]	; 0x32
 8000648:	72a0      	strb	r0, [r4, #10]
 800064a:	74a1      	strb	r1, [r4, #18]
 800064c:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
 8000650:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
 8000654:	76a2      	strb	r2, [r4, #26]
 8000656:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 800065a:	7ae2      	ldrb	r2, [r4, #11]
 800065c:	7ce3      	ldrb	r3, [r4, #19]
 800065e:	0076      	lsls	r6, r6, #1
 8000660:	006d      	lsls	r5, r5, #1
 8000662:	0040      	lsls	r0, r0, #1
 8000664:	0049      	lsls	r1, r1, #1
 8000666:	0052      	lsls	r2, r2, #1
 8000668:	005b      	lsls	r3, r3, #1
 800066a:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
 800066e:	f884 5032 	strb.w	r5, [r4, #50]	; 0x32
 8000672:	7ee6      	ldrb	r6, [r4, #27]
 8000674:	f894 5023 	ldrb.w	r5, [r4, #35]	; 0x23
 8000678:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
 800067c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8000680:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
 8000684:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
 8000688:	72e2      	strb	r2, [r4, #11]
 800068a:	74e3      	strb	r3, [r4, #19]
 800068c:	f894 203b 	ldrb.w	r2, [r4, #59]	; 0x3b
 8000690:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8000694:	0076      	lsls	r6, r6, #1
 8000696:	006d      	lsls	r5, r5, #1
 8000698:	0040      	lsls	r0, r0, #1
 800069a:	0049      	lsls	r1, r1, #1
 800069c:	0052      	lsls	r2, r2, #1
 800069e:	005b      	lsls	r3, r3, #1
 80006a0:	76e6      	strb	r6, [r4, #27]
 80006a2:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
 80006a6:	f884 1033 	strb.w	r1, [r4, #51]	; 0x33
 80006aa:	f884 203b 	strb.w	r2, [r4, #59]	; 0x3b
 80006ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80006b2:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
 80006b6:	7b20      	ldrb	r0, [r4, #12]
 80006b8:	7d21      	ldrb	r1, [r4, #20]
 80006ba:	7f22      	ldrb	r2, [r4, #28]
 80006bc:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80006c0:	0040      	lsls	r0, r0, #1
 80006c2:	0049      	lsls	r1, r1, #1
 80006c4:	0052      	lsls	r2, r2, #1
 80006c6:	005b      	lsls	r3, r3, #1
 80006c8:	f894 602c 	ldrb.w	r6, [r4, #44]	; 0x2c
 80006cc:	f894 5034 	ldrb.w	r5, [r4, #52]	; 0x34
 80006d0:	7320      	strb	r0, [r4, #12]
 80006d2:	7521      	strb	r1, [r4, #20]
 80006d4:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
 80006d8:	f894 1044 	ldrb.w	r1, [r4, #68]	; 0x44
 80006dc:	7722      	strb	r2, [r4, #28]
 80006de:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 80006e2:	7b62      	ldrb	r2, [r4, #13]
 80006e4:	7d63      	ldrb	r3, [r4, #21]
 80006e6:	0076      	lsls	r6, r6, #1
 80006e8:	006d      	lsls	r5, r5, #1
 80006ea:	0040      	lsls	r0, r0, #1
 80006ec:	0049      	lsls	r1, r1, #1
 80006ee:	0052      	lsls	r2, r2, #1
 80006f0:	005b      	lsls	r3, r3, #1
 80006f2:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
 80006f6:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 80006fa:	7f66      	ldrb	r6, [r4, #29]
 80006fc:	f894 5025 	ldrb.w	r5, [r4, #37]	; 0x25
 8000700:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 8000704:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8000708:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
 800070c:	f894 1035 	ldrb.w	r1, [r4, #53]	; 0x35
 8000710:	7362      	strb	r2, [r4, #13]
 8000712:	7563      	strb	r3, [r4, #21]
 8000714:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8000718:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800071c:	0076      	lsls	r6, r6, #1
 800071e:	006d      	lsls	r5, r5, #1
 8000720:	0040      	lsls	r0, r0, #1
 8000722:	0049      	lsls	r1, r1, #1
 8000724:	0052      	lsls	r2, r2, #1
 8000726:	005b      	lsls	r3, r3, #1
 8000728:	7766      	strb	r6, [r4, #29]
 800072a:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
 800072e:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
 8000732:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 8000736:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800073a:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
 800073e:	7ba0      	ldrb	r0, [r4, #14]
 8000740:	7da1      	ldrb	r1, [r4, #22]
 8000742:	7fa2      	ldrb	r2, [r4, #30]
 8000744:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8000748:	0040      	lsls	r0, r0, #1
 800074a:	0049      	lsls	r1, r1, #1
 800074c:	0052      	lsls	r2, r2, #1
 800074e:	005b      	lsls	r3, r3, #1
 8000750:	f894 602e 	ldrb.w	r6, [r4, #46]	; 0x2e
 8000754:	f894 5036 	ldrb.w	r5, [r4, #54]	; 0x36
 8000758:	73a0      	strb	r0, [r4, #14]
 800075a:	75a1      	strb	r1, [r4, #22]
 800075c:	f894 003e 	ldrb.w	r0, [r4, #62]	; 0x3e
 8000760:	f894 1046 	ldrb.w	r1, [r4, #70]	; 0x46
 8000764:	77a2      	strb	r2, [r4, #30]
 8000766:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
 800076a:	7be2      	ldrb	r2, [r4, #15]
 800076c:	7de3      	ldrb	r3, [r4, #23]
 800076e:	0076      	lsls	r6, r6, #1
 8000770:	006d      	lsls	r5, r5, #1
 8000772:	0040      	lsls	r0, r0, #1
 8000774:	0049      	lsls	r1, r1, #1
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	005b      	lsls	r3, r3, #1
 800077a:	f884 602e 	strb.w	r6, [r4, #46]	; 0x2e
 800077e:	f884 5036 	strb.w	r5, [r4, #54]	; 0x36
 8000782:	7fe6      	ldrb	r6, [r4, #31]
 8000784:	f894 5027 	ldrb.w	r5, [r4, #39]	; 0x27
 8000788:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
 800078c:	f884 1046 	strb.w	r1, [r4, #70]	; 0x46
 8000790:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
 8000794:	f894 1037 	ldrb.w	r1, [r4, #55]	; 0x37
 8000798:	73e2      	strb	r2, [r4, #15]
 800079a:	75e3      	strb	r3, [r4, #23]
 800079c:	f894 203f 	ldrb.w	r2, [r4, #63]	; 0x3f
 80007a0:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
 80007a4:	0076      	lsls	r6, r6, #1
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	0049      	lsls	r1, r1, #1
 80007aa:	0052      	lsls	r2, r2, #1
 80007ac:	005b      	lsls	r3, r3, #1
 80007ae:	006d      	lsls	r5, r5, #1
 80007b0:	77e6      	strb	r6, [r4, #31]
 80007b2:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
 80007b6:	f884 1037 	strb.w	r1, [r4, #55]	; 0x37
		uint8_t numDrops = getRandomNumber(0, 4);
 80007ba:	2000      	movs	r0, #0
 80007bc:	2104      	movs	r1, #4
					m_OutFrame[z][x] <<= 1;
 80007be:	f884 5027 	strb.w	r5, [r4, #39]	; 0x27
 80007c2:	f884 203f 	strb.w	r2, [r4, #63]	; 0x3f
 80007c6:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
		uint8_t numDrops = getRandomNumber(0, 4);
 80007ca:	f001 f8c3 	bl	8001954 <_Z15getRandomNumberii>
		for (uint8_t i = 0; i < numDrops; ++i)
 80007ce:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
 80007d2:	f43f aee3 	beq.w	800059c <_ZN4Cube4rainEv+0x30>
 80007d6:	f04f 0800 	mov.w	r8, #0
    m_OutFrame[7 - z][x] &= ~(128 >> y); 							//сбрасываем бит
 80007da:	2780      	movs	r7, #128	; 0x80
			setDot(getRandomNumber(0, 7), getRandomNumber(0, 7), 7, 1);
 80007dc:	2107      	movs	r1, #7
 80007de:	2000      	movs	r0, #0
 80007e0:	f001 f8b8 	bl	8001954 <_Z15getRandomNumberii>
 80007e4:	4605      	mov	r5, r0
 80007e6:	2107      	movs	r1, #7
 80007e8:	2000      	movs	r0, #0
 80007ea:	f001 f8b3 	bl	8001954 <_Z15getRandomNumberii>
    m_OutFrame[7 - z][x] &= ~(128 >> y); 							//сбрасываем бит
 80007ee:	b2eb      	uxtb	r3, r5
    m_OutFrame[7 - z][x] |= (128 >> y) * set_num; 						//устанавливаем 0 или 1 в зависимости от set_num
 80007f0:	4423      	add	r3, r4
 80007f2:	7a19      	ldrb	r1, [r3, #8]
    m_OutFrame[7 - z][x] &= ~(128 >> y); 							//сбрасываем бит
 80007f4:	b2c2      	uxtb	r2, r0
 80007f6:	f108 0801 	add.w	r8, r8, #1
 80007fa:	fa47 f202 	asr.w	r2, r7, r2
    m_OutFrame[7 - z][x] |= (128 >> y) * set_num; 						//устанавливаем 0 или 1 в зависимости от set_num
 80007fe:	430a      	orrs	r2, r1
		for (uint8_t i = 0; i < numDrops; ++i)
 8000800:	fa5f f188 	uxtb.w	r1, r8
 8000804:	428e      	cmp	r6, r1
    m_OutFrame[7 - z][x] |= (128 >> y) * set_num; 						//устанавливаем 0 или 1 в зависимости от set_num
 8000806:	721a      	strb	r2, [r3, #8]
		for (uint8_t i = 0; i < numDrops; ++i)
 8000808:	d8e8      	bhi.n	80007dc <_ZN4Cube4rainEv+0x270>
}
 800080a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800080e:	bf00      	nop

08000810 <_ZN4Cube9lightCubeEv>:
    if(m_IsModeSwitched)
 8000810:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
 8000814:	b153      	cbz	r3, 800082c <_ZN4Cube9lightCubeEv+0x1c>
{
 8000816:	b510      	push	{r4, lr}
 8000818:	2240      	movs	r2, #64	; 0x40
 800081a:	4604      	mov	r4, r0
 800081c:	21ff      	movs	r1, #255	; 0xff
 800081e:	3008      	adds	r0, #8
 8000820:	f004 ff78 	bl	8005714 <memset>
    	m_IsModeSwitched = 0;
 8000824:	2300      	movs	r3, #0
 8000826:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
}
 800082a:	bd10      	pop	{r4, pc}
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop

08000830 <_ZN4Cube10printFrameEv>:
{
 8000830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000834:	4607      	mov	r7, r0
 8000836:	2507      	movs	r5, #7
		uint8_t currentLayer = ~(128 >> (7 - z));
 8000838:	f04f 0c80 	mov.w	ip, #128	; 0x80
				GPIOA -> BSRR |= 1 << (16 * ((m_OutFrame[7 - z][x] >> y) & 1 ));
 800083c:	2001      	movs	r0, #1
		RESETRCLK;
 800083e:	4ba6      	ldr	r3, [pc, #664]	; (8000ad8 <_ZN4Cube10printFrameEv+0x2a8>)
 8000840:	f107 0447 	add.w	r4, r7, #71	; 0x47
 8000844:	eb07 0b05 	add.w	fp, r7, r5
		uint8_t currentLayer = ~(128 >> (7 - z));
 8000848:	fa4c f205 	asr.w	r2, ip, r5
			GPIOA -> BSRR |= 1 << (16 * !((currentLayer >> i) & 1));
 800084c:	f012 0f01 	tst.w	r2, #1
 8000850:	bf14      	ite	ne
 8000852:	f44f 3980 	movne.w	r9, #65536	; 0x10000
 8000856:	f04f 0901 	moveq.w	r9, #1
 800085a:	f012 0f02 	tst.w	r2, #2
 800085e:	bf0c      	ite	eq
 8000860:	f04f 0801 	moveq.w	r8, #1
 8000864:	f44f 3880 	movne.w	r8, #65536	; 0x10000
		RESETRCLK;
 8000868:	6919      	ldr	r1, [r3, #16]
			GPIOA -> BSRR |= 1 << (16 * !((currentLayer >> i) & 1));
 800086a:	f012 0f04 	tst.w	r2, #4
 800086e:	bf0c      	ite	eq
 8000870:	f04f 0e01 	moveq.w	lr, #1
 8000874:	f44f 3e80 	movne.w	lr, #65536	; 0x10000
		RESETRCLK;
 8000878:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800087c:	6119      	str	r1, [r3, #16]
			RESETSERCLK;
 800087e:	6919      	ldr	r1, [r3, #16]
			GPIOA -> BSRR |= 1 << (16 * !((currentLayer >> i) & 1));
 8000880:	f012 0f08 	tst.w	r2, #8
			RESETSERCLK;
 8000884:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
 8000888:	6119      	str	r1, [r3, #16]
			GPIOA -> BSRR |= 1 << (16 * !((currentLayer >> i) & 1));
 800088a:	691e      	ldr	r6, [r3, #16]
 800088c:	bf08      	it	eq
 800088e:	2101      	moveq	r1, #1
 8000890:	ea46 0609 	orr.w	r6, r6, r9
 8000894:	611e      	str	r6, [r3, #16]
			SETSERCLK;
 8000896:	691e      	ldr	r6, [r3, #16]
			GPIOA -> BSRR |= 1 << (16 * !((currentLayer >> i) & 1));
 8000898:	bf18      	it	ne
 800089a:	f44f 3180 	movne.w	r1, #65536	; 0x10000
			SETSERCLK;
 800089e:	f046 0604 	orr.w	r6, r6, #4
 80008a2:	611e      	str	r6, [r3, #16]
			RESETSERCLK;
 80008a4:	691e      	ldr	r6, [r3, #16]
			GPIOA -> BSRR |= 1 << (16 * !((currentLayer >> i) & 1));
 80008a6:	f012 0f10 	tst.w	r2, #16
			RESETSERCLK;
 80008aa:	f446 2680 	orr.w	r6, r6, #262144	; 0x40000
 80008ae:	611e      	str	r6, [r3, #16]
			GPIOA -> BSRR |= 1 << (16 * !((currentLayer >> i) & 1));
 80008b0:	691e      	ldr	r6, [r3, #16]
 80008b2:	bf08      	it	eq
 80008b4:	f04f 0a01 	moveq.w	sl, #1
 80008b8:	ea46 0608 	orr.w	r6, r6, r8
 80008bc:	611e      	str	r6, [r3, #16]
			SETSERCLK;
 80008be:	691e      	ldr	r6, [r3, #16]
			GPIOA -> BSRR |= 1 << (16 * !((currentLayer >> i) & 1));
 80008c0:	bf18      	it	ne
 80008c2:	f44f 3a80 	movne.w	sl, #65536	; 0x10000
			SETSERCLK;
 80008c6:	f046 0604 	orr.w	r6, r6, #4
 80008ca:	611e      	str	r6, [r3, #16]
			RESETSERCLK;
 80008cc:	691e      	ldr	r6, [r3, #16]
			GPIOA -> BSRR |= 1 << (16 * !((currentLayer >> i) & 1));
 80008ce:	f012 0f20 	tst.w	r2, #32
			RESETSERCLK;
 80008d2:	f446 2680 	orr.w	r6, r6, #262144	; 0x40000
 80008d6:	611e      	str	r6, [r3, #16]
			GPIOA -> BSRR |= 1 << (16 * !((currentLayer >> i) & 1));
 80008d8:	691e      	ldr	r6, [r3, #16]
 80008da:	bf08      	it	eq
 80008dc:	f04f 0901 	moveq.w	r9, #1
 80008e0:	ea46 060e 	orr.w	r6, r6, lr
 80008e4:	611e      	str	r6, [r3, #16]
			SETSERCLK;
 80008e6:	691e      	ldr	r6, [r3, #16]
			GPIOA -> BSRR |= 1 << (16 * !((currentLayer >> i) & 1));
 80008e8:	bf18      	it	ne
 80008ea:	f44f 3980 	movne.w	r9, #65536	; 0x10000
			SETSERCLK;
 80008ee:	f046 0604 	orr.w	r6, r6, #4
 80008f2:	611e      	str	r6, [r3, #16]
			GPIOA -> BSRR |= 1 << (16 * !((currentLayer >> i) & 1));
 80008f4:	f012 0f40 	tst.w	r2, #64	; 0x40
 80008f8:	bf0c      	ite	eq
 80008fa:	f04f 0801 	moveq.w	r8, #1
 80008fe:	f44f 3880 	movne.w	r8, #65536	; 0x10000
 8000902:	f012 0f80 	tst.w	r2, #128	; 0x80
			RESETSERCLK;
 8000906:	691a      	ldr	r2, [r3, #16]
			GPIOA -> BSRR |= 1 << (16 * !((currentLayer >> i) & 1));
 8000908:	bf18      	it	ne
 800090a:	f44f 3e80 	movne.w	lr, #65536	; 0x10000
			RESETSERCLK;
 800090e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000912:	611a      	str	r2, [r3, #16]
			GPIOA -> BSRR |= 1 << (16 * !((currentLayer >> i) & 1));
 8000914:	691a      	ldr	r2, [r3, #16]
 8000916:	bf08      	it	eq
 8000918:	f04f 0e01 	moveq.w	lr, #1
 800091c:	430a      	orrs	r2, r1
 800091e:	611a      	str	r2, [r3, #16]
			SETSERCLK;
 8000920:	6919      	ldr	r1, [r3, #16]
 8000922:	f1a4 0608 	sub.w	r6, r4, #8
 8000926:	f041 0104 	orr.w	r1, r1, #4
 800092a:	6119      	str	r1, [r3, #16]
			RESETSERCLK;
 800092c:	6919      	ldr	r1, [r3, #16]
 800092e:	4632      	mov	r2, r6
 8000930:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
 8000934:	6119      	str	r1, [r3, #16]
			GPIOA -> BSRR |= 1 << (16 * !((currentLayer >> i) & 1));
 8000936:	6919      	ldr	r1, [r3, #16]
 8000938:	ea41 010a 	orr.w	r1, r1, sl
 800093c:	6119      	str	r1, [r3, #16]
			SETSERCLK;
 800093e:	6919      	ldr	r1, [r3, #16]
 8000940:	f041 0104 	orr.w	r1, r1, #4
 8000944:	6119      	str	r1, [r3, #16]
			RESETSERCLK;
 8000946:	6919      	ldr	r1, [r3, #16]
 8000948:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
 800094c:	6119      	str	r1, [r3, #16]
			GPIOA -> BSRR |= 1 << (16 * !((currentLayer >> i) & 1));
 800094e:	6919      	ldr	r1, [r3, #16]
 8000950:	ea41 0109 	orr.w	r1, r1, r9
 8000954:	6119      	str	r1, [r3, #16]
			SETSERCLK;
 8000956:	6919      	ldr	r1, [r3, #16]
 8000958:	f041 0104 	orr.w	r1, r1, #4
 800095c:	6119      	str	r1, [r3, #16]
			RESETSERCLK;
 800095e:	6919      	ldr	r1, [r3, #16]
 8000960:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
 8000964:	6119      	str	r1, [r3, #16]
			GPIOA -> BSRR |= 1 << (16 * !((currentLayer >> i) & 1));
 8000966:	6919      	ldr	r1, [r3, #16]
 8000968:	ea41 0108 	orr.w	r1, r1, r8
 800096c:	6119      	str	r1, [r3, #16]
			SETSERCLK;
 800096e:	6919      	ldr	r1, [r3, #16]
 8000970:	f041 0104 	orr.w	r1, r1, #4
 8000974:	6119      	str	r1, [r3, #16]
			RESETSERCLK;
 8000976:	6919      	ldr	r1, [r3, #16]
 8000978:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
 800097c:	6119      	str	r1, [r3, #16]
			GPIOA -> BSRR |= 1 << (16 * !((currentLayer >> i) & 1));
 800097e:	6919      	ldr	r1, [r3, #16]
 8000980:	ea41 010e 	orr.w	r1, r1, lr
 8000984:	6119      	str	r1, [r3, #16]
			SETSERCLK;
 8000986:	6919      	ldr	r1, [r3, #16]
 8000988:	f041 0104 	orr.w	r1, r1, #4
 800098c:	6119      	str	r1, [r3, #16]
				RESETSERCLK;
 800098e:	6919      	ldr	r1, [r3, #16]
 8000990:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
 8000994:	6119      	str	r1, [r3, #16]
				GPIOA -> BSRR |= 1 << (16 * ((m_OutFrame[7 - z][x] >> y) & 1 ));
 8000996:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800099a:	691f      	ldr	r7, [r3, #16]
 800099c:	f001 0101 	and.w	r1, r1, #1
 80009a0:	0109      	lsls	r1, r1, #4
 80009a2:	fa00 f101 	lsl.w	r1, r0, r1
 80009a6:	4339      	orrs	r1, r7
 80009a8:	6119      	str	r1, [r3, #16]
				SETSERCLK;
 80009aa:	6919      	ldr	r1, [r3, #16]
		for (uint8_t x = 0; x < 8; ++x)
 80009ac:	4294      	cmp	r4, r2
				SETSERCLK;
 80009ae:	f041 0104 	orr.w	r1, r1, #4
 80009b2:	6119      	str	r1, [r3, #16]
				RESETSERCLK;
 80009b4:	6919      	ldr	r1, [r3, #16]
 80009b6:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
 80009ba:	6119      	str	r1, [r3, #16]
				GPIOA -> BSRR |= 1 << (16 * ((m_OutFrame[7 - z][x] >> y) & 1 ));
 80009bc:	7811      	ldrb	r1, [r2, #0]
 80009be:	691f      	ldr	r7, [r3, #16]
 80009c0:	f3c1 0140 	ubfx	r1, r1, #1, #1
 80009c4:	ea4f 1101 	mov.w	r1, r1, lsl #4
 80009c8:	fa00 f101 	lsl.w	r1, r0, r1
 80009cc:	ea41 0107 	orr.w	r1, r1, r7
 80009d0:	6119      	str	r1, [r3, #16]
				SETSERCLK;
 80009d2:	6919      	ldr	r1, [r3, #16]
 80009d4:	f041 0104 	orr.w	r1, r1, #4
 80009d8:	6119      	str	r1, [r3, #16]
				RESETSERCLK;
 80009da:	6919      	ldr	r1, [r3, #16]
 80009dc:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
 80009e0:	6119      	str	r1, [r3, #16]
				GPIOA -> BSRR |= 1 << (16 * ((m_OutFrame[7 - z][x] >> y) & 1 ));
 80009e2:	7811      	ldrb	r1, [r2, #0]
 80009e4:	691f      	ldr	r7, [r3, #16]
 80009e6:	f3c1 0180 	ubfx	r1, r1, #2, #1
 80009ea:	ea4f 1101 	mov.w	r1, r1, lsl #4
 80009ee:	fa00 f101 	lsl.w	r1, r0, r1
 80009f2:	ea41 0107 	orr.w	r1, r1, r7
 80009f6:	6119      	str	r1, [r3, #16]
				SETSERCLK;
 80009f8:	6919      	ldr	r1, [r3, #16]
 80009fa:	f041 0104 	orr.w	r1, r1, #4
 80009fe:	6119      	str	r1, [r3, #16]
				RESETSERCLK;
 8000a00:	6919      	ldr	r1, [r3, #16]
 8000a02:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
 8000a06:	6119      	str	r1, [r3, #16]
				GPIOA -> BSRR |= 1 << (16 * ((m_OutFrame[7 - z][x] >> y) & 1 ));
 8000a08:	7811      	ldrb	r1, [r2, #0]
 8000a0a:	691f      	ldr	r7, [r3, #16]
 8000a0c:	f3c1 01c0 	ubfx	r1, r1, #3, #1
 8000a10:	ea4f 1101 	mov.w	r1, r1, lsl #4
 8000a14:	fa00 f101 	lsl.w	r1, r0, r1
 8000a18:	ea41 0107 	orr.w	r1, r1, r7
 8000a1c:	6119      	str	r1, [r3, #16]
				SETSERCLK;
 8000a1e:	6919      	ldr	r1, [r3, #16]
 8000a20:	f041 0104 	orr.w	r1, r1, #4
 8000a24:	6119      	str	r1, [r3, #16]
				RESETSERCLK;
 8000a26:	6919      	ldr	r1, [r3, #16]
 8000a28:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
 8000a2c:	6119      	str	r1, [r3, #16]
				GPIOA -> BSRR |= 1 << (16 * ((m_OutFrame[7 - z][x] >> y) & 1 ));
 8000a2e:	7811      	ldrb	r1, [r2, #0]
 8000a30:	691f      	ldr	r7, [r3, #16]
 8000a32:	f001 0110 	and.w	r1, r1, #16
 8000a36:	fa00 f101 	lsl.w	r1, r0, r1
 8000a3a:	ea41 0107 	orr.w	r1, r1, r7
 8000a3e:	6119      	str	r1, [r3, #16]
				SETSERCLK;
 8000a40:	6919      	ldr	r1, [r3, #16]
 8000a42:	f041 0104 	orr.w	r1, r1, #4
 8000a46:	6119      	str	r1, [r3, #16]
				RESETSERCLK;
 8000a48:	6919      	ldr	r1, [r3, #16]
 8000a4a:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
 8000a4e:	6119      	str	r1, [r3, #16]
				GPIOA -> BSRR |= 1 << (16 * ((m_OutFrame[7 - z][x] >> y) & 1 ));
 8000a50:	7811      	ldrb	r1, [r2, #0]
 8000a52:	691f      	ldr	r7, [r3, #16]
 8000a54:	f3c1 1140 	ubfx	r1, r1, #5, #1
 8000a58:	ea4f 1101 	mov.w	r1, r1, lsl #4
 8000a5c:	fa00 f101 	lsl.w	r1, r0, r1
 8000a60:	ea41 0107 	orr.w	r1, r1, r7
 8000a64:	6119      	str	r1, [r3, #16]
				SETSERCLK;
 8000a66:	6919      	ldr	r1, [r3, #16]
 8000a68:	f041 0104 	orr.w	r1, r1, #4
 8000a6c:	6119      	str	r1, [r3, #16]
				RESETSERCLK;
 8000a6e:	6919      	ldr	r1, [r3, #16]
 8000a70:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
 8000a74:	6119      	str	r1, [r3, #16]
				GPIOA -> BSRR |= 1 << (16 * ((m_OutFrame[7 - z][x] >> y) & 1 ));
 8000a76:	7811      	ldrb	r1, [r2, #0]
 8000a78:	691f      	ldr	r7, [r3, #16]
 8000a7a:	f3c1 1180 	ubfx	r1, r1, #6, #1
 8000a7e:	ea4f 1101 	mov.w	r1, r1, lsl #4
 8000a82:	fa00 f101 	lsl.w	r1, r0, r1
 8000a86:	ea41 0107 	orr.w	r1, r1, r7
 8000a8a:	6119      	str	r1, [r3, #16]
				SETSERCLK;
 8000a8c:	6919      	ldr	r1, [r3, #16]
 8000a8e:	f041 0104 	orr.w	r1, r1, #4
 8000a92:	6119      	str	r1, [r3, #16]
				RESETSERCLK;
 8000a94:	6919      	ldr	r1, [r3, #16]
 8000a96:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
 8000a9a:	6119      	str	r1, [r3, #16]
				GPIOA -> BSRR |= 1 << (16 * ((m_OutFrame[7 - z][x] >> y) & 1 ));
 8000a9c:	7811      	ldrb	r1, [r2, #0]
 8000a9e:	691f      	ldr	r7, [r3, #16]
 8000aa0:	ea4f 11d1 	mov.w	r1, r1, lsr #7
 8000aa4:	ea4f 1101 	mov.w	r1, r1, lsl #4
 8000aa8:	fa00 f101 	lsl.w	r1, r0, r1
 8000aac:	ea41 0107 	orr.w	r1, r1, r7
 8000ab0:	6119      	str	r1, [r3, #16]
				SETSERCLK;
 8000ab2:	6919      	ldr	r1, [r3, #16]
 8000ab4:	f041 0104 	orr.w	r1, r1, #4
 8000ab8:	6119      	str	r1, [r3, #16]
		for (uint8_t x = 0; x < 8; ++x)
 8000aba:	f47f af68 	bne.w	800098e <_ZN4Cube10printFrameEv+0x15e>
		SETRCLK;
 8000abe:	691a      	ldr	r2, [r3, #16]
	for (uint8_t z = 0; z < 8; ++z)
 8000ac0:	45b3      	cmp	fp, r6
		SETRCLK;
 8000ac2:	f042 0202 	orr.w	r2, r2, #2
 8000ac6:	4634      	mov	r4, r6
 8000ac8:	f105 35ff 	add.w	r5, r5, #4294967295
 8000acc:	611a      	str	r2, [r3, #16]
	for (uint8_t z = 0; z < 8; ++z)
 8000ace:	f47f aebb 	bne.w	8000848 <_ZN4Cube10printFrameEv+0x18>
}
 8000ad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40010800 	.word	0x40010800

08000adc <_ZN4Cube8setSpeedEs>:
    m_modeTimer = timer;
 8000adc:	6681      	str	r1, [r0, #104]	; 0x68
}
 8000ade:	4770      	bx	lr

08000ae0 <_ZN4Cube8getSpeedEv>:
}
 8000ae0:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8000ae2:	4770      	bx	lr

08000ae4 <_ZN4Cube7getModeEv>:
}
 8000ae4:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <_ZN4Cube10changeModeEv>:
	clearCube();
 8000aec:	2240      	movs	r2, #64	; 0x40
 8000aee:	2100      	movs	r1, #0
{
 8000af0:	b510      	push	{r4, lr}
 8000af2:	4604      	mov	r4, r0
    for(uint8_t x = 0; x < 8; ++x)
 8000af4:	3008      	adds	r0, #8
 8000af6:	f004 fe0d 	bl	8005714 <memset>
	m_IsModeSwitched = 1;
 8000afa:	2301      	movs	r3, #1
 8000afc:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	m_lastTrigger = HAL_GetTick();
 8000b00:	f001 fb22 	bl	8002148 <HAL_GetTick>
	ADC2->CR1 |= 1 << 5; //включаем ацп										//всегда устанавливаем бит в 1
 8000b04:	4926      	ldr	r1, [pc, #152]	; (8000ba0 <_ZN4Cube10changeModeEv+0xb4>)
	m_lastTrigger = HAL_GetTick();
 8000b06:	6660      	str	r0, [r4, #100]	; 0x64
	ADC2->CR1 |= 1 << 5; //включаем ацп										//всегда устанавливаем бит в 1
 8000b08:	684b      	ldr	r3, [r1, #4]
 8000b0a:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 8000b0e:	f043 0320 	orr.w	r3, r3, #32
 8000b12:	604b      	str	r3, [r1, #4]
	switch(m_currentMode)
 8000b14:	2a07      	cmp	r2, #7
 8000b16:	d80b      	bhi.n	8000b30 <_ZN4Cube10changeModeEv+0x44>
 8000b18:	e8df f002 	tbb	[pc, r2]
 8000b1c:	2d251e16 	.word	0x2d251e16
 8000b20:	0b043c34 	.word	0x0b043c34
			m_currentModePtr = &Cube::walkingCube;
 8000b24:	2200      	movs	r2, #0
			m_modeTimer = WALKING_TIME;
 8000b26:	2164      	movs	r1, #100	; 0x64
			m_currentModePtr = &Cube::walkingCube;
 8000b28:	4b1e      	ldr	r3, [pc, #120]	; (8000ba4 <_ZN4Cube10changeModeEv+0xb8>)
			m_modeTimer = WALKING_TIME;
 8000b2a:	66a1      	str	r1, [r4, #104]	; 0x68
			m_currentModePtr = &Cube::walkingCube;
 8000b2c:	e9c4 3200 	strd	r3, r2, [r4]
}
 8000b30:	bd10      	pop	{r4, pc}
			m_modeTimer = BRIGHT_TIME;
 8000b32:	2200      	movs	r2, #0
			ADC2->CR1 &= ~(1 << 5);	//выключаем ацп, если измерения не нужны							//обнуление бита EOCIE(End Of Conversion Int Enable)
 8000b34:	491a      	ldr	r1, [pc, #104]	; (8000ba0 <_ZN4Cube10changeModeEv+0xb4>)
			m_modeTimer = BRIGHT_TIME;
 8000b36:	66a2      	str	r2, [r4, #104]	; 0x68
			ADC2->CR1 &= ~(1 << 5);	//выключаем ацп, если измерения не нужны							//обнуление бита EOCIE(End Of Conversion Int Enable)
 8000b38:	684b      	ldr	r3, [r1, #4]
			m_currentModePtr = &Cube::constChangeBrightnes;
 8000b3a:	481b      	ldr	r0, [pc, #108]	; (8000ba8 <_ZN4Cube10changeModeEv+0xbc>)
			ADC2->CR1 &= ~(1 << 5);	//выключаем ацп, если измерения не нужны							//обнуление бита EOCIE(End Of Conversion Int Enable)
 8000b3c:	f023 0320 	bic.w	r3, r3, #32
 8000b40:	604b      	str	r3, [r1, #4]
			m_currentModePtr = &Cube::constChangeBrightnes;
 8000b42:	e9c4 0200 	strd	r0, r2, [r4]
}
 8000b46:	bd10      	pop	{r4, pc}
			m_currentModePtr = &Cube::rain;
 8000b48:	2200      	movs	r2, #0
			m_modeTimer = RAIN_TIME;
 8000b4a:	f44f 7182 	mov.w	r1, #260	; 0x104
			m_currentModePtr = &Cube::rain;
 8000b4e:	4b17      	ldr	r3, [pc, #92]	; (8000bac <_ZN4Cube10changeModeEv+0xc0>)
			m_modeTimer = RAIN_TIME;
 8000b50:	66a1      	str	r1, [r4, #104]	; 0x68
			m_currentModePtr = &Cube::rain;
 8000b52:	e9c4 3200 	strd	r3, r2, [r4]
}
 8000b56:	bd10      	pop	{r4, pc}
			m_currentModePtr = &Cube::walk_and_flying_Wall;
 8000b58:	2200      	movs	r2, #0
			m_modeTimer = WALL_TIME;
 8000b5a:	21dc      	movs	r1, #220	; 0xdc
			m_currentModePtr = &Cube::walk_and_flying_Wall;
 8000b5c:	4b14      	ldr	r3, [pc, #80]	; (8000bb0 <_ZN4Cube10changeModeEv+0xc4>)
			m_modeTimer = WALL_TIME;
 8000b5e:	66a1      	str	r1, [r4, #104]	; 0x68
			m_currentModePtr = &Cube::walk_and_flying_Wall;
 8000b60:	e9c4 3200 	strd	r3, r2, [r4]
}
 8000b64:	bd10      	pop	{r4, pc}
			m_currentModePtr = &Cube::woopWoop;
 8000b66:	2200      	movs	r2, #0
			m_modeTimer = WOOP_WOOP_TIME;
 8000b68:	f44f 71af 	mov.w	r1, #350	; 0x15e
			m_currentModePtr = &Cube::woopWoop;
 8000b6c:	4b11      	ldr	r3, [pc, #68]	; (8000bb4 <_ZN4Cube10changeModeEv+0xc8>)
			m_modeTimer = WOOP_WOOP_TIME;
 8000b6e:	66a1      	str	r1, [r4, #104]	; 0x68
			m_currentModePtr = &Cube::woopWoop;
 8000b70:	e9c4 3200 	strd	r3, r2, [r4]
}
 8000b74:	bd10      	pop	{r4, pc}
			m_currentModePtr = &Cube::cubeJump;
 8000b76:	2200      	movs	r2, #0
			m_modeTimer = CUBE_JUMP_TIME;
 8000b78:	21c8      	movs	r1, #200	; 0xc8
			m_currentModePtr = &Cube::cubeJump;
 8000b7a:	4b0f      	ldr	r3, [pc, #60]	; (8000bb8 <_ZN4Cube10changeModeEv+0xcc>)
			m_modeTimer = CUBE_JUMP_TIME;
 8000b7c:	66a1      	str	r1, [r4, #104]	; 0x68
			m_currentModePtr = &Cube::cubeJump;
 8000b7e:	e9c4 3200 	strd	r3, r2, [r4]
}
 8000b82:	bd10      	pop	{r4, pc}
			m_currentModePtr = &Cube::text;
 8000b84:	2200      	movs	r2, #0
			m_modeTimer = TEXT_TIME;
 8000b86:	f44f 7196 	mov.w	r1, #300	; 0x12c
			m_currentModePtr = &Cube::text;
 8000b8a:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <_ZN4Cube10changeModeEv+0xd0>)
			m_modeTimer = TEXT_TIME;
 8000b8c:	66a1      	str	r1, [r4, #104]	; 0x68
			m_currentModePtr = &Cube::text;
 8000b8e:	e9c4 3200 	strd	r3, r2, [r4]
}
 8000b92:	bd10      	pop	{r4, pc}
			m_currentModePtr = &Cube::lightCube;
 8000b94:	2200      	movs	r2, #0
 8000b96:	4b0a      	ldr	r3, [pc, #40]	; (8000bc0 <_ZN4Cube10changeModeEv+0xd4>)
 8000b98:	e9c4 3200 	strd	r3, r2, [r4]
}
 8000b9c:	bd10      	pop	{r4, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40012800 	.word	0x40012800
 8000ba4:	080001ed 	.word	0x080001ed
 8000ba8:	0800015d 	.word	0x0800015d
 8000bac:	0800056d 	.word	0x0800056d
 8000bb0:	08001631 	.word	0x08001631
 8000bb4:	08000d29 	.word	0x08000d29
 8000bb8:	08000dc1 	.word	0x08000dc1
 8000bbc:	08000441 	.word	0x08000441
 8000bc0:	08000811 	.word	0x08000811

08000bc4 <_ZN4Cube14incCurrentModeEv>:
	m_currentMode = static_cast<Modes>(static_cast<uint8_t>(m_currentMode) + 1);
 8000bc4:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8000bc8:	3301      	adds	r3, #1
 8000bca:	b2db      	uxtb	r3, r3
    if (m_currentMode > TOTAL_MODES - 1)
 8000bcc:	2b07      	cmp	r3, #7
    	m_currentMode = RAIN;
 8000bce:	bf88      	it	hi
 8000bd0:	2300      	movhi	r3, #0
 8000bd2:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
}
 8000bd6:	4770      	bx	lr

08000bd8 <_ZN4Cube14decCurrentModeEv>:
	m_currentMode = static_cast<Modes>(static_cast<uint8_t>(m_currentMode) - 1);
 8000bd8:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8000bdc:	3b01      	subs	r3, #1
 8000bde:	b2db      	uxtb	r3, r3
    if (m_currentMode > TOTAL_MODES - 1)
 8000be0:	2b07      	cmp	r3, #7
	m_currentMode = static_cast<Modes>(TOTAL_MODES - 1); 		//защита от OutOfBounds
 8000be2:	bf88      	it	hi
 8000be4:	2307      	movhi	r3, #7
 8000be6:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
}
 8000bea:	4770      	bx	lr

08000bec <_ZN4Cube13setTextStringEPch>:
	Text.stringPtr = text;
 8000bec:	65c1      	str	r1, [r0, #92]	; 0x5c
	Text.lengh = lengh;
 8000bee:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
}
 8000bf2:	4770      	bx	lr

08000bf4 <_ZN4Cube8drawCubeEhhhh>:
{
 8000bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000bf8:	b08b      	sub	sp, #44	; 0x2c
 8000bfa:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
	for (uint8_t i = 0; i < s; ++i)
 8000bfe:	2c00      	cmp	r4, #0
 8000c00:	f000 808f 	beq.w	8000d22 <_ZN4Cube8drawCubeEhhhh+0x12e>
 8000c04:	4680      	mov	r8, r0
 8000c06:	468b      	mov	fp, r1
    m_OutFrame[7 - z][x] &= ~(128 >> y); 							//сбрасываем бит
 8000c08:	f04f 0e80 	mov.w	lr, #128	; 0x80
 8000c0c:	4610      	mov	r0, r2
 8000c0e:	1e59      	subs	r1, r3, #1
 8000c10:	4421      	add	r1, r4
		setDot(x + i, y + s - 1, z + s - 1, 1);
 8000c12:	1e56      	subs	r6, r2, #1
 8000c14:	f1c3 0507 	rsb	r5, r3, #7
 8000c18:	4426      	add	r6, r4
    m_OutFrame[7 - z][x] |= (128 >> y) * set_num; 						//устанавливаем 0 или 1 в зависимости от set_num
 8000c1a:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 8000c1e:	b2c9      	uxtb	r1, r1
 8000c20:	f10b 3cff 	add.w	ip, fp, #4294967295
 8000c24:	44a4      	add	ip, r4
 8000c26:	f1c1 0107 	rsb	r1, r1, #7
    m_OutFrame[7 - z][x] &= ~(128 >> y); 							//сбрасываем бит
 8000c2a:	b2f6      	uxtb	r6, r6
    m_OutFrame[7 - z][x] |= (128 >> y) * set_num; 						//устанавливаем 0 или 1 в зависимости от set_num
 8000c2c:	9503      	str	r5, [sp, #12]
 8000c2e:	eb08 01c1 	add.w	r1, r8, r1, lsl #3
 8000c32:	fa5f fc8c 	uxtb.w	ip, ip
    m_OutFrame[7 - z][x] &= ~(128 >> y); 							//сбрасываем бит
 8000c36:	fa4e f702 	asr.w	r7, lr, r2
 8000c3a:	4414      	add	r4, r2
 8000c3c:	fa4e f606 	asr.w	r6, lr, r6
    m_OutFrame[7 - z][x] |= (128 >> y) * set_num; 						//устанавливаем 0 или 1 в зависимости от set_num
 8000c40:	9a03      	ldr	r2, [sp, #12]
 8000c42:	1a1b      	subs	r3, r3, r0
 8000c44:	9106      	str	r1, [sp, #24]
 8000c46:	eb01 0a0c 	add.w	sl, r1, ip
 8000c4a:	eb01 090b 	add.w	r9, r1, fp
    m_OutFrame[7 - z][x] &= ~(128 >> y); 							//сбрасываем бит
 8000c4e:	b276      	sxtb	r6, r6
 8000c50:	b2e1      	uxtb	r1, r4
 8000c52:	b27f      	sxtb	r7, r7
 8000c54:	9308      	str	r3, [sp, #32]
 8000c56:	ebab 0300 	sub.w	r3, fp, r0
    m_OutFrame[7 - z][x] |= (128 >> y) * set_num; 						//устанавливаем 0 или 1 в зависимости от set_num
 8000c5a:	f8cd 8014 	str.w	r8, [sp, #20]
 8000c5e:	f8cd c008 	str.w	ip, [sp, #8]
 8000c62:	9104      	str	r1, [sp, #16]
 8000c64:	eb02 080c 	add.w	r8, r2, ip
 8000c68:	eb02 0e0b 	add.w	lr, r2, fp
 8000c6c:	9307      	str	r3, [sp, #28]
 8000c6e:	9609      	str	r6, [sp, #36]	; 0x24
 8000c70:	9701      	str	r7, [sp, #4]
    m_OutFrame[7 - z][x] &= ~(128 >> y); 							//сбрасываем бит
 8000c72:	2380      	movs	r3, #128	; 0x80
 8000c74:	fa43 f100 	asr.w	r1, r3, r0
    m_OutFrame[7 - z][x] |= (128 >> y) * set_num; 						//устанавливаем 0 или 1 в зависимости от set_num
 8000c78:	f89e 3008 	ldrb.w	r3, [lr, #8]
    m_OutFrame[7 - z][x] &= ~(128 >> y); 							//сбрасываем бит
 8000c7c:	b249      	sxtb	r1, r1
 8000c7e:	9a07      	ldr	r2, [sp, #28]
    m_OutFrame[7 - z][x] |= (128 >> y) * set_num; 						//устанавливаем 0 или 1 в зависимости от set_num
 8000c80:	430b      	orrs	r3, r1
 8000c82:	f88e 3008 	strb.w	r3, [lr, #8]
    m_OutFrame[7 - z][x] &= ~(128 >> y); 							//сбрасываем бит
 8000c86:	1882      	adds	r2, r0, r2
    m_OutFrame[7 - z][x] |= (128 >> y) * set_num; 						//устанавливаем 0 или 1 в зависимости от set_num
 8000c88:	9b03      	ldr	r3, [sp, #12]
    m_OutFrame[7 - z][x] &= ~(128 >> y); 							//сбрасываем бит
 8000c8a:	b2d2      	uxtb	r2, r2
    m_OutFrame[7 - z][x] |= (128 >> y) * set_num; 						//устанавливаем 0 или 1 в зависимости от set_num
 8000c8c:	189d      	adds	r5, r3, r2
    m_OutFrame[7 - z][x] &= ~(128 >> y); 							//сбрасываем бит
 8000c8e:	9b08      	ldr	r3, [sp, #32]
    m_OutFrame[7 - z][x] |= (128 >> y) * set_num; 						//устанавливаем 0 или 1 в зависимости от set_num
 8000c90:	7a2c      	ldrb	r4, [r5, #8]
 8000c92:	9e01      	ldr	r6, [sp, #4]
    m_OutFrame[7 - z][x] &= ~(128 >> y); 							//сбрасываем бит
 8000c94:	18c3      	adds	r3, r0, r3
    m_OutFrame[7 - z][x] |= (128 >> y) * set_num; 						//устанавливаем 0 или 1 в зависимости от set_num
 8000c96:	4334      	orrs	r4, r6
    m_OutFrame[7 - z][x] &= ~(128 >> y); 							//сбрасываем бит
 8000c98:	b2db      	uxtb	r3, r3
    m_OutFrame[7 - z][x] |= (128 >> y) * set_num; 						//устанавливаем 0 или 1 в зависимости от set_num
 8000c9a:	9e05      	ldr	r6, [sp, #20]
    m_OutFrame[7 - z][x] &= ~(128 >> y); 							//сбрасываем бит
 8000c9c:	f1c3 0307 	rsb	r3, r3, #7
    m_OutFrame[7 - z][x] |= (128 >> y) * set_num; 						//устанавливаем 0 или 1 в зависимости от set_num
 8000ca0:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8000ca4:	9e06      	ldr	r6, [sp, #24]
 8000ca6:	722c      	strb	r4, [r5, #8]
 8000ca8:	eb03 040b 	add.w	r4, r3, fp
 8000cac:	f894 c008 	ldrb.w	ip, [r4, #8]
 8000cb0:	4432      	add	r2, r6
 8000cb2:	9e01      	ldr	r6, [sp, #4]
 8000cb4:	3001      	adds	r0, #1
 8000cb6:	ea46 0c0c 	orr.w	ip, r6, ip
 8000cba:	f884 c008 	strb.w	ip, [r4, #8]
 8000cbe:	f89a c008 	ldrb.w	ip, [sl, #8]
 8000cc2:	9e02      	ldr	r6, [sp, #8]
 8000cc4:	ea41 0c0c 	orr.w	ip, r1, ip
 8000cc8:	f88a c008 	strb.w	ip, [sl, #8]
 8000ccc:	f892 c008 	ldrb.w	ip, [r2, #8]
 8000cd0:	4433      	add	r3, r6
 8000cd2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8000cd4:	b2c0      	uxtb	r0, r0
 8000cd6:	ea46 0c0c 	orr.w	ip, r6, ip
 8000cda:	f882 c008 	strb.w	ip, [r2, #8]
 8000cde:	f893 c008 	ldrb.w	ip, [r3, #8]
 8000ce2:	ea46 0c0c 	orr.w	ip, r6, ip
 8000ce6:	f883 c008 	strb.w	ip, [r3, #8]
 8000cea:	f898 c008 	ldrb.w	ip, [r8, #8]
 8000cee:	ea41 0c0c 	orr.w	ip, r1, ip
 8000cf2:	f888 c008 	strb.w	ip, [r8, #8]
 8000cf6:	f899 c008 	ldrb.w	ip, [r9, #8]
 8000cfa:	ea41 010c 	orr.w	r1, r1, ip
 8000cfe:	f889 1008 	strb.w	r1, [r9, #8]
 8000d02:	7a29      	ldrb	r1, [r5, #8]
 8000d04:	4331      	orrs	r1, r6
 8000d06:	7229      	strb	r1, [r5, #8]
 8000d08:	7a11      	ldrb	r1, [r2, #8]
 8000d0a:	9d01      	ldr	r5, [sp, #4]
 8000d0c:	4329      	orrs	r1, r5
 8000d0e:	7211      	strb	r1, [r2, #8]
 8000d10:	7a1a      	ldrb	r2, [r3, #8]
 8000d12:	432a      	orrs	r2, r5
 8000d14:	721a      	strb	r2, [r3, #8]
 8000d16:	7a23      	ldrb	r3, [r4, #8]
 8000d18:	4333      	orrs	r3, r6
 8000d1a:	7223      	strb	r3, [r4, #8]
	for (uint8_t i = 0; i < s; ++i)
 8000d1c:	9b04      	ldr	r3, [sp, #16]
 8000d1e:	4298      	cmp	r0, r3
 8000d20:	d1a7      	bne.n	8000c72 <_ZN4Cube8drawCubeEhhhh+0x7e>
}
 8000d22:	b00b      	add	sp, #44	; 0x2c
 8000d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000d28 <_ZN4Cube8woopWoopEv>:
{
 8000d28:	b530      	push	{r4, r5, lr}
	if (m_IsModeSwitched)
 8000d2a:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
{
 8000d2e:	4604      	mov	r4, r0
 8000d30:	b083      	sub	sp, #12
	if (m_IsModeSwitched)
 8000d32:	b173      	cbz	r3, 8000d52 <_ZN4Cube8woopWoopEv+0x2a>
		m_modeTimer = WOOP_WOOP_TIME;
 8000d34:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8000d38:	2240      	movs	r2, #64	; 0x40
 8000d3a:	6683      	str	r3, [r0, #104]	; 0x68
    for(uint8_t x = 0; x < 8; ++x)
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	3008      	adds	r0, #8
 8000d40:	f004 fce8 	bl	8005714 <memset>
		cubeSize = 2;
 8000d44:	f44f 7281 	mov.w	r2, #258	; 0x102
		m_IsModeSwitched = 0;
 8000d48:	2300      	movs	r3, #0
		cubeSize = 2;
 8000d4a:	f8a4 2056 	strh.w	r2, [r4, #86]	; 0x56
		m_IsModeSwitched = 0;
 8000d4e:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
	if (HAL_GetTick() - m_lastTrigger > m_modeTimer)
 8000d52:	f001 f9f9 	bl	8002148 <HAL_GetTick>
 8000d56:	e9d4 2319 	ldrd	r2, r3, [r4, #100]	; 0x64
 8000d5a:	1a80      	subs	r0, r0, r2
 8000d5c:	4298      	cmp	r0, r3
 8000d5e:	d801      	bhi.n	8000d64 <_ZN4Cube8woopWoopEv+0x3c>
}
 8000d60:	b003      	add	sp, #12
 8000d62:	bd30      	pop	{r4, r5, pc}
		m_lastTrigger = HAL_GetTick();
 8000d64:	f001 f9f0 	bl	8002148 <HAL_GetTick>
		if (cubeExpanding)
 8000d68:	f894 3057 	ldrb.w	r3, [r4, #87]	; 0x57
			cubeSize += 2;
 8000d6c:	f894 5056 	ldrb.w	r5, [r4, #86]	; 0x56
		m_lastTrigger = HAL_GetTick();
 8000d70:	6660      	str	r0, [r4, #100]	; 0x64
		if (cubeExpanding)
 8000d72:	b14b      	cbz	r3, 8000d88 <_ZN4Cube8woopWoopEv+0x60>
			cubeSize += 2;
 8000d74:	3502      	adds	r5, #2
 8000d76:	b2ed      	uxtb	r5, r5
			if (cubeSize == 8)
 8000d78:	2d08      	cmp	r5, #8
			cubeSize += 2;
 8000d7a:	f884 5056 	strb.w	r5, [r4, #86]	; 0x56
			if (cubeSize == 8)
 8000d7e:	d10d      	bne.n	8000d9c <_ZN4Cube8woopWoopEv+0x74>
				cubeExpanding = 0;
 8000d80:	2300      	movs	r3, #0
 8000d82:	f884 3057 	strb.w	r3, [r4, #87]	; 0x57
 8000d86:	e009      	b.n	8000d9c <_ZN4Cube8woopWoopEv+0x74>
			cubeSize -= 2;
 8000d88:	3d02      	subs	r5, #2
 8000d8a:	b2ed      	uxtb	r5, r5
			if (cubeSize == 2)
 8000d8c:	2d02      	cmp	r5, #2
				cubeExpanding = 1;
 8000d8e:	bf08      	it	eq
 8000d90:	2301      	moveq	r3, #1
			cubeSize -= 2;
 8000d92:	f884 5056 	strb.w	r5, [r4, #86]	; 0x56
				cubeExpanding = 1;
 8000d96:	bf08      	it	eq
 8000d98:	f884 3057 	strbeq.w	r3, [r4, #87]	; 0x57
 8000d9c:	2240      	movs	r2, #64	; 0x40
 8000d9e:	2100      	movs	r1, #0
 8000da0:	f104 0008 	add.w	r0, r4, #8
 8000da4:	f004 fcb6 	bl	8005714 <memset>
		drawCube(4 - cubeSize / 2, 4 - cubeSize / 2, 4 - cubeSize / 2, cubeSize);
 8000da8:	086b      	lsrs	r3, r5, #1
 8000daa:	f1c3 0304 	rsb	r3, r3, #4
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	4620      	mov	r0, r4
 8000db2:	461a      	mov	r2, r3
 8000db4:	4619      	mov	r1, r3
 8000db6:	9500      	str	r5, [sp, #0]
 8000db8:	f7ff ff1c 	bl	8000bf4 <_ZN4Cube8drawCubeEhhhh>
}
 8000dbc:	b003      	add	sp, #12
 8000dbe:	bd30      	pop	{r4, r5, pc}

08000dc0 <_ZN4Cube8cubeJumpEv>:
{
 8000dc0:	b530      	push	{r4, r5, lr}
	if (m_IsModeSwitched)
 8000dc2:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
{
 8000dc6:	4604      	mov	r4, r0
 8000dc8:	b083      	sub	sp, #12
	if (m_IsModeSwitched)
 8000dca:	b313      	cbz	r3, 8000e12 <_ZN4Cube8cubeJumpEv+0x52>
		m_IsModeSwitched = 0;
 8000dcc:	2500      	movs	r5, #0
 8000dce:	2240      	movs	r2, #64	; 0x40
 8000dd0:	4629      	mov	r1, r5
 8000dd2:	f880 5049 	strb.w	r5, [r0, #73]	; 0x49
    for(uint8_t x = 0; x < 8; ++x)
 8000dd6:	3008      	adds	r0, #8
 8000dd8:	f004 fc9c 	bl	8005714 <memset>
		xPos = getRandomNumber(0, 1) * 7;
 8000ddc:	2101      	movs	r1, #1
 8000dde:	4628      	mov	r0, r5
 8000de0:	f000 fdb8 	bl	8001954 <_Z15getRandomNumberii>
 8000de4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
		yPos = getRandomNumber(0, 1) * 7;
 8000de8:	2101      	movs	r1, #1
		xPos = getRandomNumber(0, 1) * 7;
 8000dea:	f884 0058 	strb.w	r0, [r4, #88]	; 0x58
		yPos = getRandomNumber(0, 1) * 7;
 8000dee:	4628      	mov	r0, r5
 8000df0:	f000 fdb0 	bl	8001954 <_Z15getRandomNumberii>
 8000df4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8000df8:	f884 0059 	strb.w	r0, [r4, #89]	; 0x59
		zPos = getRandomNumber(0, 1) * 7;
 8000dfc:	2101      	movs	r1, #1
 8000dfe:	4628      	mov	r0, r5
 8000e00:	f000 fda8 	bl	8001954 <_Z15getRandomNumberii>
		cubeSize = 8;
 8000e04:	2308      	movs	r3, #8
		zPos = getRandomNumber(0, 1) * 7;
 8000e06:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8000e0a:	f884 005a 	strb.w	r0, [r4, #90]	; 0x5a
		cubeSize = 8;
 8000e0e:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
	if (HAL_GetTick() - m_lastTrigger > m_modeTimer)
 8000e12:	f001 f999 	bl	8002148 <HAL_GetTick>
 8000e16:	e9d4 2319 	ldrd	r2, r3, [r4, #100]	; 0x64
 8000e1a:	1a80      	subs	r0, r0, r2
 8000e1c:	4298      	cmp	r0, r3
 8000e1e:	d801      	bhi.n	8000e24 <_ZN4Cube8cubeJumpEv+0x64>
}
 8000e20:	b003      	add	sp, #12
 8000e22:	bd30      	pop	{r4, r5, pc}
		m_lastTrigger = HAL_GetTick();
 8000e24:	f001 f990 	bl	8002148 <HAL_GetTick>
 8000e28:	2240      	movs	r2, #64	; 0x40
 8000e2a:	6660      	str	r0, [r4, #100]	; 0x64
    for(uint8_t x = 0; x < 8; ++x)
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	f104 0008 	add.w	r0, r4, #8
 8000e32:	f004 fc6f 	bl	8005714 <memset>
		if (xPos == 0 && yPos == 0 && zPos == 0)
 8000e36:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000e38:	f033 437f 	bics.w	r3, r3, #4278190080	; 0xff000000
 8000e3c:	d04b      	beq.n	8000ed6 <_ZN4Cube8cubeJumpEv+0x116>
		else if (xPos == 7 && yPos == 7 && zPos == 7)
 8000e3e:	4a68      	ldr	r2, [pc, #416]	; (8000fe0 <_ZN4Cube8cubeJumpEv+0x220>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d055      	beq.n	8000ef0 <_ZN4Cube8cubeJumpEv+0x130>
		else if (xPos == 7 && yPos == 0 && zPos == 0)
 8000e44:	2b07      	cmp	r3, #7
 8000e46:	d07c      	beq.n	8000f42 <_ZN4Cube8cubeJumpEv+0x182>
		else if (xPos == 0 && yPos == 7 && zPos == 0)
 8000e48:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8000e4c:	f000 8089 	beq.w	8000f62 <_ZN4Cube8cubeJumpEv+0x1a2>
		else if (xPos == 0 && yPos == 0 && zPos == 7)
 8000e50:	f5b3 2fe0 	cmp.w	r3, #458752	; 0x70000
 8000e54:	f000 8095 	beq.w	8000f82 <_ZN4Cube8cubeJumpEv+0x1c2>
		else if (xPos == 7 && yPos == 7 && zPos == 0)
 8000e58:	f240 7207 	movw	r2, #1799	; 0x707
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	f000 8098 	beq.w	8000f92 <_ZN4Cube8cubeJumpEv+0x1d2>
		else if (xPos == 0 && yPos == 7 && zPos == 7)
 8000e62:	4a60      	ldr	r2, [pc, #384]	; (8000fe4 <_ZN4Cube8cubeJumpEv+0x224>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	f000 80a7 	beq.w	8000fb8 <_ZN4Cube8cubeJumpEv+0x1f8>
		else if (xPos == 7 && yPos == 0 && zPos == 7)
 8000e6a:	f1b3 1f07 	cmp.w	r3, #458759	; 0x70007
 8000e6e:	d055      	beq.n	8000f1c <_ZN4Cube8cubeJumpEv+0x15c>
		if(cubeExpanding)
 8000e70:	f894 3057 	ldrb.w	r3, [r4, #87]	; 0x57
 8000e74:	b31b      	cbz	r3, 8000ebe <_ZN4Cube8cubeJumpEv+0xfe>
			if (++cubeSize == 8)
 8000e76:	f894 3056 	ldrb.w	r3, [r4, #86]	; 0x56
 8000e7a:	3301      	adds	r3, #1
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	2b08      	cmp	r3, #8
 8000e80:	f884 3056 	strb.w	r3, [r4, #86]	; 0x56
 8000e84:	d1cc      	bne.n	8000e20 <_ZN4Cube8cubeJumpEv+0x60>
				cubeExpanding = 0;
 8000e86:	2500      	movs	r5, #0
				xPos = getRandomNumber(0, 1) * 7;
 8000e88:	2101      	movs	r1, #1
 8000e8a:	4628      	mov	r0, r5
				cubeExpanding = 0;
 8000e8c:	f884 5057 	strb.w	r5, [r4, #87]	; 0x57
				xPos = getRandomNumber(0, 1) * 7;
 8000e90:	f000 fd60 	bl	8001954 <_Z15getRandomNumberii>
 8000e94:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
				yPos = getRandomNumber(0, 1) * 7;
 8000e98:	2101      	movs	r1, #1
				xPos = getRandomNumber(0, 1) * 7;
 8000e9a:	f884 0058 	strb.w	r0, [r4, #88]	; 0x58
				yPos = getRandomNumber(0, 1) * 7;
 8000e9e:	4628      	mov	r0, r5
 8000ea0:	f000 fd58 	bl	8001954 <_Z15getRandomNumberii>
 8000ea4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8000ea8:	f884 0059 	strb.w	r0, [r4, #89]	; 0x59
				zPos = getRandomNumber(0, 1) * 7;
 8000eac:	2101      	movs	r1, #1
 8000eae:	4628      	mov	r0, r5
 8000eb0:	f000 fd50 	bl	8001954 <_Z15getRandomNumberii>
 8000eb4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8000eb8:	f884 005a 	strb.w	r0, [r4, #90]	; 0x5a
 8000ebc:	e7b0      	b.n	8000e20 <_ZN4Cube8cubeJumpEv+0x60>
			if (--cubeSize == 1)
 8000ebe:	f894 3056 	ldrb.w	r3, [r4, #86]	; 0x56
 8000ec2:	3b01      	subs	r3, #1
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	2b01      	cmp	r3, #1
 8000ec8:	f884 3056 	strb.w	r3, [r4, #86]	; 0x56
				cubeExpanding = 1;
 8000ecc:	bf08      	it	eq
 8000ece:	f884 3057 	strbeq.w	r3, [r4, #87]	; 0x57
}
 8000ed2:	b003      	add	sp, #12
 8000ed4:	bd30      	pop	{r4, r5, pc}
			drawCube(xPos, yPos, zPos, cubeSize);
 8000ed6:	f894 2056 	ldrb.w	r2, [r4, #86]	; 0x56
 8000eda:	f894 305a 	ldrb.w	r3, [r4, #90]	; 0x5a
		    drawCube(xPos, yPos, zPos + 1 - cubeSize, cubeSize);
 8000ede:	9200      	str	r2, [sp, #0]
 8000ee0:	4620      	mov	r0, r4
 8000ee2:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8000ee6:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
 8000eea:	f7ff fe83 	bl	8000bf4 <_ZN4Cube8drawCubeEhhhh>
 8000eee:	e7bf      	b.n	8000e70 <_ZN4Cube8cubeJumpEv+0xb0>
			drawCube(xPos + 1 - cubeSize, yPos + 1 - cubeSize, zPos + 1 - cubeSize, cubeSize);
 8000ef0:	f894 305a 	ldrb.w	r3, [r4, #90]	; 0x5a
 8000ef4:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8000ef8:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
 8000efc:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 8000f00:	3301      	adds	r3, #1
 8000f02:	3201      	adds	r2, #1
 8000f04:	3101      	adds	r1, #1
 8000f06:	1a1b      	subs	r3, r3, r0
 8000f08:	1a12      	subs	r2, r2, r0
 8000f0a:	1a09      	subs	r1, r1, r0
 8000f0c:	9000      	str	r0, [sp, #0]
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	4620      	mov	r0, r4
 8000f12:	b2d2      	uxtb	r2, r2
 8000f14:	b2c9      	uxtb	r1, r1
 8000f16:	f7ff fe6d 	bl	8000bf4 <_ZN4Cube8drawCubeEhhhh>
 8000f1a:	e7a9      	b.n	8000e70 <_ZN4Cube8cubeJumpEv+0xb0>
		    drawCube(xPos + 1 - cubeSize, yPos, zPos + 1 - cubeSize, cubeSize);
 8000f1c:	f894 305a 	ldrb.w	r3, [r4, #90]	; 0x5a
 8000f20:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
 8000f24:	f894 2056 	ldrb.w	r2, [r4, #86]	; 0x56
 8000f28:	3301      	adds	r3, #1
 8000f2a:	3101      	adds	r1, #1
 8000f2c:	1a9b      	subs	r3, r3, r2
 8000f2e:	1a89      	subs	r1, r1, r2
 8000f30:	9200      	str	r2, [sp, #0]
 8000f32:	4620      	mov	r0, r4
 8000f34:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	b2c9      	uxtb	r1, r1
 8000f3c:	f7ff fe5a 	bl	8000bf4 <_ZN4Cube8drawCubeEhhhh>
 8000f40:	e796      	b.n	8000e70 <_ZN4Cube8cubeJumpEv+0xb0>
			drawCube(xPos + 1 - cubeSize, yPos, zPos, cubeSize);
 8000f42:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
 8000f46:	f894 3056 	ldrb.w	r3, [r4, #86]	; 0x56
 8000f4a:	3101      	adds	r1, #1
 8000f4c:	9300      	str	r3, [sp, #0]
 8000f4e:	1ac9      	subs	r1, r1, r3
 8000f50:	4620      	mov	r0, r4
 8000f52:	f894 305a 	ldrb.w	r3, [r4, #90]	; 0x5a
 8000f56:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8000f5a:	b2c9      	uxtb	r1, r1
 8000f5c:	f7ff fe4a 	bl	8000bf4 <_ZN4Cube8drawCubeEhhhh>
 8000f60:	e786      	b.n	8000e70 <_ZN4Cube8cubeJumpEv+0xb0>
		    drawCube(xPos, yPos + 1 - cubeSize, zPos, cubeSize);
 8000f62:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8000f66:	f894 3056 	ldrb.w	r3, [r4, #86]	; 0x56
 8000f6a:	3201      	adds	r2, #1
 8000f6c:	9300      	str	r3, [sp, #0]
 8000f6e:	1ad2      	subs	r2, r2, r3
 8000f70:	4620      	mov	r0, r4
 8000f72:	f894 305a 	ldrb.w	r3, [r4, #90]	; 0x5a
 8000f76:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
 8000f7a:	b2d2      	uxtb	r2, r2
 8000f7c:	f7ff fe3a 	bl	8000bf4 <_ZN4Cube8drawCubeEhhhh>
 8000f80:	e776      	b.n	8000e70 <_ZN4Cube8cubeJumpEv+0xb0>
		    drawCube(xPos, yPos, zPos + 1 - cubeSize, cubeSize);
 8000f82:	f894 305a 	ldrb.w	r3, [r4, #90]	; 0x5a
 8000f86:	f894 2056 	ldrb.w	r2, [r4, #86]	; 0x56
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	1a9b      	subs	r3, r3, r2
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	e7a5      	b.n	8000ede <_ZN4Cube8cubeJumpEv+0x11e>
		    drawCube(xPos + 1 - cubeSize, yPos + 1 - cubeSize, zPos, cubeSize);
 8000f92:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8000f96:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
 8000f9a:	f894 3056 	ldrb.w	r3, [r4, #86]	; 0x56
 8000f9e:	3201      	adds	r2, #1
 8000fa0:	3101      	adds	r1, #1
 8000fa2:	1ad2      	subs	r2, r2, r3
 8000fa4:	1ac9      	subs	r1, r1, r3
 8000fa6:	9300      	str	r3, [sp, #0]
 8000fa8:	4620      	mov	r0, r4
 8000faa:	f894 305a 	ldrb.w	r3, [r4, #90]	; 0x5a
 8000fae:	b2d2      	uxtb	r2, r2
 8000fb0:	b2c9      	uxtb	r1, r1
 8000fb2:	f7ff fe1f 	bl	8000bf4 <_ZN4Cube8drawCubeEhhhh>
 8000fb6:	e75b      	b.n	8000e70 <_ZN4Cube8cubeJumpEv+0xb0>
		    drawCube(xPos, yPos + 1 - cubeSize, zPos + 1 - cubeSize, cubeSize);
 8000fb8:	f894 305a 	ldrb.w	r3, [r4, #90]	; 0x5a
 8000fbc:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8000fc0:	f894 1056 	ldrb.w	r1, [r4, #86]	; 0x56
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	3201      	adds	r2, #1
 8000fc8:	1a5b      	subs	r3, r3, r1
 8000fca:	1a52      	subs	r2, r2, r1
 8000fcc:	9100      	str	r1, [sp, #0]
 8000fce:	4620      	mov	r0, r4
 8000fd0:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	b2d2      	uxtb	r2, r2
 8000fd8:	f7ff fe0c 	bl	8000bf4 <_ZN4Cube8drawCubeEhhhh>
 8000fdc:	e748      	b.n	8000e70 <_ZN4Cube8cubeJumpEv+0xb0>
 8000fde:	bf00      	nop
 8000fe0:	00070707 	.word	0x00070707
 8000fe4:	00070700 	.word	0x00070700

08000fe8 <_ZN4Cube5shiftE9Direction>:
{
 8000fe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000fec:	4604      	mov	r4, r0
 8000fee:	2905      	cmp	r1, #5
 8000ff0:	f200 8118 	bhi.w	8001224 <_ZN4Cube5shiftE9Direction+0x23c>
 8000ff4:	e8df f011 	tbh	[pc, r1, lsl #1]
 8000ff8:	01970150 	.word	0x01970150
 8000ffc:	01de0006 	.word	0x01de0006
 8001000:	011802e4 	.word	0x011802e4
					m_OutFrame[z][x] >>= 1;
 8001004:	7a00      	ldrb	r0, [r0, #8]
 8001006:	7c21      	ldrb	r1, [r4, #16]
 8001008:	7e22      	ldrb	r2, [r4, #24]
 800100a:	f894 3020 	ldrb.w	r3, [r4, #32]
 800100e:	1040      	asrs	r0, r0, #1
 8001010:	1049      	asrs	r1, r1, #1
 8001012:	1052      	asrs	r2, r2, #1
 8001014:	105b      	asrs	r3, r3, #1
 8001016:	f894 6028 	ldrb.w	r6, [r4, #40]	; 0x28
 800101a:	f894 5030 	ldrb.w	r5, [r4, #48]	; 0x30
 800101e:	7220      	strb	r0, [r4, #8]
 8001020:	7421      	strb	r1, [r4, #16]
 8001022:	f894 0038 	ldrb.w	r0, [r4, #56]	; 0x38
 8001026:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
 800102a:	7622      	strb	r2, [r4, #24]
 800102c:	f884 3020 	strb.w	r3, [r4, #32]
 8001030:	7a62      	ldrb	r2, [r4, #9]
 8001032:	7c63      	ldrb	r3, [r4, #17]
 8001034:	1076      	asrs	r6, r6, #1
 8001036:	106d      	asrs	r5, r5, #1
 8001038:	1040      	asrs	r0, r0, #1
 800103a:	1049      	asrs	r1, r1, #1
 800103c:	1052      	asrs	r2, r2, #1
 800103e:	105b      	asrs	r3, r3, #1
 8001040:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
 8001044:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
 8001048:	7e66      	ldrb	r6, [r4, #25]
 800104a:	f894 5021 	ldrb.w	r5, [r4, #33]	; 0x21
 800104e:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
 8001052:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
 8001056:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
 800105a:	f894 1031 	ldrb.w	r1, [r4, #49]	; 0x31
 800105e:	7262      	strb	r2, [r4, #9]
 8001060:	7463      	strb	r3, [r4, #17]
 8001062:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8001066:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800106a:	1076      	asrs	r6, r6, #1
 800106c:	106d      	asrs	r5, r5, #1
 800106e:	1040      	asrs	r0, r0, #1
 8001070:	1049      	asrs	r1, r1, #1
 8001072:	1052      	asrs	r2, r2, #1
 8001074:	105b      	asrs	r3, r3, #1
 8001076:	7666      	strb	r6, [r4, #25]
 8001078:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
 800107c:	f884 1031 	strb.w	r1, [r4, #49]	; 0x31
 8001080:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
 8001084:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8001088:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
 800108c:	7aa0      	ldrb	r0, [r4, #10]
 800108e:	7ca1      	ldrb	r1, [r4, #18]
 8001090:	7ea2      	ldrb	r2, [r4, #26]
 8001092:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8001096:	1040      	asrs	r0, r0, #1
 8001098:	1049      	asrs	r1, r1, #1
 800109a:	1052      	asrs	r2, r2, #1
 800109c:	105b      	asrs	r3, r3, #1
 800109e:	f894 602a 	ldrb.w	r6, [r4, #42]	; 0x2a
 80010a2:	f894 5032 	ldrb.w	r5, [r4, #50]	; 0x32
 80010a6:	72a0      	strb	r0, [r4, #10]
 80010a8:	74a1      	strb	r1, [r4, #18]
 80010aa:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
 80010ae:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
 80010b2:	76a2      	strb	r2, [r4, #26]
 80010b4:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 80010b8:	7ae2      	ldrb	r2, [r4, #11]
 80010ba:	7ce3      	ldrb	r3, [r4, #19]
 80010bc:	1076      	asrs	r6, r6, #1
 80010be:	106d      	asrs	r5, r5, #1
 80010c0:	1040      	asrs	r0, r0, #1
 80010c2:	1049      	asrs	r1, r1, #1
 80010c4:	1052      	asrs	r2, r2, #1
 80010c6:	105b      	asrs	r3, r3, #1
 80010c8:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
 80010cc:	f884 5032 	strb.w	r5, [r4, #50]	; 0x32
 80010d0:	7ee6      	ldrb	r6, [r4, #27]
 80010d2:	f894 5023 	ldrb.w	r5, [r4, #35]	; 0x23
 80010d6:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
 80010da:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80010de:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
 80010e2:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
 80010e6:	72e2      	strb	r2, [r4, #11]
 80010e8:	74e3      	strb	r3, [r4, #19]
 80010ea:	f894 203b 	ldrb.w	r2, [r4, #59]	; 0x3b
 80010ee:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80010f2:	1076      	asrs	r6, r6, #1
 80010f4:	106d      	asrs	r5, r5, #1
 80010f6:	1040      	asrs	r0, r0, #1
 80010f8:	1049      	asrs	r1, r1, #1
 80010fa:	1052      	asrs	r2, r2, #1
 80010fc:	105b      	asrs	r3, r3, #1
 80010fe:	76e6      	strb	r6, [r4, #27]
 8001100:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
 8001104:	f884 1033 	strb.w	r1, [r4, #51]	; 0x33
 8001108:	f884 203b 	strb.w	r2, [r4, #59]	; 0x3b
 800110c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001110:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
 8001114:	7b20      	ldrb	r0, [r4, #12]
 8001116:	7d21      	ldrb	r1, [r4, #20]
 8001118:	7f22      	ldrb	r2, [r4, #28]
 800111a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800111e:	1040      	asrs	r0, r0, #1
 8001120:	1049      	asrs	r1, r1, #1
 8001122:	1052      	asrs	r2, r2, #1
 8001124:	105b      	asrs	r3, r3, #1
 8001126:	f894 602c 	ldrb.w	r6, [r4, #44]	; 0x2c
 800112a:	f894 5034 	ldrb.w	r5, [r4, #52]	; 0x34
 800112e:	7320      	strb	r0, [r4, #12]
 8001130:	7521      	strb	r1, [r4, #20]
 8001132:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
 8001136:	f894 1044 	ldrb.w	r1, [r4, #68]	; 0x44
 800113a:	7722      	strb	r2, [r4, #28]
 800113c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8001140:	7b62      	ldrb	r2, [r4, #13]
 8001142:	7d63      	ldrb	r3, [r4, #21]
 8001144:	1076      	asrs	r6, r6, #1
 8001146:	106d      	asrs	r5, r5, #1
 8001148:	1040      	asrs	r0, r0, #1
 800114a:	1049      	asrs	r1, r1, #1
 800114c:	1052      	asrs	r2, r2, #1
 800114e:	105b      	asrs	r3, r3, #1
 8001150:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
 8001154:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 8001158:	7f66      	ldrb	r6, [r4, #29]
 800115a:	f894 5025 	ldrb.w	r5, [r4, #37]	; 0x25
 800115e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 8001162:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8001166:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
 800116a:	f894 1035 	ldrb.w	r1, [r4, #53]	; 0x35
 800116e:	7362      	strb	r2, [r4, #13]
 8001170:	7563      	strb	r3, [r4, #21]
 8001172:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8001176:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800117a:	1076      	asrs	r6, r6, #1
 800117c:	106d      	asrs	r5, r5, #1
 800117e:	1040      	asrs	r0, r0, #1
 8001180:	1049      	asrs	r1, r1, #1
 8001182:	1052      	asrs	r2, r2, #1
 8001184:	105b      	asrs	r3, r3, #1
 8001186:	7766      	strb	r6, [r4, #29]
 8001188:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
 800118c:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
 8001190:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 8001194:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001198:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
 800119c:	7ba0      	ldrb	r0, [r4, #14]
 800119e:	7da1      	ldrb	r1, [r4, #22]
 80011a0:	7fa2      	ldrb	r2, [r4, #30]
 80011a2:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 80011a6:	1040      	asrs	r0, r0, #1
 80011a8:	1049      	asrs	r1, r1, #1
 80011aa:	1052      	asrs	r2, r2, #1
 80011ac:	105b      	asrs	r3, r3, #1
 80011ae:	f894 602e 	ldrb.w	r6, [r4, #46]	; 0x2e
 80011b2:	f894 5036 	ldrb.w	r5, [r4, #54]	; 0x36
 80011b6:	73a0      	strb	r0, [r4, #14]
 80011b8:	75a1      	strb	r1, [r4, #22]
 80011ba:	f894 003e 	ldrb.w	r0, [r4, #62]	; 0x3e
 80011be:	f894 1046 	ldrb.w	r1, [r4, #70]	; 0x46
 80011c2:	77a2      	strb	r2, [r4, #30]
 80011c4:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
 80011c8:	7be2      	ldrb	r2, [r4, #15]
 80011ca:	7de3      	ldrb	r3, [r4, #23]
 80011cc:	1076      	asrs	r6, r6, #1
 80011ce:	106d      	asrs	r5, r5, #1
 80011d0:	1040      	asrs	r0, r0, #1
 80011d2:	1049      	asrs	r1, r1, #1
 80011d4:	1052      	asrs	r2, r2, #1
 80011d6:	105b      	asrs	r3, r3, #1
 80011d8:	f884 602e 	strb.w	r6, [r4, #46]	; 0x2e
 80011dc:	f884 5036 	strb.w	r5, [r4, #54]	; 0x36
 80011e0:	7fe6      	ldrb	r6, [r4, #31]
 80011e2:	f894 5027 	ldrb.w	r5, [r4, #39]	; 0x27
 80011e6:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
 80011ea:	f884 1046 	strb.w	r1, [r4, #70]	; 0x46
 80011ee:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
 80011f2:	f894 1037 	ldrb.w	r1, [r4, #55]	; 0x37
 80011f6:	73e2      	strb	r2, [r4, #15]
 80011f8:	75e3      	strb	r3, [r4, #23]
 80011fa:	f894 203f 	ldrb.w	r2, [r4, #63]	; 0x3f
 80011fe:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
 8001202:	1076      	asrs	r6, r6, #1
 8001204:	106d      	asrs	r5, r5, #1
 8001206:	1040      	asrs	r0, r0, #1
 8001208:	1049      	asrs	r1, r1, #1
 800120a:	1052      	asrs	r2, r2, #1
 800120c:	105b      	asrs	r3, r3, #1
					m_OutFrame[z][x] <<= 1;
 800120e:	77e6      	strb	r6, [r4, #31]
 8001210:	f884 5027 	strb.w	r5, [r4, #39]	; 0x27
 8001214:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
 8001218:	f884 1037 	strb.w	r1, [r4, #55]	; 0x37
 800121c:	f884 203f 	strb.w	r2, [r4, #63]	; 0x3f
 8001220:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
			{
				m_OutFrame[0][i] = 0;
			}
			break;
	}
}
 8001224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001228:	4607      	mov	r7, r0
 800122a:	4606      	mov	r6, r0
 800122c:	4605      	mov	r5, r0
 800122e:	4601      	mov	r1, r0
 8001230:	4602      	mov	r2, r0
 8001232:	f857 ef38 	ldr.w	lr, [r7, #56]!
 8001236:	4603      	mov	r3, r0
 8001238:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800123c:	f8c0 e040 	str.w	lr, [r0, #64]	; 0x40
 8001240:	f8c0 c044 	str.w	ip, [r0, #68]	; 0x44
 8001244:	f04f 0c00 	mov.w	ip, #0
 8001248:	f856 8f30 	ldr.w	r8, [r6, #48]!
 800124c:	f8d6 e004 	ldr.w	lr, [r6, #4]
 8001250:	f8c0 8038 	str.w	r8, [r0, #56]	; 0x38
 8001254:	f8c7 e004 	str.w	lr, [r7, #4]
 8001258:	f855 ef28 	ldr.w	lr, [r5, #40]!
 800125c:	686f      	ldr	r7, [r5, #4]
 800125e:	f8c0 e030 	str.w	lr, [r0, #48]	; 0x30
 8001262:	6077      	str	r7, [r6, #4]
 8001264:	f850 7f20 	ldr.w	r7, [r0, #32]!
 8001268:	6846      	ldr	r6, [r0, #4]
 800126a:	62a7      	str	r7, [r4, #40]	; 0x28
 800126c:	606e      	str	r6, [r5, #4]
 800126e:	f851 6f18 	ldr.w	r6, [r1, #24]!
 8001272:	684d      	ldr	r5, [r1, #4]
 8001274:	6226      	str	r6, [r4, #32]
 8001276:	6045      	str	r5, [r0, #4]
 8001278:	f852 5f10 	ldr.w	r5, [r2, #16]!
 800127c:	6850      	ldr	r0, [r2, #4]
 800127e:	61a5      	str	r5, [r4, #24]
 8001280:	6048      	str	r0, [r1, #4]
 8001282:	f853 0f08 	ldr.w	r0, [r3, #8]!
 8001286:	6859      	ldr	r1, [r3, #4]
 8001288:	6120      	str	r0, [r4, #16]
 800128a:	6051      	str	r1, [r2, #4]
 800128c:	f8c4 c008 	str.w	ip, [r4, #8]
 8001290:	f8c3 c004 	str.w	ip, [r3, #4]
 8001294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001298:	f100 0108 	add.w	r1, r0, #8
 800129c:	2207      	movs	r2, #7
 800129e:	3009      	adds	r0, #9
 80012a0:	f004 fa1e 	bl	80056e0 <memmove>
 80012a4:	2207      	movs	r2, #7
 80012a6:	f104 0110 	add.w	r1, r4, #16
 80012aa:	f104 0011 	add.w	r0, r4, #17
 80012ae:	f004 fa17 	bl	80056e0 <memmove>
 80012b2:	2207      	movs	r2, #7
 80012b4:	f104 0118 	add.w	r1, r4, #24
 80012b8:	f104 0019 	add.w	r0, r4, #25
 80012bc:	f004 fa10 	bl	80056e0 <memmove>
 80012c0:	2207      	movs	r2, #7
 80012c2:	f104 0120 	add.w	r1, r4, #32
 80012c6:	f104 0021 	add.w	r0, r4, #33	; 0x21
 80012ca:	f004 fa09 	bl	80056e0 <memmove>
 80012ce:	2207      	movs	r2, #7
 80012d0:	f104 0128 	add.w	r1, r4, #40	; 0x28
 80012d4:	f104 0029 	add.w	r0, r4, #41	; 0x29
 80012d8:	f004 fa02 	bl	80056e0 <memmove>
 80012dc:	2207      	movs	r2, #7
 80012de:	f104 0130 	add.w	r1, r4, #48	; 0x30
 80012e2:	f104 0031 	add.w	r0, r4, #49	; 0x31
 80012e6:	f004 f9fb 	bl	80056e0 <memmove>
 80012ea:	2207      	movs	r2, #7
 80012ec:	f104 0138 	add.w	r1, r4, #56	; 0x38
 80012f0:	f104 0039 	add.w	r0, r4, #57	; 0x39
 80012f4:	f004 f9f4 	bl	80056e0 <memmove>
 80012f8:	2207      	movs	r2, #7
 80012fa:	f104 0140 	add.w	r1, r4, #64	; 0x40
 80012fe:	f104 0041 	add.w	r0, r4, #65	; 0x41
 8001302:	f004 f9ed 	bl	80056e0 <memmove>
				m_OutFrame[i][0] = 0;
 8001306:	2300      	movs	r3, #0
 8001308:	7223      	strb	r3, [r4, #8]
 800130a:	7423      	strb	r3, [r4, #16]
 800130c:	7623      	strb	r3, [r4, #24]
 800130e:	f884 3020 	strb.w	r3, [r4, #32]
 8001312:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 8001316:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 800131a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 800131e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8001322:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001326:	f100 0109 	add.w	r1, r0, #9
 800132a:	2207      	movs	r2, #7
 800132c:	3008      	adds	r0, #8
 800132e:	f004 f9d7 	bl	80056e0 <memmove>
 8001332:	2207      	movs	r2, #7
 8001334:	f104 0111 	add.w	r1, r4, #17
 8001338:	f104 0010 	add.w	r0, r4, #16
 800133c:	f004 f9d0 	bl	80056e0 <memmove>
 8001340:	2207      	movs	r2, #7
 8001342:	f104 0119 	add.w	r1, r4, #25
 8001346:	f104 0018 	add.w	r0, r4, #24
 800134a:	f004 f9c9 	bl	80056e0 <memmove>
 800134e:	2207      	movs	r2, #7
 8001350:	f104 0121 	add.w	r1, r4, #33	; 0x21
 8001354:	f104 0020 	add.w	r0, r4, #32
 8001358:	f004 f9c2 	bl	80056e0 <memmove>
 800135c:	2207      	movs	r2, #7
 800135e:	f104 0129 	add.w	r1, r4, #41	; 0x29
 8001362:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8001366:	f004 f9bb 	bl	80056e0 <memmove>
 800136a:	2207      	movs	r2, #7
 800136c:	f104 0131 	add.w	r1, r4, #49	; 0x31
 8001370:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8001374:	f004 f9b4 	bl	80056e0 <memmove>
 8001378:	2207      	movs	r2, #7
 800137a:	f104 0139 	add.w	r1, r4, #57	; 0x39
 800137e:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8001382:	f004 f9ad 	bl	80056e0 <memmove>
 8001386:	2207      	movs	r2, #7
 8001388:	f104 0141 	add.w	r1, r4, #65	; 0x41
 800138c:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8001390:	f004 f9a6 	bl	80056e0 <memmove>
				m_OutFrame[i][7] = 0;
 8001394:	2300      	movs	r3, #0
 8001396:	73e3      	strb	r3, [r4, #15]
 8001398:	75e3      	strb	r3, [r4, #23]
 800139a:	77e3      	strb	r3, [r4, #31]
 800139c:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
 80013a0:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
 80013a4:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
 80013a8:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80013ac:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
}
 80013b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					m_OutFrame[z][x] <<= 1;
 80013b4:	7a00      	ldrb	r0, [r0, #8]
 80013b6:	7c21      	ldrb	r1, [r4, #16]
 80013b8:	7e22      	ldrb	r2, [r4, #24]
 80013ba:	f894 3020 	ldrb.w	r3, [r4, #32]
 80013be:	0040      	lsls	r0, r0, #1
 80013c0:	0049      	lsls	r1, r1, #1
 80013c2:	0052      	lsls	r2, r2, #1
 80013c4:	005b      	lsls	r3, r3, #1
 80013c6:	f894 6028 	ldrb.w	r6, [r4, #40]	; 0x28
 80013ca:	f894 5030 	ldrb.w	r5, [r4, #48]	; 0x30
 80013ce:	7220      	strb	r0, [r4, #8]
 80013d0:	7421      	strb	r1, [r4, #16]
 80013d2:	f894 0038 	ldrb.w	r0, [r4, #56]	; 0x38
 80013d6:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
 80013da:	7622      	strb	r2, [r4, #24]
 80013dc:	f884 3020 	strb.w	r3, [r4, #32]
 80013e0:	7a62      	ldrb	r2, [r4, #9]
 80013e2:	7c63      	ldrb	r3, [r4, #17]
 80013e4:	0076      	lsls	r6, r6, #1
 80013e6:	006d      	lsls	r5, r5, #1
 80013e8:	0040      	lsls	r0, r0, #1
 80013ea:	0049      	lsls	r1, r1, #1
 80013ec:	0052      	lsls	r2, r2, #1
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
 80013f4:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
 80013f8:	7e66      	ldrb	r6, [r4, #25]
 80013fa:	f894 5021 	ldrb.w	r5, [r4, #33]	; 0x21
 80013fe:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
 8001402:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
 8001406:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
 800140a:	f894 1031 	ldrb.w	r1, [r4, #49]	; 0x31
 800140e:	7262      	strb	r2, [r4, #9]
 8001410:	7463      	strb	r3, [r4, #17]
 8001412:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8001416:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800141a:	0076      	lsls	r6, r6, #1
 800141c:	006d      	lsls	r5, r5, #1
 800141e:	0040      	lsls	r0, r0, #1
 8001420:	0049      	lsls	r1, r1, #1
 8001422:	0052      	lsls	r2, r2, #1
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	7666      	strb	r6, [r4, #25]
 8001428:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
 800142c:	f884 1031 	strb.w	r1, [r4, #49]	; 0x31
 8001430:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
 8001434:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8001438:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
 800143c:	7aa0      	ldrb	r0, [r4, #10]
 800143e:	7ca1      	ldrb	r1, [r4, #18]
 8001440:	7ea2      	ldrb	r2, [r4, #26]
 8001442:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8001446:	0040      	lsls	r0, r0, #1
 8001448:	0049      	lsls	r1, r1, #1
 800144a:	0052      	lsls	r2, r2, #1
 800144c:	005b      	lsls	r3, r3, #1
 800144e:	f894 602a 	ldrb.w	r6, [r4, #42]	; 0x2a
 8001452:	f894 5032 	ldrb.w	r5, [r4, #50]	; 0x32
 8001456:	72a0      	strb	r0, [r4, #10]
 8001458:	74a1      	strb	r1, [r4, #18]
 800145a:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
 800145e:	f894 1042 	ldrb.w	r1, [r4, #66]	; 0x42
 8001462:	76a2      	strb	r2, [r4, #26]
 8001464:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 8001468:	7ae2      	ldrb	r2, [r4, #11]
 800146a:	7ce3      	ldrb	r3, [r4, #19]
 800146c:	0076      	lsls	r6, r6, #1
 800146e:	006d      	lsls	r5, r5, #1
 8001470:	0040      	lsls	r0, r0, #1
 8001472:	0049      	lsls	r1, r1, #1
 8001474:	0052      	lsls	r2, r2, #1
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
 800147c:	f884 5032 	strb.w	r5, [r4, #50]	; 0x32
 8001480:	7ee6      	ldrb	r6, [r4, #27]
 8001482:	f894 5023 	ldrb.w	r5, [r4, #35]	; 0x23
 8001486:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
 800148a:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800148e:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
 8001492:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
 8001496:	72e2      	strb	r2, [r4, #11]
 8001498:	74e3      	strb	r3, [r4, #19]
 800149a:	f894 203b 	ldrb.w	r2, [r4, #59]	; 0x3b
 800149e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80014a2:	0076      	lsls	r6, r6, #1
 80014a4:	006d      	lsls	r5, r5, #1
 80014a6:	0040      	lsls	r0, r0, #1
 80014a8:	0049      	lsls	r1, r1, #1
 80014aa:	0052      	lsls	r2, r2, #1
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	76e6      	strb	r6, [r4, #27]
 80014b0:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
 80014b4:	f884 1033 	strb.w	r1, [r4, #51]	; 0x33
 80014b8:	f884 203b 	strb.w	r2, [r4, #59]	; 0x3b
 80014bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80014c0:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
 80014c4:	7b20      	ldrb	r0, [r4, #12]
 80014c6:	7d21      	ldrb	r1, [r4, #20]
 80014c8:	7f22      	ldrb	r2, [r4, #28]
 80014ca:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80014ce:	0040      	lsls	r0, r0, #1
 80014d0:	0049      	lsls	r1, r1, #1
 80014d2:	0052      	lsls	r2, r2, #1
 80014d4:	005b      	lsls	r3, r3, #1
 80014d6:	f894 602c 	ldrb.w	r6, [r4, #44]	; 0x2c
 80014da:	f894 5034 	ldrb.w	r5, [r4, #52]	; 0x34
 80014de:	7320      	strb	r0, [r4, #12]
 80014e0:	7521      	strb	r1, [r4, #20]
 80014e2:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
 80014e6:	f894 1044 	ldrb.w	r1, [r4, #68]	; 0x44
 80014ea:	7722      	strb	r2, [r4, #28]
 80014ec:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 80014f0:	7b62      	ldrb	r2, [r4, #13]
 80014f2:	7d63      	ldrb	r3, [r4, #21]
 80014f4:	0076      	lsls	r6, r6, #1
 80014f6:	006d      	lsls	r5, r5, #1
 80014f8:	0040      	lsls	r0, r0, #1
 80014fa:	0049      	lsls	r1, r1, #1
 80014fc:	0052      	lsls	r2, r2, #1
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
 8001504:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 8001508:	7f66      	ldrb	r6, [r4, #29]
 800150a:	f894 5025 	ldrb.w	r5, [r4, #37]	; 0x25
 800150e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 8001512:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
 8001516:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
 800151a:	f894 1035 	ldrb.w	r1, [r4, #53]	; 0x35
 800151e:	7362      	strb	r2, [r4, #13]
 8001520:	7563      	strb	r3, [r4, #21]
 8001522:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8001526:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800152a:	0076      	lsls	r6, r6, #1
 800152c:	006d      	lsls	r5, r5, #1
 800152e:	0040      	lsls	r0, r0, #1
 8001530:	0049      	lsls	r1, r1, #1
 8001532:	0052      	lsls	r2, r2, #1
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	7766      	strb	r6, [r4, #29]
 8001538:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
 800153c:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
 8001540:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 8001544:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001548:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
 800154c:	7ba0      	ldrb	r0, [r4, #14]
 800154e:	7da1      	ldrb	r1, [r4, #22]
 8001550:	7fa2      	ldrb	r2, [r4, #30]
 8001552:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8001556:	0040      	lsls	r0, r0, #1
 8001558:	0049      	lsls	r1, r1, #1
 800155a:	0052      	lsls	r2, r2, #1
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	f894 602e 	ldrb.w	r6, [r4, #46]	; 0x2e
 8001562:	f894 5036 	ldrb.w	r5, [r4, #54]	; 0x36
 8001566:	73a0      	strb	r0, [r4, #14]
 8001568:	75a1      	strb	r1, [r4, #22]
 800156a:	f894 003e 	ldrb.w	r0, [r4, #62]	; 0x3e
 800156e:	f894 1046 	ldrb.w	r1, [r4, #70]	; 0x46
 8001572:	77a2      	strb	r2, [r4, #30]
 8001574:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
 8001578:	7be2      	ldrb	r2, [r4, #15]
 800157a:	7de3      	ldrb	r3, [r4, #23]
 800157c:	0076      	lsls	r6, r6, #1
 800157e:	006d      	lsls	r5, r5, #1
 8001580:	0040      	lsls	r0, r0, #1
 8001582:	0049      	lsls	r1, r1, #1
 8001584:	0052      	lsls	r2, r2, #1
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	f884 602e 	strb.w	r6, [r4, #46]	; 0x2e
 800158c:	f884 5036 	strb.w	r5, [r4, #54]	; 0x36
 8001590:	7fe6      	ldrb	r6, [r4, #31]
 8001592:	f894 5027 	ldrb.w	r5, [r4, #39]	; 0x27
 8001596:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
 800159a:	f884 1046 	strb.w	r1, [r4, #70]	; 0x46
 800159e:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
 80015a2:	f894 1037 	ldrb.w	r1, [r4, #55]	; 0x37
 80015a6:	73e2      	strb	r2, [r4, #15]
 80015a8:	75e3      	strb	r3, [r4, #23]
 80015aa:	f894 203f 	ldrb.w	r2, [r4, #63]	; 0x3f
 80015ae:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
 80015b2:	0076      	lsls	r6, r6, #1
 80015b4:	006d      	lsls	r5, r5, #1
 80015b6:	0040      	lsls	r0, r0, #1
 80015b8:	0049      	lsls	r1, r1, #1
 80015ba:	0052      	lsls	r2, r2, #1
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	e626      	b.n	800120e <_ZN4Cube5shiftE9Direction+0x226>
 80015c0:	4607      	mov	r7, r0
 80015c2:	4606      	mov	r6, r0
 80015c4:	4605      	mov	r5, r0
 80015c6:	4601      	mov	r1, r0
 80015c8:	4602      	mov	r2, r0
 80015ca:	f857 ef10 	ldr.w	lr, [r7, #16]!
 80015ce:	4603      	mov	r3, r0
 80015d0:	f8d7 c004 	ldr.w	ip, [r7, #4]
 80015d4:	f8c0 e008 	str.w	lr, [r0, #8]
 80015d8:	f8c0 c00c 	str.w	ip, [r0, #12]
 80015dc:	f04f 0c00 	mov.w	ip, #0
 80015e0:	f856 8f18 	ldr.w	r8, [r6, #24]!
 80015e4:	f8d6 e004 	ldr.w	lr, [r6, #4]
 80015e8:	f8c0 8010 	str.w	r8, [r0, #16]
 80015ec:	f8c7 e004 	str.w	lr, [r7, #4]
 80015f0:	f855 ef20 	ldr.w	lr, [r5, #32]!
 80015f4:	686f      	ldr	r7, [r5, #4]
 80015f6:	f8c0 e018 	str.w	lr, [r0, #24]
 80015fa:	6077      	str	r7, [r6, #4]
 80015fc:	f850 7f28 	ldr.w	r7, [r0, #40]!
 8001600:	6846      	ldr	r6, [r0, #4]
 8001602:	6227      	str	r7, [r4, #32]
 8001604:	606e      	str	r6, [r5, #4]
 8001606:	f851 6f30 	ldr.w	r6, [r1, #48]!
 800160a:	684d      	ldr	r5, [r1, #4]
 800160c:	62a6      	str	r6, [r4, #40]	; 0x28
 800160e:	6045      	str	r5, [r0, #4]
 8001610:	f852 5f38 	ldr.w	r5, [r2, #56]!
 8001614:	6850      	ldr	r0, [r2, #4]
 8001616:	6325      	str	r5, [r4, #48]	; 0x30
 8001618:	6048      	str	r0, [r1, #4]
 800161a:	f853 0f40 	ldr.w	r0, [r3, #64]!
 800161e:	6859      	ldr	r1, [r3, #4]
 8001620:	63a0      	str	r0, [r4, #56]	; 0x38
 8001622:	6051      	str	r1, [r2, #4]
 8001624:	f8c4 c040 	str.w	ip, [r4, #64]	; 0x40
 8001628:	f8c3 c004 	str.w	ip, [r3, #4]
}
 800162c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001630 <_ZN4Cube20walk_and_flying_WallEv>:
{
 8001630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (m_IsModeSwitched)
 8001634:	f890 3049 	ldrb.w	r3, [r0, #73]	; 0x49
{
 8001638:	4605      	mov	r5, r0
 800163a:	b083      	sub	sp, #12
	if (m_IsModeSwitched)
 800163c:	2b00      	cmp	r3, #0
 800163e:	d049      	beq.n	80016d4 <_ZN4Cube20walk_and_flying_WallEv+0xa4>
 8001640:	f100 0608 	add.w	r6, r0, #8
 8001644:	2240      	movs	r2, #64	; 0x40
 8001646:	4630      	mov	r0, r6
 8001648:	2100      	movs	r1, #0
 800164a:	f004 f863 	bl	8005714 <memset>
		uint8_t axis = getRandomNumber(0, 2);
 800164e:	2102      	movs	r1, #2
 8001650:	2000      	movs	r0, #0
 8001652:	f000 f97f 	bl	8001954 <_Z15getRandomNumberii>
		wallPosition = getRandomNumber(0, 1) * 7;
 8001656:	2101      	movs	r1, #1
		uint8_t axis = getRandomNumber(0, 2);
 8001658:	4604      	mov	r4, r0
		wallPosition = getRandomNumber(0, 1) * 7;
 800165a:	2000      	movs	r0, #0
 800165c:	f000 f97a 	bl	8001954 <_Z15getRandomNumberii>
    m_OutFrame[7 - z][x] &= ~(128 >> y); 							//сбрасываем бит
 8001660:	2280      	movs	r2, #128	; 0x80
 8001662:	f06f 0107 	mvn.w	r1, #7
		wallPosition = getRandomNumber(0, 1) * 7;
 8001666:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800166a:	4633      	mov	r3, r6
 800166c:	b2c6      	uxtb	r6, r0
 800166e:	ebc6 7946 	rsb	r9, r6, r6, lsl #29
    m_OutFrame[7 - z][x] &= ~(128 >> y); 							//сбрасываем бит
 8001672:	4693      	mov	fp, r2
 8001674:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8001678:	4132      	asrs	r2, r6
 800167a:	1b49      	subs	r1, r1, r5
 800167c:	b250      	sxtb	r0, r2
    m_OutFrame[7 - z][x] |= (128 >> y) * set_num; 						//устанавливаем 0 или 1 в зависимости от set_num
 800167e:	f04f 0aff 	mov.w	sl, #255	; 0xff
		uint8_t axis = getRandomNumber(0, 2);
 8001682:	b2e4      	uxtb	r4, r4
		wallPosition = getRandomNumber(0, 1) * 7;
 8001684:	f885 6054 	strb.w	r6, [r5, #84]	; 0x54
	for(uint8_t j = 0; j < 8; ++j)
 8001688:	f109 0938 	add.w	r9, r9, #56	; 0x38
    m_OutFrame[7 - z][x] |= (128 >> y) * set_num; 						//устанавливаем 0 или 1 в зависимости от set_num
 800168c:	19aa      	adds	r2, r5, r6
    m_OutFrame[7 - z][x] &= ~(128 >> y); 							//сбрасываем бит
 800168e:	9101      	str	r1, [sp, #4]
 8001690:	f105 0710 	add.w	r7, r5, #16
 8001694:	e004      	b.n	80016a0 <_ZN4Cube20walk_and_flying_WallEv+0x70>
			switch(axis)
 8001696:	2c00      	cmp	r4, #0
 8001698:	d050      	beq.n	800173c <_ZN4Cube20walk_and_flying_WallEv+0x10c>
	for(uint8_t j = 0; j < 8; ++j)
 800169a:	3301      	adds	r3, #1
 800169c:	42bb      	cmp	r3, r7
 800169e:	d008      	beq.n	80016b2 <_ZN4Cube20walk_and_flying_WallEv+0x82>
			switch(axis)
 80016a0:	2c01      	cmp	r4, #1
 80016a2:	d021      	beq.n	80016e8 <_ZN4Cube20walk_and_flying_WallEv+0xb8>
 80016a4:	2c02      	cmp	r4, #2
 80016a6:	d1f6      	bne.n	8001696 <_ZN4Cube20walk_and_flying_WallEv+0x66>
    m_OutFrame[7 - z][x] |= (128 >> y) * set_num; 						//устанавливаем 0 или 1 в зависимости от set_num
 80016a8:	f803 a009 	strb.w	sl, [r3, r9]
	for(uint8_t j = 0; j < 8; ++j)
 80016ac:	3301      	adds	r3, #1
 80016ae:	42bb      	cmp	r3, r7
 80016b0:	d1f6      	bne.n	80016a0 <_ZN4Cube20walk_and_flying_WallEv+0x70>
		switch(static_cast<Axis>(axis))
 80016b2:	2c01      	cmp	r4, #1
 80016b4:	f000 80ad 	beq.w	8001812 <_ZN4Cube20walk_and_flying_WallEv+0x1e2>
 80016b8:	2c02      	cmp	r4, #2
 80016ba:	f000 80a1 	beq.w	8001800 <_ZN4Cube20walk_and_flying_WallEv+0x1d0>
 80016be:	2c00      	cmp	r4, #0
 80016c0:	f000 80a3 	beq.w	800180a <_ZN4Cube20walk_and_flying_WallEv+0x1da>
		isLooped = 0;
 80016c4:	2300      	movs	r3, #0
 80016c6:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
		m_IsModeSwitched = 0;
 80016ca:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
		m_lastTrigger = HAL_GetTick();
 80016ce:	f000 fd3b 	bl	8002148 <HAL_GetTick>
 80016d2:	6668      	str	r0, [r5, #100]	; 0x64
	if (HAL_GetTick() - m_lastTrigger > m_modeTimer)
 80016d4:	f000 fd38 	bl	8002148 <HAL_GetTick>
 80016d8:	e9d5 2319 	ldrd	r2, r3, [r5, #100]	; 0x64
 80016dc:	1a80      	subs	r0, r0, r2
 80016de:	4298      	cmp	r0, r3
 80016e0:	d861      	bhi.n	80017a6 <_ZN4Cube20walk_and_flying_WallEv+0x176>
}
 80016e2:	b003      	add	sp, #12
 80016e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    m_OutFrame[7 - z][x] |= (128 >> y) * set_num; 						//устанавливаем 0 или 1 в зависимости от set_num
 80016e8:	f893 c038 	ldrb.w	ip, [r3, #56]	; 0x38
 80016ec:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
 80016f0:	ea40 0c0c 	orr.w	ip, r0, ip
 80016f4:	4301      	orrs	r1, r0
 80016f6:	f893 e028 	ldrb.w	lr, [r3, #40]	; 0x28
 80016fa:	f883 c038 	strb.w	ip, [r3, #56]	; 0x38
 80016fe:	f883 1030 	strb.w	r1, [r3, #48]	; 0x30
 8001702:	f893 c020 	ldrb.w	ip, [r3, #32]
 8001706:	7e19      	ldrb	r1, [r3, #24]
 8001708:	ea40 0e0e 	orr.w	lr, r0, lr
 800170c:	ea40 0c0c 	orr.w	ip, r0, ip
 8001710:	4301      	orrs	r1, r0
 8001712:	f883 e028 	strb.w	lr, [r3, #40]	; 0x28
 8001716:	f883 c020 	strb.w	ip, [r3, #32]
 800171a:	f893 e010 	ldrb.w	lr, [r3, #16]
 800171e:	f893 c008 	ldrb.w	ip, [r3, #8]
 8001722:	7619      	strb	r1, [r3, #24]
 8001724:	7819      	ldrb	r1, [r3, #0]
 8001726:	ea40 0e0e 	orr.w	lr, r0, lr
 800172a:	ea40 0c0c 	orr.w	ip, r0, ip
 800172e:	4301      	orrs	r1, r0
 8001730:	f883 e010 	strb.w	lr, [r3, #16]
 8001734:	f883 c008 	strb.w	ip, [r3, #8]
 8001738:	7019      	strb	r1, [r3, #0]
 800173a:	e7ae      	b.n	800169a <_ZN4Cube20walk_and_flying_WallEv+0x6a>
    m_OutFrame[7 - z][x] &= ~(128 >> y); 							//сбрасываем бит
 800173c:	9901      	ldr	r1, [sp, #4]
    m_OutFrame[7 - z][x] |= (128 >> y) * set_num; 						//устанавливаем 0 или 1 в зависимости от set_num
 800173e:	f892 c040 	ldrb.w	ip, [r2, #64]	; 0x40
    m_OutFrame[7 - z][x] &= ~(128 >> y); 							//сбрасываем бит
 8001742:	4419      	add	r1, r3
    m_OutFrame[7 - z][x] |= (128 >> y) * set_num; 						//устанавливаем 0 или 1 в зависимости от set_num
 8001744:	f892 8038 	ldrb.w	r8, [r2, #56]	; 0x38
    m_OutFrame[7 - z][x] &= ~(128 >> y); 							//сбрасываем бит
 8001748:	fa4b f101 	asr.w	r1, fp, r1
 800174c:	b249      	sxtb	r1, r1
    m_OutFrame[7 - z][x] |= (128 >> y) * set_num; 						//устанавливаем 0 или 1 в зависимости от set_num
 800174e:	ea41 0c0c 	orr.w	ip, r1, ip
 8001752:	ea41 0808 	orr.w	r8, r1, r8
 8001756:	f892 e030 	ldrb.w	lr, [r2, #48]	; 0x30
 800175a:	f882 c040 	strb.w	ip, [r2, #64]	; 0x40
 800175e:	f882 8038 	strb.w	r8, [r2, #56]	; 0x38
 8001762:	f892 c028 	ldrb.w	ip, [r2, #40]	; 0x28
 8001766:	f892 8020 	ldrb.w	r8, [r2, #32]
 800176a:	ea41 0e0e 	orr.w	lr, r1, lr
 800176e:	ea41 0c0c 	orr.w	ip, r1, ip
 8001772:	ea41 0808 	orr.w	r8, r1, r8
 8001776:	f882 e030 	strb.w	lr, [r2, #48]	; 0x30
 800177a:	f882 c028 	strb.w	ip, [r2, #40]	; 0x28
 800177e:	f892 e018 	ldrb.w	lr, [r2, #24]
 8001782:	f892 c010 	ldrb.w	ip, [r2, #16]
 8001786:	f882 8020 	strb.w	r8, [r2, #32]
 800178a:	f892 8008 	ldrb.w	r8, [r2, #8]
 800178e:	ea41 0e0e 	orr.w	lr, r1, lr
 8001792:	ea41 0c0c 	orr.w	ip, r1, ip
 8001796:	ea41 0108 	orr.w	r1, r1, r8
 800179a:	f882 e018 	strb.w	lr, [r2, #24]
 800179e:	f882 c010 	strb.w	ip, [r2, #16]
 80017a2:	7211      	strb	r1, [r2, #8]
 80017a4:	e779      	b.n	800169a <_ZN4Cube20walk_and_flying_WallEv+0x6a>
		m_lastTrigger = HAL_GetTick();
 80017a6:	f000 fccf 	bl	8002148 <HAL_GetTick>
		shift(wallDirection);
 80017aa:	f895 1053 	ldrb.w	r1, [r5, #83]	; 0x53
		m_lastTrigger = HAL_GetTick();
 80017ae:	6668      	str	r0, [r5, #100]	; 0x64
		shift(wallDirection);
 80017b0:	4628      	mov	r0, r5
 80017b2:	f7ff fc19 	bl	8000fe8 <_ZN4Cube5shiftE9Direction>
		if (wallDirection % 2 == 0)
 80017b6:	f895 2053 	ldrb.w	r2, [r5, #83]	; 0x53
			if (++wallPosition == 7)
 80017ba:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
		if (wallDirection % 2 == 0)
 80017be:	07d1      	lsls	r1, r2, #31
 80017c0:	d40c      	bmi.n	80017dc <_ZN4Cube20walk_and_flying_WallEv+0x1ac>
			if (++wallPosition == 7)
 80017c2:	3301      	adds	r3, #1
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	2b07      	cmp	r3, #7
 80017c8:	f885 3054 	strb.w	r3, [r5, #84]	; 0x54
 80017cc:	d189      	bne.n	80016e2 <_ZN4Cube20walk_and_flying_WallEv+0xb2>
				if (isLooped)
 80017ce:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
 80017d2:	b37b      	cbz	r3, 8001834 <_ZN4Cube20walk_and_flying_WallEv+0x204>
					m_IsModeSwitched = 1;			//когда достигло края, перезагружаем режим
 80017d4:	2301      	movs	r3, #1
 80017d6:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
 80017da:	e782      	b.n	80016e2 <_ZN4Cube20walk_and_flying_WallEv+0xb2>
			if (--wallPosition == 0)
 80017dc:	3b01      	subs	r3, #1
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	f885 3054 	strb.w	r3, [r5, #84]	; 0x54
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	f47f af7c 	bne.w	80016e2 <_ZN4Cube20walk_and_flying_WallEv+0xb2>
				if (isLooped)
 80017ea:	f895 3055 	ldrb.w	r3, [r5, #85]	; 0x55
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d1f0      	bne.n	80017d4 <_ZN4Cube20walk_and_flying_WallEv+0x1a4>
					isLooped = 1;
 80017f2:	2301      	movs	r3, #1
					wallDirection = static_cast<Direction>(static_cast<uint8_t>(wallDirection) - 1);
 80017f4:	3a01      	subs	r2, #1
 80017f6:	f885 2053 	strb.w	r2, [r5, #83]	; 0x53
					isLooped = 1;
 80017fa:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
}
 80017fe:	e770      	b.n	80016e2 <_ZN4Cube20walk_and_flying_WallEv+0xb2>
				if(wallPosition == 0)
 8001800:	b966      	cbnz	r6, 800181c <_ZN4Cube20walk_and_flying_WallEv+0x1ec>
					wallDirection = POS_Z;
 8001802:	2304      	movs	r3, #4
 8001804:	f885 3053 	strb.w	r3, [r5, #83]	; 0x53
 8001808:	e75c      	b.n	80016c4 <_ZN4Cube20walk_and_flying_WallEv+0x94>
				if(wallPosition == 0)
 800180a:	b95e      	cbnz	r6, 8001824 <_ZN4Cube20walk_and_flying_WallEv+0x1f4>
					wallDirection = POS_X;
 800180c:	f885 6053 	strb.w	r6, [r5, #83]	; 0x53
 8001810:	e758      	b.n	80016c4 <_ZN4Cube20walk_and_flying_WallEv+0x94>
				if(wallPosition == 0)
 8001812:	b95e      	cbnz	r6, 800182c <_ZN4Cube20walk_and_flying_WallEv+0x1fc>
					wallDirection = POS_Y;
 8001814:	2302      	movs	r3, #2
 8001816:	f885 3053 	strb.w	r3, [r5, #83]	; 0x53
 800181a:	e753      	b.n	80016c4 <_ZN4Cube20walk_and_flying_WallEv+0x94>
					wallDirection = NEG_Z;
 800181c:	2305      	movs	r3, #5
 800181e:	f885 3053 	strb.w	r3, [r5, #83]	; 0x53
 8001822:	e74f      	b.n	80016c4 <_ZN4Cube20walk_and_flying_WallEv+0x94>
					wallDirection = NEG_X;
 8001824:	2301      	movs	r3, #1
 8001826:	f885 3053 	strb.w	r3, [r5, #83]	; 0x53
 800182a:	e74b      	b.n	80016c4 <_ZN4Cube20walk_and_flying_WallEv+0x94>
					wallDirection = NEG_Y;
 800182c:	2303      	movs	r3, #3
 800182e:	f885 3053 	strb.w	r3, [r5, #83]	; 0x53
 8001832:	e747      	b.n	80016c4 <_ZN4Cube20walk_and_flying_WallEv+0x94>
					isLooped = 1;
 8001834:	2301      	movs	r3, #1
					wallDirection = static_cast<Direction>(static_cast<uint8_t>(wallDirection) + 1);  //Это просто работает
 8001836:	441a      	add	r2, r3
 8001838:	f885 2053 	strb.w	r2, [r5, #83]	; 0x53
					isLooped = 1;
 800183c:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 8001840:	e74f      	b.n	80016e2 <_ZN4Cube20walk_and_flying_WallEv+0xb2>
 8001842:	bf00      	nop

08001844 <_ZN4Cube7getFontEhh>:
#include "Cube.h"


uint8_t Cube::getFont(uint8_t font, uint8_t layer)
{
    font = font - '0' + 16;			//перевод символа из таблицы ASCII в номер согласно нумерации массива
 8001844:	3920      	subs	r1, #32
 8001846:	b2c9      	uxtb	r1, r1
    if (font < 126)
 8001848:	297d      	cmp	r1, #125	; 0x7d
    {
	return fontBIN[font][7 - layer];	// для английских букв и символов
 800184a:	4b04      	ldr	r3, [pc, #16]	; (800185c <_ZN4Cube7getFontEhh+0x18>)
    }
    else
    {
	return fontBIN[font - 65][7 - layer];		// для русских букв и символов (смещение -65 по массиву)
 800184c:	bf88      	it	hi
 800184e:	3941      	subhi	r1, #65	; 0x41
 8001850:	f1c2 0207 	rsb	r2, r2, #7
 8001854:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8001858:	5c88      	ldrb	r0, [r1, r2]
    }
}
 800185a:	4770      	bx	lr
 800185c:	080068b0 	.word	0x080068b0

08001860 <_Z14SwitchingModesv>:
 */
#include "Menu.h"


void SwitchingModes()
{
 8001860:	b510      	push	{r4, lr}

    if ((IsButtonPressed.IsButtonPressedRx >> LB) & 1)
 8001862:	4c0c      	ldr	r4, [pc, #48]	; (8001894 <_Z14SwitchingModesv+0x34>)
 8001864:	8823      	ldrh	r3, [r4, #0]
 8001866:	07da      	lsls	r2, r3, #31
 8001868:	d40a      	bmi.n	8001880 <_Z14SwitchingModesv+0x20>
    {
	cube.incCurrentMode();
	IsButtonPressed.IsButtonPressedRx &= ~(1 << LB);
    }
    if ((IsButtonPressed.IsButtonPressedRx >> LU) & 1)
 800186a:	075b      	lsls	r3, r3, #29
 800186c:	d400      	bmi.n	8001870 <_Z14SwitchingModesv+0x10>
    {
	cube.decCurrentMode();
	IsButtonPressed.IsButtonPressedRx &= ~(1 << LU);
    }
}
 800186e:	bd10      	pop	{r4, pc}
	cube.decCurrentMode();
 8001870:	4809      	ldr	r0, [pc, #36]	; (8001898 <_Z14SwitchingModesv+0x38>)
 8001872:	f7ff f9b1 	bl	8000bd8 <_ZN4Cube14decCurrentModeEv>
	IsButtonPressed.IsButtonPressedRx &= ~(1 << LU);
 8001876:	8823      	ldrh	r3, [r4, #0]
 8001878:	f023 0304 	bic.w	r3, r3, #4
 800187c:	8023      	strh	r3, [r4, #0]
}
 800187e:	bd10      	pop	{r4, pc}
	cube.incCurrentMode();
 8001880:	4805      	ldr	r0, [pc, #20]	; (8001898 <_Z14SwitchingModesv+0x38>)
 8001882:	f7ff f99f 	bl	8000bc4 <_ZN4Cube14incCurrentModeEv>
	IsButtonPressed.IsButtonPressedRx &= ~(1 << LB);
 8001886:	8823      	ldrh	r3, [r4, #0]
 8001888:	f023 0301 	bic.w	r3, r3, #1
 800188c:	b29b      	uxth	r3, r3
 800188e:	8023      	strh	r3, [r4, #0]
 8001890:	e7eb      	b.n	800186a <_Z14SwitchingModesv+0xa>
 8001892:	bf00      	nop
 8001894:	200000f4 	.word	0x200000f4
 8001898:	200000f8 	.word	0x200000f8

0800189c <_Z13ChangingSpeedv>:



void ChangingSpeed()
{
 800189c:	b510      	push	{r4, lr}
    if ((IsButtonPressed.IsButtonPressedRx >> LL) & 1)
 800189e:	4c2b      	ldr	r4, [pc, #172]	; (800194c <_Z13ChangingSpeedv+0xb0>)
 80018a0:	8823      	ldrh	r3, [r4, #0]
 80018a2:	0799      	lsls	r1, r3, #30
 80018a4:	d41d      	bmi.n	80018e2 <_Z13ChangingSpeedv+0x46>
    }
    /*
     * Чтобы не сбить таймер в режиме, пропускаем инкремент скорости
     * и на всякий случай сбрасываем флаги "кнопок"
     */
    if(cube.getMode() == CONST_CHANGE_BRIGHTNESS)
 80018a6:	482a      	ldr	r0, [pc, #168]	; (8001950 <_Z13ChangingSpeedv+0xb4>)
 80018a8:	f7ff f91c 	bl	8000ae4 <_ZN4Cube7getModeEv>
 80018ac:	2807      	cmp	r0, #7
    {
	IsButtonPressed.IsButtonPressedRx &= ~(1 << RB);
	IsButtonPressed.IsButtonPressedRx &= ~(1 << RU);
 80018ae:	8823      	ldrh	r3, [r4, #0]
    if(cube.getMode() == CONST_CHANGE_BRIGHTNESS)
 80018b0:	d027      	beq.n	8001902 <_Z13ChangingSpeedv+0x66>
	return;
    }

    if ((IsButtonPressed.IsButtonPressedRx >> RB) & 1)
 80018b2:	06da      	lsls	r2, r3, #27
 80018b4:	d429      	bmi.n	800190a <_Z13ChangingSpeedv+0x6e>
	    cube.setSpeed(1000);
	}
	IsButtonPressed.IsButtonPressedRx &= ~(1 << RB);
    }

    if ((IsButtonPressed.IsButtonPressedRx >> RU) & 1)
 80018b6:	065b      	lsls	r3, r3, #25
 80018b8:	d400      	bmi.n	80018bc <_Z13ChangingSpeedv+0x20>
	    cube.setSpeed(0);
	}
	IsButtonPressed.IsButtonPressedRx &= ~(1 << RU);
    }

}
 80018ba:	bd10      	pop	{r4, pc}
	cube.setSpeed(cube.getSpeed() - 10);
 80018bc:	4824      	ldr	r0, [pc, #144]	; (8001950 <_Z13ChangingSpeedv+0xb4>)
 80018be:	f7ff f90f 	bl	8000ae0 <_ZN4Cube8getSpeedEv>
 80018c2:	f1a0 010a 	sub.w	r1, r0, #10
 80018c6:	b209      	sxth	r1, r1
 80018c8:	4821      	ldr	r0, [pc, #132]	; (8001950 <_Z13ChangingSpeedv+0xb4>)
 80018ca:	f7ff f907 	bl	8000adc <_ZN4Cube8setSpeedEs>
	if (cube.getSpeed() < 0)
 80018ce:	4820      	ldr	r0, [pc, #128]	; (8001950 <_Z13ChangingSpeedv+0xb4>)
 80018d0:	f7ff f906 	bl	8000ae0 <_ZN4Cube8getSpeedEv>
 80018d4:	2800      	cmp	r0, #0
 80018d6:	db33      	blt.n	8001940 <_Z13ChangingSpeedv+0xa4>
	IsButtonPressed.IsButtonPressedRx &= ~(1 << RU);
 80018d8:	8823      	ldrh	r3, [r4, #0]
 80018da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80018de:	8023      	strh	r3, [r4, #0]
}
 80018e0:	bd10      	pop	{r4, pc}
	cube.changeMode();
 80018e2:	481b      	ldr	r0, [pc, #108]	; (8001950 <_Z13ChangingSpeedv+0xb4>)
 80018e4:	f7ff f902 	bl	8000aec <_ZN4Cube10changeModeEv>
	uint8_t TxVar = cube.getMode();
 80018e8:	4819      	ldr	r0, [pc, #100]	; (8001950 <_Z13ChangingSpeedv+0xb4>)
 80018ea:	f7ff f8fb 	bl	8000ae4 <_ZN4Cube7getModeEv>
	IsButtonPressed.IsButtonPressedRx &= ~(1 << LL);
 80018ee:	8823      	ldrh	r3, [r4, #0]
    if(cube.getMode() == CONST_CHANGE_BRIGHTNESS)
 80018f0:	4817      	ldr	r0, [pc, #92]	; (8001950 <_Z13ChangingSpeedv+0xb4>)
	IsButtonPressed.IsButtonPressedRx &= ~(1 << LL);
 80018f2:	f023 0302 	bic.w	r3, r3, #2
 80018f6:	8023      	strh	r3, [r4, #0]
    if(cube.getMode() == CONST_CHANGE_BRIGHTNESS)
 80018f8:	f7ff f8f4 	bl	8000ae4 <_ZN4Cube7getModeEv>
 80018fc:	2807      	cmp	r0, #7
	IsButtonPressed.IsButtonPressedRx &= ~(1 << RU);
 80018fe:	8823      	ldrh	r3, [r4, #0]
    if(cube.getMode() == CONST_CHANGE_BRIGHTNESS)
 8001900:	d1d7      	bne.n	80018b2 <_Z13ChangingSpeedv+0x16>
	IsButtonPressed.IsButtonPressedRx &= ~(1 << RU);
 8001902:	f023 0350 	bic.w	r3, r3, #80	; 0x50
 8001906:	8023      	strh	r3, [r4, #0]
}
 8001908:	bd10      	pop	{r4, pc}
	cube.setSpeed(cube.getSpeed() + 10);
 800190a:	4811      	ldr	r0, [pc, #68]	; (8001950 <_Z13ChangingSpeedv+0xb4>)
 800190c:	f7ff f8e8 	bl	8000ae0 <_ZN4Cube8getSpeedEv>
 8001910:	f100 010a 	add.w	r1, r0, #10
 8001914:	b209      	sxth	r1, r1
 8001916:	480e      	ldr	r0, [pc, #56]	; (8001950 <_Z13ChangingSpeedv+0xb4>)
 8001918:	f7ff f8e0 	bl	8000adc <_ZN4Cube8setSpeedEs>
	if (cube.getSpeed() > 1000)
 800191c:	480c      	ldr	r0, [pc, #48]	; (8001950 <_Z13ChangingSpeedv+0xb4>)
 800191e:	f7ff f8df 	bl	8000ae0 <_ZN4Cube8getSpeedEv>
 8001922:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001926:	dc05      	bgt.n	8001934 <_Z13ChangingSpeedv+0x98>
	IsButtonPressed.IsButtonPressedRx &= ~(1 << RB);
 8001928:	8823      	ldrh	r3, [r4, #0]
 800192a:	f023 0310 	bic.w	r3, r3, #16
 800192e:	b29b      	uxth	r3, r3
 8001930:	8023      	strh	r3, [r4, #0]
 8001932:	e7c0      	b.n	80018b6 <_Z13ChangingSpeedv+0x1a>
	    cube.setSpeed(1000);
 8001934:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001938:	4805      	ldr	r0, [pc, #20]	; (8001950 <_Z13ChangingSpeedv+0xb4>)
 800193a:	f7ff f8cf 	bl	8000adc <_ZN4Cube8setSpeedEs>
 800193e:	e7f3      	b.n	8001928 <_Z13ChangingSpeedv+0x8c>
	    cube.setSpeed(0);
 8001940:	2100      	movs	r1, #0
 8001942:	4803      	ldr	r0, [pc, #12]	; (8001950 <_Z13ChangingSpeedv+0xb4>)
 8001944:	f7ff f8ca 	bl	8000adc <_ZN4Cube8setSpeedEs>
 8001948:	e7c6      	b.n	80018d8 <_Z13ChangingSpeedv+0x3c>
 800194a:	bf00      	nop
 800194c:	200000f4 	.word	0x200000f4
 8001950:	200000f8 	.word	0x200000f8

08001954 <_Z15getRandomNumberii>:
//#include "main.h"
#include "cstdlib"
// Генерируем рандомное число между значениями min и max
// Предполагается, что функцию srand() уже вызывали
int getRandomNumber(int min, int max)
{
 8001954:	b538      	push	{r3, r4, r5, lr}
 8001956:	4605      	mov	r5, r0
 8001958:	460c      	mov	r4, r1
    // Равномерно распределяем рандомное число в нашем диапазоне
    return (rand() % (max - min + 1)) + min;
 800195a:	f003 ff11 	bl	8005780 <rand>
 800195e:	1b61      	subs	r1, r4, r5
 8001960:	3101      	adds	r1, #1
 8001962:	fb90 f3f1 	sdiv	r3, r0, r1
 8001966:	fb03 0011 	mls	r0, r3, r1, r0
}
 800196a:	4428      	add	r0, r5
 800196c:	bd38      	pop	{r3, r4, r5, pc}
 800196e:	bf00      	nop

08001970 <HAL_ADC_ConvCpltCallback>:
//  }
//}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) 	//по окончании измерения вызывается функция обратного вызова
{
    if(hadc->Instance == ADC2) 				//Если прерывание пришло от ADC2
 8001970:	4a0e      	ldr	r2, [pc, #56]	; (80019ac <HAL_ADC_ConvCpltCallback+0x3c>)
 8001972:	6803      	ldr	r3, [r0, #0]
{
 8001974:	b510      	push	{r4, lr}
    if(hadc->Instance == ADC2) 				//Если прерывание пришло от ADC2
 8001976:	4293      	cmp	r3, r2
 8001978:	d003      	beq.n	8001982 <HAL_ADC_ConvCpltCallback+0x12>
    {
							//преобразование не нужно, поскольку максимальные значения импульса и ацп равны
        TIM2 -> CCR4 = HAL_ADC_GetValue(&hadc2);	//Обращаемся к регистру CCRx, где x - номер канала таймера, для управления скавжностью
       // print("ADC2 callback\n")
    }
     if(hadc->Instance == ADC1)
 800197a:	4a0d      	ldr	r2, [pc, #52]	; (80019b0 <HAL_ADC_ConvCpltCallback+0x40>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d00b      	beq.n	8001998 <HAL_ADC_ConvCpltCallback+0x28>
	HAL_ADC_DeInit(&hadc1);																	//Отстреливаем ацп (из колбека этого же ацп, да, именно так)
							//тк нам нужно на ацп1 произвести всего 1 измерение
	//print("ADC1 callback\n");

    }
}//Останавливать АЦП не нужно, поскольку не включен режим циклического измерения
 8001980:	bd10      	pop	{r4, pc}
 8001982:	4604      	mov	r4, r0
        TIM2 -> CCR4 = HAL_ADC_GetValue(&hadc2);	//Обращаемся к регистру CCRx, где x - номер канала таймера, для управления скавжностью
 8001984:	480b      	ldr	r0, [pc, #44]	; (80019b4 <HAL_ADC_ConvCpltCallback+0x44>)
 8001986:	f000 fe39 	bl	80025fc <HAL_ADC_GetValue>
 800198a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800198e:	6823      	ldr	r3, [r4, #0]
 8001990:	6410      	str	r0, [r2, #64]	; 0x40
     if(hadc->Instance == ADC1)
 8001992:	4a07      	ldr	r2, [pc, #28]	; (80019b0 <HAL_ADC_ConvCpltCallback+0x40>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d1f3      	bne.n	8001980 <HAL_ADC_ConvCpltCallback+0x10>
	srand(HAL_ADC_GetValue(&hadc1));		//по завершении считывания значения с температурного датчика (ADC1), устанавливаем seed ряда случайных чисел
 8001998:	4807      	ldr	r0, [pc, #28]	; (80019b8 <HAL_ADC_ConvCpltCallback+0x48>)
 800199a:	f000 fe2f 	bl	80025fc <HAL_ADC_GetValue>
 800199e:	f003 fec1 	bl	8005724 <srand>
}//Останавливать АЦП не нужно, поскольку не включен режим циклического измерения
 80019a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_ADC_DeInit(&hadc1);																	//Отстреливаем ацп (из колбека этого же ацп, да, именно так)
 80019a6:	4804      	ldr	r0, [pc, #16]	; (80019b8 <HAL_ADC_ConvCpltCallback+0x48>)
 80019a8:	f000 bcb0 	b.w	800230c <HAL_ADC_DeInit>
 80019ac:	40012800 	.word	0x40012800
 80019b0:	40012400 	.word	0x40012400
 80019b4:	20000198 	.word	0x20000198
 80019b8:	20000168 	.word	0x20000168

080019bc <HAL_UART_RxCpltCallback>:
		//Приведение полученных данных к более удобному формату
		//Обнулять ничего не нужно поскольку если сделать это тут,
		//то есть вероятность того, что флаг опустится до его обработки
//    IsButtonPressedRx |= IsButtonPressedRxBuff[0] << 8;
//    IsButtonPressedRx |= IsButtonPressedRxBuff[1];
    if(huart == &huart3)
 80019bc:	4b0d      	ldr	r3, [pc, #52]	; (80019f4 <HAL_UART_RxCpltCallback+0x38>)
 80019be:	4298      	cmp	r0, r3
 80019c0:	d000      	beq.n	80019c4 <HAL_UART_RxCpltCallback+0x8>
 80019c2:	4770      	bx	lr
{
 80019c4:	b530      	push	{r4, r5, lr}
 80019c6:	4604      	mov	r4, r0
 80019c8:	b083      	sub	sp, #12
    {
	    uint8_t TxVar = cube.getMode();
 80019ca:	480b      	ldr	r0, [pc, #44]	; (80019f8 <HAL_UART_RxCpltCallback+0x3c>)
 80019cc:	f7ff f88a 	bl	8000ae4 <_ZN4Cube7getModeEv>
 80019d0:	4605      	mov	r5, r0
	    HAL_UART_Transmit(&huart3, &TxVar, 1, 1000);
 80019d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019d6:	f10d 0107 	add.w	r1, sp, #7
 80019da:	2201      	movs	r2, #1
 80019dc:	4620      	mov	r0, r4
	    uint8_t TxVar = cube.getMode();
 80019de:	f88d 5007 	strb.w	r5, [sp, #7]
	    HAL_UART_Transmit(&huart3, &TxVar, 1, 1000);
 80019e2:	f003 fa70 	bl	8004ec6 <HAL_UART_Transmit>
	    HAL_UART_Receive_IT(&huart3, IsButtonPressed.IsButtonPressedRxBuff, 2);
 80019e6:	4620      	mov	r0, r4
 80019e8:	2202      	movs	r2, #2
 80019ea:	4904      	ldr	r1, [pc, #16]	; (80019fc <HAL_UART_RxCpltCallback+0x40>)
 80019ec:	f003 fafd 	bl	8004fea <HAL_UART_Receive_IT>
    }

}
 80019f0:	b003      	add	sp, #12
 80019f2:	bd30      	pop	{r4, r5, pc}
 80019f4:	20000258 	.word	0x20000258
 80019f8:	200000f8 	.word	0x200000f8
 80019fc:	200000f4 	.word	0x200000f4

08001a00 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a00:	b5f0      	push	{r4, r5, r6, r7, lr}
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a02:	2101      	movs	r1, #1
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a04:	2400      	movs	r4, #0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a06:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a08:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001a0c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a10:	2601      	movs	r6, #1
 8001a12:	f44f 3780 	mov.w	r7, #65536	; 0x10000
{
 8001a16:	b095      	sub	sp, #84	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a18:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a1a:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a1e:	e9cd 5211 	strd	r5, r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a22:	910e      	str	r1, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001a24:	9313      	str	r3, [sp, #76]	; 0x4c
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a26:	260f      	movs	r6, #15
 8001a28:	2702      	movs	r7, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a2a:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a2e:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8001a32:	e9cd 4407 	strd	r4, r4, [sp, #28]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a36:	e9cd 4401 	strd	r4, r4, [sp, #4]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a3a:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a3c:	9404      	str	r4, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a3e:	9400      	str	r4, [sp, #0]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001a40:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a42:	9403      	str	r4, [sp, #12]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a44:	f001 fcb8 	bl	80033b8 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a4e:	4629      	mov	r1, r5
 8001a50:	a804      	add	r0, sp, #16
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a52:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001a56:	e9cd 6704 	strd	r6, r7, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a5a:	9408      	str	r4, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a5c:	f001 ff2c 	bl	80038b8 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001a60:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a64:	4668      	mov	r0, sp
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001a66:	9500      	str	r5, [sp, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001a68:	9302      	str	r3, [sp, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a6a:	f002 f8bf 	bl	8003bec <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8001a6e:	b015      	add	sp, #84	; 0x54
 8001a70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a72:	bf00      	nop

08001a74 <main>:
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a74:	2400      	movs	r4, #0
{
 8001a76:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8001a7a:	b093      	sub	sp, #76	; 0x4c
  HAL_Init();
 8001a7c:	f000 fb0c 	bl	8002098 <HAL_Init>
  SystemClock_Config();
 8001a80:	f7ff ffbe 	bl	8001a00 <_Z18SystemClock_Configv>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a84:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
 8001a88:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a8c:	4b98      	ldr	r3, [pc, #608]	; (8001cf0 <main+0x27c>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SER_Pin|RCLK_Pin|SRCLK_Pin, GPIO_PIN_RESET);
 8001a8e:	4622      	mov	r2, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a90:	6999      	ldr	r1, [r3, #24]

  /*Configure GPIO pins : SER_Pin RCLK_Pin SRCLK_Pin */
  GPIO_InitStruct.Pin = SER_Pin|RCLK_Pin|SRCLK_Pin;
 8001a92:	f04f 0807 	mov.w	r8, #7
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a96:	f041 0120 	orr.w	r1, r1, #32
 8001a9a:	6199      	str	r1, [r3, #24]
 8001a9c:	6998      	ldr	r0, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, SER_Pin|RCLK_Pin|SRCLK_Pin, GPIO_PIN_RESET);
 8001a9e:	2107      	movs	r1, #7
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aa0:	f000 0020 	and.w	r0, r0, #32
 8001aa4:	9001      	str	r0, [sp, #4]
 8001aa6:	9801      	ldr	r0, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa8:	699d      	ldr	r5, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, SER_Pin|RCLK_Pin|SRCLK_Pin, GPIO_PIN_RESET);
 8001aaa:	4892      	ldr	r0, [pc, #584]	; (8001cf4 <main+0x280>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aac:	f045 0504 	orr.w	r5, r5, #4
 8001ab0:	619d      	str	r5, [r3, #24]
 8001ab2:	699d      	ldr	r5, [r3, #24]
  GPIO_InitStruct.Pin = SER_Pin|RCLK_Pin|SRCLK_Pin;
 8001ab4:	f04f 0901 	mov.w	r9, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab8:	f005 0504 	and.w	r5, r5, #4
 8001abc:	9502      	str	r5, [sp, #8]
 8001abe:	9d02      	ldr	r5, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ac0:	699d      	ldr	r5, [r3, #24]
  hadc1.Init.NbrOfConversion = 1;
 8001ac2:	2601      	movs	r6, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ac4:	f045 0508 	orr.w	r5, r5, #8
 8001ac8:	619d      	str	r5, [r3, #24]
 8001aca:	699b      	ldr	r3, [r3, #24]
  hadc1.Instance = ADC1;
 8001acc:	f8df a250 	ldr.w	sl, [pc, #592]	; 8001d20 <main+0x2ac>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ad0:	f003 0308 	and.w	r3, r3, #8
 8001ad4:	9303      	str	r3, [sp, #12]
 8001ad6:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOA, SER_Pin|RCLK_Pin|SRCLK_Pin, GPIO_PIN_RESET);
 8001ad8:	f001 fc56 	bl	8003388 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = SER_Pin|RCLK_Pin|SRCLK_Pin;
 8001adc:	2200      	movs	r2, #0
 8001ade:	2302      	movs	r3, #2
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae0:	a90a      	add	r1, sp, #40	; 0x28
 8001ae2:	4884      	ldr	r0, [pc, #528]	; (8001cf4 <main+0x280>)
  GPIO_InitStruct.Pin = SER_Pin|RCLK_Pin|SRCLK_Pin;
 8001ae4:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8001ae8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aec:	f001 fa0c 	bl	8002f08 <HAL_GPIO_Init>
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001af0:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
  hadc1.Instance = ADC1;
 8001af4:	4a80      	ldr	r2, [pc, #512]	; (8001cf8 <main+0x284>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001af6:	4650      	mov	r0, sl
  hadc1.Instance = ADC1;
 8001af8:	e9ca 2400 	strd	r2, r4, [sl]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001afc:	f8ca 4008 	str.w	r4, [sl, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001b00:	f88a 400c 	strb.w	r4, [sl, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b04:	f88a 4014 	strb.w	r4, [sl, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001b08:	f8ca 301c 	str.w	r3, [sl, #28]
  hadc1.Init.NbrOfConversion = 1;
 8001b0c:	f8ca 6010 	str.w	r6, [sl, #16]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001b10:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
 8001b14:	940c      	str	r4, [sp, #48]	; 0x30
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b16:	f000 fb21 	bl	800215c <HAL_ADC_Init>
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001b1a:	2210      	movs	r2, #16
 8001b1c:	2301      	movs	r3, #1
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b1e:	4650      	mov	r0, sl
 8001b20:	a90a      	add	r1, sp, #40	; 0x28
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001b22:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001b26:	940c      	str	r4, [sp, #48]	; 0x30
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b28:	f000 fe40 	bl	80027ac <HAL_ADC_ConfigChannel>
  htim3.Init.Period = 65000;
 8001b2c:	f64f 52e8 	movw	r2, #65000	; 0xfde8
  htim3.Init.Prescaler = 719;
 8001b30:	f240 21cf 	movw	r1, #719	; 0x2cf
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b34:	f44f 5780 	mov.w	r7, #4096	; 0x1000
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001b38:	f04f 0820 	mov.w	r8, #32
 8001b3c:	f04f 0900 	mov.w	r9, #0
  htim3.Instance = TIM3;
 8001b40:	f8df b1e0 	ldr.w	fp, [pc, #480]	; 8001d24 <main+0x2b0>
 8001b44:	4b6d      	ldr	r3, [pc, #436]	; (8001cfc <main+0x288>)
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b46:	4658      	mov	r0, fp
  htim3.Instance = TIM3;
 8001b48:	f8cb 3000 	str.w	r3, [fp]
  htim3.Init.Period = 65000;
 8001b4c:	f8cb 200c 	str.w	r2, [fp, #12]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b50:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
 8001b54:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b58:	e9cd 4406 	strd	r4, r4, [sp, #24]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b5c:	f8cb 4008 	str.w	r4, [fp, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b60:	f8cb 4010 	str.w	r4, [fp, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b64:	f8cb 4018 	str.w	r4, [fp, #24]
  htim3.Init.Prescaler = 719;
 8001b68:	f8cb 1004 	str.w	r1, [fp, #4]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b6c:	f002 f9b8 	bl	8003ee0 <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b70:	a90a      	add	r1, sp, #40	; 0x28
 8001b72:	4658      	mov	r0, fp
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b74:	970a      	str	r7, [sp, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b76:	f002 fd53 	bl	8004620 <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b7a:	a906      	add	r1, sp, #24
 8001b7c:	4658      	mov	r0, fp
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001b7e:	e9cd 8906 	strd	r8, r9, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b82:	f003 f8e3 	bl	8004d4c <HAL_TIMEx_MasterConfigSynchronization>
  htim2.Init.Period = 4094;
 8001b86:	f640 72fe 	movw	r2, #4094	; 0xffe
  htim2.Instance = TIM2;
 8001b8a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b8e:	f04f 0800 	mov.w	r8, #0
 8001b92:	f04f 0900 	mov.w	r9, #0
  htim2.Instance = TIM2;
 8001b96:	4d5a      	ldr	r5, [pc, #360]	; (8001d00 <main+0x28c>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b98:	e9cd 4406 	strd	r4, r4, [sp, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b9c:	4628      	mov	r0, r5
  htim2.Init.Period = 4094;
 8001b9e:	60ea      	str	r2, [r5, #12]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ba0:	e9c5 6401 	strd	r6, r4, [r5, #4]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ba4:	612c      	str	r4, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ba6:	61ac      	str	r4, [r5, #24]
  htim2.Instance = TIM2;
 8001ba8:	6029      	str	r1, [r5, #0]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001baa:	e9cd 4408 	strd	r4, r4, [sp, #32]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bae:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
 8001bb2:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
 8001bb6:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bba:	9404      	str	r4, [sp, #16]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bbc:	9410      	str	r4, [sp, #64]	; 0x40
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bbe:	9405      	str	r4, [sp, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001bc0:	f002 f98e 	bl	8003ee0 <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001bc4:	a906      	add	r1, sp, #24
 8001bc6:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bc8:	9706      	str	r7, [sp, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001bca:	f002 fd29 	bl	8004620 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001bce:	4628      	mov	r0, r5
 8001bd0:	f002 fa20 	bl	8004014 <HAL_TIM_PWM_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bd4:	e9cd 8904 	strd	r8, r9, [sp, #16]
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001bd8:	f04f 0870 	mov.w	r8, #112	; 0x70
 8001bdc:	f04f 0900 	mov.w	r9, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001be0:	4628      	mov	r0, r5
 8001be2:	a904      	add	r1, sp, #16
 8001be4:	f003 f8b2 	bl	8004d4c <HAL_TIMEx_MasterConfigSynchronization>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001be8:	220c      	movs	r2, #12
 8001bea:	a90a      	add	r1, sp, #40	; 0x28
 8001bec:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001bee:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bf2:	940c      	str	r4, [sp, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bf4:	940e      	str	r4, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001bf6:	f002 fc55 	bl	80044a4 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim2);
 8001bfa:	4628      	mov	r0, r5
 8001bfc:	f000 f98c 	bl	8001f18 <HAL_TIM_MspPostInit>
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8001c00:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  sConfig.Channel = ADC_CHANNEL_9;
 8001c04:	f04f 0809 	mov.w	r8, #9
 8001c08:	f04f 0901 	mov.w	r9, #1
  hadc2.Instance = ADC2;
 8001c0c:	4f3d      	ldr	r7, [pc, #244]	; (8001d04 <main+0x290>)
 8001c0e:	493e      	ldr	r1, [pc, #248]	; (8001d08 <main+0x294>)
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001c10:	4638      	mov	r0, r7
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8001c12:	61fa      	str	r2, [r7, #28]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001c14:	60bc      	str	r4, [r7, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001c16:	733c      	strb	r4, [r7, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001c18:	753c      	strb	r4, [r7, #20]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c1a:	607c      	str	r4, [r7, #4]
  hadc2.Init.NbrOfConversion = 1;
 8001c1c:	613e      	str	r6, [r7, #16]
  hadc2.Instance = ADC2;
 8001c1e:	6039      	str	r1, [r7, #0]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001c20:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
 8001c24:	940c      	str	r4, [sp, #48]	; 0x30
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001c26:	f000 fa99 	bl	800215c <HAL_ADC_Init>
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001c2a:	4638      	mov	r0, r7
 8001c2c:	a90a      	add	r1, sp, #40	; 0x28
  sConfig.Channel = ADC_CHANNEL_9;
 8001c2e:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001c32:	940c      	str	r4, [sp, #48]	; 0x30
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001c34:	f04f 080c 	mov.w	r8, #12
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001c38:	f000 fdb8 	bl	80027ac <HAL_ADC_ConfigChannel>
  huart3.Init.BaudRate = 115200;
 8001c3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
  huart3.Instance = USART3;
 8001c40:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 8001d28 <main+0x2b4>
 8001c44:	4931      	ldr	r1, [pc, #196]	; (8001d0c <main+0x298>)
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001c46:	4648      	mov	r0, r9
  huart3.Init.BaudRate = 115200;
 8001c48:	e9c9 1200 	strd	r1, r2, [r9]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001c4c:	e9c9 4402 	strd	r4, r4, [r9, #8]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c50:	e9c9 4406 	strd	r4, r4, [r9, #24]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001c54:	f8c9 4010 	str.w	r4, [r9, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001c58:	f8c9 8014 	str.w	r8, [r9, #20]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001c5c:	f003 f8e6 	bl	8004e2c <HAL_UART_Init>
  HAL_TIM_Base_Start(&htim3);
 8001c60:	4658      	mov	r0, fp
 8001c62:	f002 f98d 	bl	8003f80 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_4);
 8001c66:	4641      	mov	r1, r8
 8001c68:	4628      	mov	r0, r5
 8001c6a:	f002 fa2b 	bl	80040c4 <HAL_TIM_PWM_Start_IT>
  HAL_ADCEx_Calibration_Start(&hadc2);
 8001c6e:	4638      	mov	r0, r7
 8001c70:	f000 ff20 	bl	8002ab4 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_IT(&hadc2);
 8001c74:	4638      	mov	r0, r7
 8001c76:	f000 fc0b 	bl	8002490 <HAL_ADC_Start_IT>
  HAL_ADC_Start_IT(&hadc1);
 8001c7a:	4650      	mov	r0, sl
 8001c7c:	f000 fc08 	bl	8002490 <HAL_ADC_Start_IT>
  TIM3->EGR = TIM_EGR_UG;
 8001c80:	4b1e      	ldr	r3, [pc, #120]	; (8001cfc <main+0x288>)
  HAL_UART_Receive_IT(&huart3, IsButtonPressed.IsButtonPressedRxBuff, 2);
 8001c82:	2202      	movs	r2, #2
  TIM3->EGR = TIM_EGR_UG;
 8001c84:	615e      	str	r6, [r3, #20]
  HAL_UART_Receive_IT(&huart3, IsButtonPressed.IsButtonPressedRxBuff, 2);
 8001c86:	4922      	ldr	r1, [pc, #136]	; (8001d10 <main+0x29c>)
 8001c88:	4648      	mov	r0, r9
 8001c8a:	f003 f9ae 	bl	8004fea <HAL_UART_Receive_IT>
  cube.setTextString(str, strlen(str));
 8001c8e:	4821      	ldr	r0, [pc, #132]	; (8001d14 <main+0x2a0>)
 8001c90:	f7fe fa5c 	bl	800014c <strlen>
 8001c94:	f8df a094 	ldr.w	sl, [pc, #148]	; 8001d2c <main+0x2b8>
 8001c98:	b2c2      	uxtb	r2, r0
 8001c9a:	491e      	ldr	r1, [pc, #120]	; (8001d14 <main+0x2a0>)
 8001c9c:	4650      	mov	r0, sl
 8001c9e:	f7fe ffa5 	bl	8000bec <_ZN4Cube13setTextStringEPch>
	  cube.changeMode(); //TODO: в следующих версиях переработать переключение режимов
 8001ca2:	4656      	mov	r6, sl
 8001ca4:	4d1a      	ldr	r5, [pc, #104]	; (8001d10 <main+0x29c>)
 8001ca6:	4f1c      	ldr	r7, [pc, #112]	; (8001d18 <main+0x2a4>)
 8001ca8:	4c1c      	ldr	r4, [pc, #112]	; (8001d1c <main+0x2a8>)
	  ModePTR = ModeSwitchingFlag ? SwitchingModes : ChangingSpeed;
 8001caa:	f8df 9084 	ldr.w	r9, [pc, #132]	; 8001d30 <main+0x2bc>
 8001cae:	f8df 8084 	ldr.w	r8, [pc, #132]	; 8001d34 <main+0x2c0>
      if ((IsButtonPressed.IsButtonPressedRx >> OK) & 1)
 8001cb2:	882b      	ldrh	r3, [r5, #0]
 8001cb4:	f413 7f80 	tst.w	r3, #256	; 0x100
	  IsButtonPressed.IsButtonPressedRx &= ~(1 << OK);
 8001cb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
      if ((IsButtonPressed.IsButtonPressedRx >> OK) & 1)
 8001cbc:	d00c      	beq.n	8001cd8 <main+0x264>
	  ModeSwitchingFlag ^= 1;
 8001cbe:	783a      	ldrb	r2, [r7, #0]
	  cube.changeMode(); //TODO: в следующих версиях переработать переключение режимов
 8001cc0:	4630      	mov	r0, r6
	  ModePTR = ModeSwitchingFlag ? SwitchingModes : ChangingSpeed;
 8001cc2:	2a01      	cmp	r2, #1
 8001cc4:	bf14      	ite	ne
 8001cc6:	4649      	movne	r1, r9
 8001cc8:	4641      	moveq	r1, r8
	  ModeSwitchingFlag ^= 1;
 8001cca:	f082 0201 	eor.w	r2, r2, #1
	  IsButtonPressed.IsButtonPressedRx &= ~(1 << OK);
 8001cce:	802b      	strh	r3, [r5, #0]
	  ModePTR = ModeSwitchingFlag ? SwitchingModes : ChangingSpeed;
 8001cd0:	6021      	str	r1, [r4, #0]
	  ModeSwitchingFlag ^= 1;
 8001cd2:	703a      	strb	r2, [r7, #0]
	  cube.changeMode(); //TODO: в следующих версиях переработать переключение режимов
 8001cd4:	f7fe ff0a 	bl	8000aec <_ZN4Cube10changeModeEv>
      ModePTR();
 8001cd8:	6823      	ldr	r3, [r4, #0]
 8001cda:	4798      	blx	r3
      (cube.*cube.m_currentModePtr)(); //вызов метода через указатель
 8001cdc:	e9da 3000 	ldrd	r3, r0, [sl]
 8001ce0:	eb0a 0060 	add.w	r0, sl, r0, asr #1
 8001ce4:	4798      	blx	r3
      cube.printFrame();
 8001ce6:	4630      	mov	r0, r6
 8001ce8:	f7fe fda2 	bl	8000830 <_ZN4Cube10printFrameEv>
      if ((IsButtonPressed.IsButtonPressedRx >> OK) & 1)
 8001cec:	e7e1      	b.n	8001cb2 <main+0x23e>
 8001cee:	bf00      	nop
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	40010800 	.word	0x40010800
 8001cf8:	40012400 	.word	0x40012400
 8001cfc:	40000400 	.word	0x40000400
 8001d00:	200001c8 	.word	0x200001c8
 8001d04:	20000198 	.word	0x20000198
 8001d08:	40012800 	.word	0x40012800
 8001d0c:	40004800 	.word	0x40004800
 8001d10:	200000f4 	.word	0x200000f4
 8001d14:	20000004 	.word	0x20000004
 8001d18:	200000f6 	.word	0x200000f6
 8001d1c:	20000000 	.word	0x20000000
 8001d20:	20000168 	.word	0x20000168
 8001d24:	20000210 	.word	0x20000210
 8001d28:	20000258 	.word	0x20000258
 8001d2c:	200000f8 	.word	0x200000f8
 8001d30:	08001861 	.word	0x08001861
 8001d34:	0800189d 	.word	0x0800189d

08001d38 <_GLOBAL__sub_I_hadc1>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001d38:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t lengh;
	uint8_t charCounter;		//номер текущего символа
	uint8_t charPosition;		//координата символа в кубе по Y(нужно для формирования символа)
};

class Cube
 8001d3a:	2700      	movs	r7, #0
 8001d3c:	f240 1e05 	movw	lr, #261	; 0x105
 8001d40:	f44f 7c96 	mov.w	ip, #300	; 0x12c
 8001d44:	4e0e      	ldr	r6, [pc, #56]	; (8001d80 <_GLOBAL__sub_I_hadc1+0x48>)
 8001d46:	4d0f      	ldr	r5, [pc, #60]	; (8001d84 <_GLOBAL__sub_I_hadc1+0x4c>)
 8001d48:	f106 0408 	add.w	r4, r6, #8
 8001d4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d58:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001d5c:	4d0a      	ldr	r5, [pc, #40]	; (8001d88 <_GLOBAL__sub_I_hadc1+0x50>)
 8001d5e:	e9c6 5700 	strd	r5, r7, [r6]
 8001d62:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001d66:	f8a6 7054 	strh.w	r7, [r6, #84]	; 0x54
 8001d6a:	f886 7057 	strb.w	r7, [r6, #87]	; 0x57
 8001d6e:	f8a6 706c 	strh.w	r7, [r6, #108]	; 0x6c
 8001d72:	f886 706e 	strb.w	r7, [r6, #110]	; 0x6e
 8001d76:	f8a6 e048 	strh.w	lr, [r6, #72]	; 0x48
 8001d7a:	f8c6 c068 	str.w	ip, [r6, #104]	; 0x68
 8001d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d80:	200000f8 	.word	0x200000f8
 8001d84:	08006850 	.word	0x08006850
 8001d88:	08000811 	.word	0x08000811

08001d8c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001d8c:	4b0e      	ldr	r3, [pc, #56]	; (8001dc8 <HAL_MspInit+0x3c>)
{
 8001d8e:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001d90:	699a      	ldr	r2, [r3, #24]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001d92:	490e      	ldr	r1, [pc, #56]	; (8001dcc <HAL_MspInit+0x40>)
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001d94:	f042 0201 	orr.w	r2, r2, #1
 8001d98:	619a      	str	r2, [r3, #24]
 8001d9a:	699a      	ldr	r2, [r3, #24]
 8001d9c:	f002 0201 	and.w	r2, r2, #1
 8001da0:	9200      	str	r2, [sp, #0]
 8001da2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001da4:	69da      	ldr	r2, [r3, #28]
 8001da6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001daa:	61da      	str	r2, [r3, #28]
 8001dac:	69db      	ldr	r3, [r3, #28]
 8001dae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001db2:	9301      	str	r3, [sp, #4]
 8001db4:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001db6:	684b      	ldr	r3, [r1, #4]
 8001db8:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001dbc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001dc0:	604b      	str	r3, [r1, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dc2:	b002      	add	sp, #8
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	40021000 	.word	0x40021000
 8001dcc:	40010000 	.word	0x40010000

08001dd0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001dd0:	b5d0      	push	{r4, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd2:	2400      	movs	r4, #0
  if(hadc->Instance==ADC1)
 8001dd4:	6803      	ldr	r3, [r0, #0]
 8001dd6:	4a23      	ldr	r2, [pc, #140]	; (8001e64 <HAL_ADC_MspInit+0x94>)
{
 8001dd8:	b088      	sub	sp, #32
  if(hadc->Instance==ADC1)
 8001dda:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ddc:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8001de0:	e9cd 4406 	strd	r4, r4, [sp, #24]
  if(hadc->Instance==ADC1)
 8001de4:	d004      	beq.n	8001df0 <HAL_ADC_MspInit+0x20>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 8001de6:	4a20      	ldr	r2, [pc, #128]	; (8001e68 <HAL_ADC_MspInit+0x98>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d015      	beq.n	8001e18 <HAL_ADC_MspInit+0x48>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001dec:	b008      	add	sp, #32
 8001dee:	bdd0      	pop	{r4, r6, r7, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001df0:	4b1e      	ldr	r3, [pc, #120]	; (8001e6c <HAL_ADC_MspInit+0x9c>)
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001df2:	4622      	mov	r2, r4
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001df4:	6998      	ldr	r0, [r3, #24]
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001df6:	4621      	mov	r1, r4
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001df8:	f440 7000 	orr.w	r0, r0, #512	; 0x200
 8001dfc:	6198      	str	r0, [r3, #24]
 8001dfe:	699b      	ldr	r3, [r3, #24]
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001e00:	2012      	movs	r0, #18
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e06:	9301      	str	r3, [sp, #4]
 8001e08:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001e0a:	f000 ffd0 	bl	8002dae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001e0e:	2012      	movs	r0, #18
 8001e10:	f000 ffe9 	bl	8002de6 <HAL_NVIC_EnableIRQ>
}
 8001e14:	b008      	add	sp, #32
 8001e16:	bdd0      	pop	{r4, r6, r7, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001e18:	2602      	movs	r6, #2
 8001e1a:	2703      	movs	r7, #3
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001e1c:	4b13      	ldr	r3, [pc, #76]	; (8001e6c <HAL_ADC_MspInit+0x9c>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e1e:	a904      	add	r1, sp, #16
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001e20:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e22:	4813      	ldr	r0, [pc, #76]	; (8001e70 <HAL_ADC_MspInit+0xa0>)
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001e24:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001e28:	619a      	str	r2, [r3, #24]
 8001e2a:	699a      	ldr	r2, [r3, #24]
 8001e2c:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8001e30:	9202      	str	r2, [sp, #8]
 8001e32:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e34:	699a      	ldr	r2, [r3, #24]
 8001e36:	f042 0208 	orr.w	r2, r2, #8
 8001e3a:	619a      	str	r2, [r3, #24]
 8001e3c:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001e3e:	e9cd 6704 	strd	r6, r7, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e42:	f003 0308 	and.w	r3, r3, #8
 8001e46:	9303      	str	r3, [sp, #12]
 8001e48:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e4a:	f001 f85d 	bl	8002f08 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001e4e:	4622      	mov	r2, r4
 8001e50:	4621      	mov	r1, r4
 8001e52:	2012      	movs	r0, #18
 8001e54:	f000 ffab 	bl	8002dae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001e58:	2012      	movs	r0, #18
 8001e5a:	f000 ffc4 	bl	8002de6 <HAL_NVIC_EnableIRQ>
}
 8001e5e:	b008      	add	sp, #32
 8001e60:	bdd0      	pop	{r4, r6, r7, pc}
 8001e62:	bf00      	nop
 8001e64:	40012400 	.word	0x40012400
 8001e68:	40012800 	.word	0x40012800
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	40010c00 	.word	0x40010c00

08001e74 <HAL_ADC_MspDeInit>:
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
  if(hadc->Instance==ADC1)
 8001e74:	4a0c      	ldr	r2, [pc, #48]	; (8001ea8 <HAL_ADC_MspDeInit+0x34>)
 8001e76:	6803      	ldr	r3, [r0, #0]
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d003      	beq.n	8001e84 <HAL_ADC_MspDeInit+0x10>

  /* USER CODE BEGIN ADC1_MspDeInit 1 */

  /* USER CODE END ADC1_MspDeInit 1 */
  }
  else if(hadc->Instance==ADC2)
 8001e7c:	4a0b      	ldr	r2, [pc, #44]	; (8001eac <HAL_ADC_MspDeInit+0x38>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d007      	beq.n	8001e92 <HAL_ADC_MspDeInit+0x1e>
  /* USER CODE BEGIN ADC2_MspDeInit 1 */

  /* USER CODE END ADC2_MspDeInit 1 */
  }

}
 8001e82:	4770      	bx	lr
    __HAL_RCC_ADC1_CLK_DISABLE();
 8001e84:	f502 426c 	add.w	r2, r2, #60416	; 0xec00
 8001e88:	6993      	ldr	r3, [r2, #24]
 8001e8a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001e8e:	6193      	str	r3, [r2, #24]
 8001e90:	4770      	bx	lr
    __HAL_RCC_ADC2_CLK_DISABLE();
 8001e92:	f502 4268 	add.w	r2, r2, #59392	; 0xe800
 8001e96:	6993      	ldr	r3, [r2, #24]
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_1);
 8001e98:	2102      	movs	r1, #2
    __HAL_RCC_ADC2_CLK_DISABLE();
 8001e9a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_1);
 8001e9e:	4804      	ldr	r0, [pc, #16]	; (8001eb0 <HAL_ADC_MspDeInit+0x3c>)
    __HAL_RCC_ADC2_CLK_DISABLE();
 8001ea0:	6193      	str	r3, [r2, #24]
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_1);
 8001ea2:	f001 b9b5 	b.w	8003210 <HAL_GPIO_DeInit>
 8001ea6:	bf00      	nop
 8001ea8:	40012400 	.word	0x40012400
 8001eac:	40012800 	.word	0x40012800
 8001eb0:	40010c00 	.word	0x40010c00

08001eb4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001eb4:	b510      	push	{r4, lr}
  if(htim_base->Instance==TIM2)
 8001eb6:	6803      	ldr	r3, [r0, #0]
{
 8001eb8:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM2)
 8001eba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ebe:	d004      	beq.n	8001eca <HAL_TIM_Base_MspInit+0x16>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8001ec0:	4a13      	ldr	r2, [pc, #76]	; (8001f10 <HAL_TIM_Base_MspInit+0x5c>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d00e      	beq.n	8001ee4 <HAL_TIM_Base_MspInit+0x30>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001ec6:	b002      	add	sp, #8
 8001ec8:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001eca:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001ece:	69da      	ldr	r2, [r3, #28]
 8001ed0:	f042 0201 	orr.w	r2, r2, #1
 8001ed4:	61da      	str	r2, [r3, #28]
 8001ed6:	69db      	ldr	r3, [r3, #28]
 8001ed8:	f003 0301 	and.w	r3, r3, #1
 8001edc:	9300      	str	r3, [sp, #0]
 8001ede:	9b00      	ldr	r3, [sp, #0]
}
 8001ee0:	b002      	add	sp, #8
 8001ee2:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001ee4:	2200      	movs	r2, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ee6:	4b0b      	ldr	r3, [pc, #44]	; (8001f14 <HAL_TIM_Base_MspInit+0x60>)
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001ee8:	4611      	mov	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001eea:	69dc      	ldr	r4, [r3, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001eec:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001eee:	f044 0402 	orr.w	r4, r4, #2
 8001ef2:	61dc      	str	r4, [r3, #28]
 8001ef4:	69db      	ldr	r3, [r3, #28]
 8001ef6:	f003 0302 	and.w	r3, r3, #2
 8001efa:	9301      	str	r3, [sp, #4]
 8001efc:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001efe:	f000 ff56 	bl	8002dae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001f02:	201d      	movs	r0, #29
}
 8001f04:	b002      	add	sp, #8
 8001f06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001f0a:	f000 bf6c 	b.w	8002de6 <HAL_NVIC_EnableIRQ>
 8001f0e:	bf00      	nop
 8001f10:	40000400 	.word	0x40000400
 8001f14:	40021000 	.word	0x40021000

08001f18 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f18:	2300      	movs	r3, #0
{
 8001f1a:	b5d0      	push	{r4, r6, r7, lr}
  if(htim->Instance==TIM2)
 8001f1c:	6802      	ldr	r2, [r0, #0]
{
 8001f1e:	b086      	sub	sp, #24
  if(htim->Instance==TIM2)
 8001f20:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f24:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001f28:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if(htim->Instance==TIM2)
 8001f2c:	d001      	beq.n	8001f32 <HAL_TIM_MspPostInit+0x1a>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001f2e:	b006      	add	sp, #24
 8001f30:	bdd0      	pop	{r4, r6, r7, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001f32:	2608      	movs	r6, #8
 8001f34:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f36:	2402      	movs	r4, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f38:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001f3c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001f40:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f42:	4808      	ldr	r0, [pc, #32]	; (8001f64 <HAL_TIM_MspPostInit+0x4c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f44:	f042 0204 	orr.w	r2, r2, #4
 8001f48:	619a      	str	r2, [r3, #24]
 8001f4a:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f4c:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f4e:	f003 0304 	and.w	r3, r3, #4
 8001f52:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001f54:	e9cd 6702 	strd	r6, r7, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f58:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f5a:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f5c:	f000 ffd4 	bl	8002f08 <HAL_GPIO_Init>
}
 8001f60:	b006      	add	sp, #24
 8001f62:	bdd0      	pop	{r4, r6, r7, pc}
 8001f64:	40010800 	.word	0x40010800

08001f68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f68:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f6a:	2400      	movs	r4, #0
  if(huart->Instance==USART3)
 8001f6c:	6802      	ldr	r2, [r0, #0]
 8001f6e:	4b1e      	ldr	r3, [pc, #120]	; (8001fe8 <HAL_UART_MspInit+0x80>)
{
 8001f70:	b087      	sub	sp, #28
  if(huart->Instance==USART3)
 8001f72:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f74:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8001f78:	e9cd 4404 	strd	r4, r4, [sp, #16]
  if(huart->Instance==USART3)
 8001f7c:	d001      	beq.n	8001f82 <HAL_UART_MspInit+0x1a>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001f7e:	b007      	add	sp, #28
 8001f80:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001f82:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001f86:	2102      	movs	r1, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f88:	2503      	movs	r5, #3
    __HAL_RCC_USART3_CLK_ENABLE();
 8001f8a:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 8001f8e:	69da      	ldr	r2, [r3, #28]
 8001f90:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001f94:	61da      	str	r2, [r3, #28]
 8001f96:	69da      	ldr	r2, [r3, #28]
 8001f98:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8001f9c:	9200      	str	r2, [sp, #0]
 8001f9e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fa0:	699a      	ldr	r2, [r3, #24]
 8001fa2:	f042 0208 	orr.w	r2, r2, #8
 8001fa6:	619a      	str	r2, [r3, #24]
 8001fa8:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001faa:	e9cd 0102 	strd	r0, r1, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fae:	f003 0308 	and.w	r3, r3, #8
 8001fb2:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fb4:	a902      	add	r1, sp, #8
 8001fb6:	480d      	ldr	r0, [pc, #52]	; (8001fec <HAL_UART_MspInit+0x84>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fb8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fba:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fbc:	f000 ffa4 	bl	8002f08 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	f44f 6200 	mov.w	r2, #2048	; 0x800
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fc6:	a902      	add	r1, sp, #8
 8001fc8:	4808      	ldr	r0, [pc, #32]	; (8001fec <HAL_UART_MspInit+0x84>)
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001fca:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fce:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fd0:	f000 ff9a 	bl	8002f08 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001fd4:	4622      	mov	r2, r4
 8001fd6:	4621      	mov	r1, r4
 8001fd8:	2027      	movs	r0, #39	; 0x27
 8001fda:	f000 fee8 	bl	8002dae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001fde:	2027      	movs	r0, #39	; 0x27
 8001fe0:	f000 ff01 	bl	8002de6 <HAL_NVIC_EnableIRQ>
}
 8001fe4:	b007      	add	sp, #28
 8001fe6:	bd30      	pop	{r4, r5, pc}
 8001fe8:	40004800 	.word	0x40004800
 8001fec:	40010c00 	.word	0x40010c00

08001ff0 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop

08001ff4 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ff4:	e7fe      	b.n	8001ff4 <HardFault_Handler>
 8001ff6:	bf00      	nop

08001ff8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ff8:	e7fe      	b.n	8001ff8 <MemManage_Handler>
 8001ffa:	bf00      	nop

08001ffc <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ffc:	e7fe      	b.n	8001ffc <BusFault_Handler>
 8001ffe:	bf00      	nop

08002000 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002000:	e7fe      	b.n	8002000 <UsageFault_Handler>
 8002002:	bf00      	nop

08002004 <SVC_Handler>:
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop

08002008 <DebugMon_Handler>:
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop

0800200c <PendSV_Handler>:
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop

08002010 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002010:	f000 b888 	b.w	8002124 <HAL_IncTick>

08002014 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002014:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002016:	4804      	ldr	r0, [pc, #16]	; (8002028 <ADC1_2_IRQHandler+0x14>)
 8002018:	f000 fafc 	bl	8002614 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800201c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_ADC_IRQHandler(&hadc2);
 8002020:	4802      	ldr	r0, [pc, #8]	; (800202c <ADC1_2_IRQHandler+0x18>)
 8002022:	f000 baf7 	b.w	8002614 <HAL_ADC_IRQHandler>
 8002026:	bf00      	nop
 8002028:	20000168 	.word	0x20000168
 800202c:	20000198 	.word	0x20000198

08002030 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002030:	4801      	ldr	r0, [pc, #4]	; (8002038 <TIM3_IRQHandler+0x8>)
 8002032:	f002 b92f 	b.w	8004294 <HAL_TIM_IRQHandler>
 8002036:	bf00      	nop
 8002038:	20000210 	.word	0x20000210

0800203c <USART3_IRQHandler>:
//        uint8_t TxVar = cube.getMode();
//            HAL_UART_Transmit_IT(&huart3, &TxVar, 1);
//            HAL_UART_Receive_IT(&huart3, IsButtonPressed.IsButtonPressedRxBuff, 2);
//    }
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800203c:	4801      	ldr	r0, [pc, #4]	; (8002044 <USART3_IRQHandler+0x8>)
 800203e:	f003 b829 	b.w	8005094 <HAL_UART_IRQHandler>
 8002042:	bf00      	nop
 8002044:	20000258 	.word	0x20000258

08002048 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop

0800204c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800204c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800204e:	e003      	b.n	8002058 <LoopCopyDataInit>

08002050 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002050:	4b0b      	ldr	r3, [pc, #44]	; (8002080 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002052:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002054:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002056:	3104      	adds	r1, #4

08002058 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002058:	480a      	ldr	r0, [pc, #40]	; (8002084 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800205a:	4b0b      	ldr	r3, [pc, #44]	; (8002088 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800205c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800205e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002060:	d3f6      	bcc.n	8002050 <CopyDataInit>
  ldr r2, =_sbss
 8002062:	4a0a      	ldr	r2, [pc, #40]	; (800208c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002064:	e002      	b.n	800206c <LoopFillZerobss>

08002066 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002066:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002068:	f842 3b04 	str.w	r3, [r2], #4

0800206c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800206c:	4b08      	ldr	r3, [pc, #32]	; (8002090 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800206e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002070:	d3f9      	bcc.n	8002066 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002072:	f7ff ffe9 	bl	8002048 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002076:	f003 fb0f 	bl	8005698 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800207a:	f7ff fcfb 	bl	8001a74 <main>
  bx lr
 800207e:	4770      	bx	lr
  ldr r3, =_sidata
 8002080:	08006d18 	.word	0x08006d18
  ldr r0, =_sdata
 8002084:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002088:	200000d8 	.word	0x200000d8
  ldr r2, =_sbss
 800208c:	200000d8 	.word	0x200000d8
  ldr r3, = _ebss
 8002090:	200002b8 	.word	0x200002b8

08002094 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002094:	e7fe      	b.n	8002094 <CAN1_RX1_IRQHandler>
	...

08002098 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800209c:	4b08      	ldr	r3, [pc, #32]	; (80020c0 <HAL_Init+0x28>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a07      	ldr	r2, [pc, #28]	; (80020c0 <HAL_Init+0x28>)
 80020a2:	f043 0310 	orr.w	r3, r3, #16
 80020a6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020a8:	2003      	movs	r0, #3
 80020aa:	f000 fe75 	bl	8002d98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020ae:	2000      	movs	r0, #0
 80020b0:	f000 f808 	bl	80020c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020b4:	f7ff fe6a 	bl	8001d8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	40022000 	.word	0x40022000

080020c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020cc:	4b12      	ldr	r3, [pc, #72]	; (8002118 <HAL_InitTick+0x54>)
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	4b12      	ldr	r3, [pc, #72]	; (800211c <HAL_InitTick+0x58>)
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	4619      	mov	r1, r3
 80020d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020da:	fbb3 f3f1 	udiv	r3, r3, r1
 80020de:	fbb2 f3f3 	udiv	r3, r2, r3
 80020e2:	4618      	mov	r0, r3
 80020e4:	f000 fe8d 	bl	8002e02 <HAL_SYSTICK_Config>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e00e      	b.n	8002110 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2b0f      	cmp	r3, #15
 80020f6:	d80a      	bhi.n	800210e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020f8:	2200      	movs	r2, #0
 80020fa:	6879      	ldr	r1, [r7, #4]
 80020fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002100:	f000 fe55 	bl	8002dae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002104:	4a06      	ldr	r2, [pc, #24]	; (8002120 <HAL_InitTick+0x5c>)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800210a:	2300      	movs	r3, #0
 800210c:	e000      	b.n	8002110 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
}
 8002110:	4618      	mov	r0, r3
 8002112:	3708      	adds	r7, #8
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	20000068 	.word	0x20000068
 800211c:	20000070 	.word	0x20000070
 8002120:	2000006c 	.word	0x2000006c

08002124 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002128:	4b05      	ldr	r3, [pc, #20]	; (8002140 <HAL_IncTick+0x1c>)
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	461a      	mov	r2, r3
 800212e:	4b05      	ldr	r3, [pc, #20]	; (8002144 <HAL_IncTick+0x20>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4413      	add	r3, r2
 8002134:	4a03      	ldr	r2, [pc, #12]	; (8002144 <HAL_IncTick+0x20>)
 8002136:	6013      	str	r3, [r2, #0]
}
 8002138:	bf00      	nop
 800213a:	46bd      	mov	sp, r7
 800213c:	bc80      	pop	{r7}
 800213e:	4770      	bx	lr
 8002140:	20000070 	.word	0x20000070
 8002144:	200002a4 	.word	0x200002a4

08002148 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  return uwTick;
 800214c:	4b02      	ldr	r3, [pc, #8]	; (8002158 <HAL_GetTick+0x10>)
 800214e:	681b      	ldr	r3, [r3, #0]
}
 8002150:	4618      	mov	r0, r3
 8002152:	46bd      	mov	sp, r7
 8002154:	bc80      	pop	{r7}
 8002156:	4770      	bx	lr
 8002158:	200002a4 	.word	0x200002a4

0800215c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b086      	sub	sp, #24
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002164:	2300      	movs	r3, #0
 8002166:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002168:	2300      	movs	r3, #0
 800216a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 800216c:	2300      	movs	r3, #0
 800216e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002170:	2300      	movs	r3, #0
 8002172:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d101      	bne.n	800217e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e0be      	b.n	80022fc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002188:	2b00      	cmp	r3, #0
 800218a:	d109      	bne.n	80021a0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f7ff fe18 	bl	8001dd0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f000 fc4d 	bl	8002a40 <ADC_ConversionStop_Disable>
 80021a6:	4603      	mov	r3, r0
 80021a8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ae:	f003 0310 	and.w	r3, r3, #16
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	f040 8099 	bne.w	80022ea <HAL_ADC_Init+0x18e>
 80021b8:	7dfb      	ldrb	r3, [r7, #23]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	f040 8095 	bne.w	80022ea <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80021c8:	f023 0302 	bic.w	r3, r3, #2
 80021cc:	f043 0202 	orr.w	r2, r3, #2
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80021dc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	7b1b      	ldrb	r3, [r3, #12]
 80021e2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80021e4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80021e6:	68ba      	ldr	r2, [r7, #8]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021f4:	d003      	beq.n	80021fe <HAL_ADC_Init+0xa2>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d102      	bne.n	8002204 <HAL_ADC_Init+0xa8>
 80021fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002202:	e000      	b.n	8002206 <HAL_ADC_Init+0xaa>
 8002204:	2300      	movs	r3, #0
 8002206:	693a      	ldr	r2, [r7, #16]
 8002208:	4313      	orrs	r3, r2
 800220a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	7d1b      	ldrb	r3, [r3, #20]
 8002210:	2b01      	cmp	r3, #1
 8002212:	d119      	bne.n	8002248 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	7b1b      	ldrb	r3, [r3, #12]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d109      	bne.n	8002230 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	699b      	ldr	r3, [r3, #24]
 8002220:	3b01      	subs	r3, #1
 8002222:	035a      	lsls	r2, r3, #13
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	4313      	orrs	r3, r2
 8002228:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800222c:	613b      	str	r3, [r7, #16]
 800222e:	e00b      	b.n	8002248 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002234:	f043 0220 	orr.w	r2, r3, #32
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002240:	f043 0201 	orr.w	r2, r3, #1
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	693a      	ldr	r2, [r7, #16]
 8002258:	430a      	orrs	r2, r1
 800225a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	689a      	ldr	r2, [r3, #8]
 8002262:	4b28      	ldr	r3, [pc, #160]	; (8002304 <HAL_ADC_Init+0x1a8>)
 8002264:	4013      	ands	r3, r2
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	6812      	ldr	r2, [r2, #0]
 800226a:	68b9      	ldr	r1, [r7, #8]
 800226c:	430b      	orrs	r3, r1
 800226e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002278:	d003      	beq.n	8002282 <HAL_ADC_Init+0x126>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	2b01      	cmp	r3, #1
 8002280:	d104      	bne.n	800228c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	691b      	ldr	r3, [r3, #16]
 8002286:	3b01      	subs	r3, #1
 8002288:	051b      	lsls	r3, r3, #20
 800228a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002292:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	68fa      	ldr	r2, [r7, #12]
 800229c:	430a      	orrs	r2, r1
 800229e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	689a      	ldr	r2, [r3, #8]
 80022a6:	4b18      	ldr	r3, [pc, #96]	; (8002308 <HAL_ADC_Init+0x1ac>)
 80022a8:	4013      	ands	r3, r2
 80022aa:	68ba      	ldr	r2, [r7, #8]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d10b      	bne.n	80022c8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2200      	movs	r2, #0
 80022b4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ba:	f023 0303 	bic.w	r3, r3, #3
 80022be:	f043 0201 	orr.w	r2, r3, #1
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80022c6:	e018      	b.n	80022fa <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022cc:	f023 0312 	bic.w	r3, r3, #18
 80022d0:	f043 0210 	orr.w	r2, r3, #16
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022dc:	f043 0201 	orr.w	r2, r3, #1
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80022e8:	e007      	b.n	80022fa <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ee:	f043 0210 	orr.w	r2, r3, #16
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80022fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3718      	adds	r7, #24
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	ffe1f7fd 	.word	0xffe1f7fd
 8002308:	ff1f0efe 	.word	0xff1f0efe

0800230c <HAL_ADC_DeInit>:
  *         function HAL_ADC_MspDeInit().
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002314:	2300      	movs	r3, #0
 8002316:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d101      	bne.n	8002322 <HAL_ADC_DeInit+0x16>
  {
     return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e0ad      	b.n	800247e <HAL_ADC_DeInit+0x172>
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002326:	f043 0202 	orr.w	r2, r3, #2
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f000 fb86 	bl	8002a40 <ADC_ConversionStop_Disable>
 8002334:	4603      	mov	r3, r0
 8002336:	73fb      	strb	r3, [r7, #15]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (tmp_hal_status == HAL_OK)
 8002338:	7bfb      	ldrb	r3, [r7, #15]
 800233a:	2b00      	cmp	r3, #0
 800233c:	f040 809a 	bne.w	8002474 <HAL_ADC_DeInit+0x168>




    /* Reset register SR */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_JEOC | ADC_FLAG_EOC |
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f06f 021f 	mvn.w	r2, #31
 8002348:	601a      	str	r2, [r3, #0]
                                ADC_FLAG_JSTRT | ADC_FLAG_STRT));
                         
    /* Reset register CR1 */
    CLEAR_BIT(hadc->Instance->CR1, (ADC_CR1_AWDEN   | ADC_CR1_JAWDEN | ADC_CR1_DISCNUM | 
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	6859      	ldr	r1, [r3, #4]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	4b4c      	ldr	r3, [pc, #304]	; (8002488 <HAL_ADC_DeInit+0x17c>)
 8002356:	400b      	ands	r3, r1
 8002358:	6053      	str	r3, [r2, #4]
                                    ADC_CR1_JDISCEN | ADC_CR1_DISCEN | ADC_CR1_JAUTO   | 
                                    ADC_CR1_AWDSGL  | ADC_CR1_SCAN   | ADC_CR1_JEOCIE  |   
                                    ADC_CR1_AWDIE   | ADC_CR1_EOCIE  | ADC_CR1_AWDCH    ));
    
    /* Reset register CR2 */
    CLEAR_BIT(hadc->Instance->CR2, (ADC_CR2_TSVREFE | ADC_CR2_SWSTART | ADC_CR2_JSWSTART | 
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	6899      	ldr	r1, [r3, #8]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	4b49      	ldr	r3, [pc, #292]	; (800248c <HAL_ADC_DeInit+0x180>)
 8002366:	400b      	ands	r3, r1
 8002368:	6093      	str	r3, [r2, #8]
                                    ADC_CR2_JEXTSEL | ADC_CR2_ALIGN   | ADC_CR2_DMA      |        
                                    ADC_CR2_RSTCAL  | ADC_CR2_CAL     | ADC_CR2_CONT     |          
                                    ADC_CR2_ADON                                          ));
    
    /* Reset register SMPR1 */
    CLEAR_BIT(hadc->Instance->SMPR1, (ADC_SMPR1_SMP17 | ADC_SMPR1_SMP16 | ADC_SMPR1_SMP15 | 
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	68da      	ldr	r2, [r3, #12]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8002378:	60da      	str	r2, [r3, #12]
                                      ADC_SMPR1_SMP14 | ADC_SMPR1_SMP13 | ADC_SMPR1_SMP12 | 
                                      ADC_SMPR1_SMP11 | ADC_SMPR1_SMP10                    ));
    
    /* Reset register SMPR2 */
    CLEAR_BIT(hadc->Instance->SMPR2, (ADC_SMPR2_SMP9 | ADC_SMPR2_SMP8 | ADC_SMPR2_SMP7 | 
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	691a      	ldr	r2, [r3, #16]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 8002388:	611a      	str	r2, [r3, #16]
                                      ADC_SMPR2_SMP6 | ADC_SMPR2_SMP5 | ADC_SMPR2_SMP4 | 
                                      ADC_SMPR2_SMP3 | ADC_SMPR2_SMP2 | ADC_SMPR2_SMP1 | 
                                      ADC_SMPR2_SMP0                                    ));

    /* Reset register JOFR1 */
    CLEAR_BIT(hadc->Instance->JOFR1, ADC_JOFR1_JOFFSET1);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	695b      	ldr	r3, [r3, #20]
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	6812      	ldr	r2, [r2, #0]
 8002394:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002398:	f023 030f 	bic.w	r3, r3, #15
 800239c:	6153      	str	r3, [r2, #20]
    /* Reset register JOFR2 */
    CLEAR_BIT(hadc->Instance->JOFR2, ADC_JOFR2_JOFFSET2);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	6812      	ldr	r2, [r2, #0]
 80023a8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80023ac:	f023 030f 	bic.w	r3, r3, #15
 80023b0:	6193      	str	r3, [r2, #24]
    /* Reset register JOFR3 */
    CLEAR_BIT(hadc->Instance->JOFR3, ADC_JOFR3_JOFFSET3);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	69db      	ldr	r3, [r3, #28]
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	6812      	ldr	r2, [r2, #0]
 80023bc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80023c0:	f023 030f 	bic.w	r3, r3, #15
 80023c4:	61d3      	str	r3, [r2, #28]
    /* Reset register JOFR4 */
    CLEAR_BIT(hadc->Instance->JOFR4, ADC_JOFR4_JOFFSET4);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	6a1b      	ldr	r3, [r3, #32]
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	6812      	ldr	r2, [r2, #0]
 80023d0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80023d4:	f023 030f 	bic.w	r3, r3, #15
 80023d8:	6213      	str	r3, [r2, #32]
    
    /* Reset register HTR */
    CLEAR_BIT(hadc->Instance->HTR, ADC_HTR_HT);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	6812      	ldr	r2, [r2, #0]
 80023e4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80023e8:	f023 030f 	bic.w	r3, r3, #15
 80023ec:	6253      	str	r3, [r2, #36]	; 0x24
    /* Reset register LTR */
    CLEAR_BIT(hadc->Instance->LTR, ADC_LTR_LT);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	6812      	ldr	r2, [r2, #0]
 80023f8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80023fc:	f023 030f 	bic.w	r3, r3, #15
 8002400:	6293      	str	r3, [r2, #40]	; 0x28
    
    /* Reset register SQR1 */
    CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L    |
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8002410:	62da      	str	r2, [r3, #44]	; 0x2c
                                    ADC_SQR1_SQ16 | ADC_SQR1_SQ15 | 
                                    ADC_SQR1_SQ14 | ADC_SQR1_SQ13  );
    
    /* Reset register SQR1 */
    CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L    |
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8002420:	62da      	str	r2, [r3, #44]	; 0x2c
                                    ADC_SQR1_SQ16 | ADC_SQR1_SQ15 | 
                                    ADC_SQR1_SQ14 | ADC_SQR1_SQ13  );
    
    /* Reset register SQR2 */
    CLEAR_BIT(hadc->Instance->SQR2, ADC_SQR2_SQ12 | ADC_SQR2_SQ11 | ADC_SQR2_SQ10 | 
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 8002430:	631a      	str	r2, [r3, #48]	; 0x30
                                    ADC_SQR2_SQ9  | ADC_SQR2_SQ8  | ADC_SQR2_SQ7   );
    
    /* Reset register SQR3 */
    CLEAR_BIT(hadc->Instance->SQR3, ADC_SQR3_SQ6 | ADC_SQR3_SQ5 | ADC_SQR3_SQ4 | 
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 8002440:	635a      	str	r2, [r3, #52]	; 0x34
                                    ADC_SQR3_SQ3 | ADC_SQR3_SQ2 | ADC_SQR3_SQ1  );
    
    /* Reset register JSQR */
    CLEAR_BIT(hadc->Instance->JSQR, ADC_JSQR_JL |
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	6812      	ldr	r2, [r2, #0]
 800244c:	0d9b      	lsrs	r3, r3, #22
 800244e:	059b      	lsls	r3, r3, #22
 8002450:	6393      	str	r3, [r2, #56]	; 0x38
                                    ADC_JSQR_JSQ4 | ADC_JSQR_JSQ3 | 
                                    ADC_JSQR_JSQ2 | ADC_JSQR_JSQ1  );
    
    /* Reset register JSQR */
    CLEAR_BIT(hadc->Instance->JSQR, ADC_JSQR_JL |
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	6812      	ldr	r2, [r2, #0]
 800245c:	0d9b      	lsrs	r3, r3, #22
 800245e:	059b      	lsls	r3, r3, #22
 8002460:	6393      	str	r3, [r2, #56]	; 0x38
    
    /* DeInit the low level hardware */
    hadc->MspDeInitCallback(hadc);
#else
    /* DeInit the low level hardware */
    HAL_ADC_MspDeInit(hadc);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f7ff fd06 	bl	8001e74 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set ADC state */
    hadc->State = HAL_ADC_STATE_RESET; 
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	629a      	str	r2, [r3, #40]	; 0x28
  
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800247c:	7bfb      	ldrb	r3, [r7, #15]
}
 800247e:	4618      	mov	r0, r3
 8002480:	3710      	adds	r7, #16
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	ff3f0000 	.word	0xff3f0000
 800248c:	ff0106f0 	.word	0xff0106f0

08002490 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002498:	2300      	movs	r3, #0
 800249a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d101      	bne.n	80024aa <HAL_ADC_Start_IT+0x1a>
 80024a6:	2302      	movs	r3, #2
 80024a8:	e0a0      	b.n	80025ec <HAL_ADC_Start_IT+0x15c>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2201      	movs	r2, #1
 80024ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f000 fa72 	bl	800299c <ADC_Enable>
 80024b8:	4603      	mov	r3, r0
 80024ba:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80024bc:	7bfb      	ldrb	r3, [r7, #15]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	f040 808f 	bne.w	80025e2 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80024cc:	f023 0301 	bic.w	r3, r3, #1
 80024d0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a45      	ldr	r2, [pc, #276]	; (80025f4 <HAL_ADC_Start_IT+0x164>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d105      	bne.n	80024ee <HAL_ADC_Start_IT+0x5e>
 80024e2:	4b45      	ldr	r3, [pc, #276]	; (80025f8 <HAL_ADC_Start_IT+0x168>)
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d115      	bne.n	800251a <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002504:	2b00      	cmp	r3, #0
 8002506:	d026      	beq.n	8002556 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800250c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002510:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002518:	e01d      	b.n	8002556 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800251e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a33      	ldr	r2, [pc, #204]	; (80025f8 <HAL_ADC_Start_IT+0x168>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d004      	beq.n	800253a <HAL_ADC_Start_IT+0xaa>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a2f      	ldr	r2, [pc, #188]	; (80025f4 <HAL_ADC_Start_IT+0x164>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d10d      	bne.n	8002556 <HAL_ADC_Start_IT+0xc6>
 800253a:	4b2f      	ldr	r3, [pc, #188]	; (80025f8 <HAL_ADC_Start_IT+0x168>)
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002542:	2b00      	cmp	r3, #0
 8002544:	d007      	beq.n	8002556 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800254a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800254e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800255a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d006      	beq.n	8002570 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002566:	f023 0206 	bic.w	r2, r3, #6
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	62da      	str	r2, [r3, #44]	; 0x2c
 800256e:	e002      	b.n	8002576 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2200      	movs	r2, #0
 8002574:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f06f 0202 	mvn.w	r2, #2
 8002586:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	685a      	ldr	r2, [r3, #4]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f042 0220 	orr.w	r2, r2, #32
 8002596:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80025a2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80025a6:	d113      	bne.n	80025d0 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80025ac:	4a11      	ldr	r2, [pc, #68]	; (80025f4 <HAL_ADC_Start_IT+0x164>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d105      	bne.n	80025be <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80025b2:	4b11      	ldr	r3, [pc, #68]	; (80025f8 <HAL_ADC_Start_IT+0x168>)
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d108      	bne.n	80025d0 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	689a      	ldr	r2, [r3, #8]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80025cc:	609a      	str	r2, [r3, #8]
 80025ce:	e00c      	b.n	80025ea <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	689a      	ldr	r2, [r3, #8]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80025de:	609a      	str	r2, [r3, #8]
 80025e0:	e003      	b.n	80025ea <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 80025ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3710      	adds	r7, #16
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	40012800 	.word	0x40012800
 80025f8:	40012400 	.word	0x40012400

080025fc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800260a:	4618      	mov	r0, r3
 800260c:	370c      	adds	r7, #12
 800260e:	46bd      	mov	sp, r7
 8002610:	bc80      	pop	{r7}
 8002612:	4770      	bx	lr

08002614 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f003 0320 	and.w	r3, r3, #32
 8002626:	2b20      	cmp	r3, #32
 8002628:	d140      	bne.n	80026ac <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0302 	and.w	r3, r3, #2
 8002634:	2b02      	cmp	r3, #2
 8002636:	d139      	bne.n	80026ac <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800263c:	f003 0310 	and.w	r3, r3, #16
 8002640:	2b00      	cmp	r3, #0
 8002642:	d105      	bne.n	8002650 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002648:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800265a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800265e:	d11d      	bne.n	800269c <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002664:	2b00      	cmp	r3, #0
 8002666:	d119      	bne.n	800269c <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	685a      	ldr	r2, [r3, #4]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f022 0220 	bic.w	r2, r2, #32
 8002676:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800267c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002688:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d105      	bne.n	800269c <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002694:	f043 0201 	orr.w	r2, r3, #1
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f7ff f967 	bl	8001970 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f06f 0212 	mvn.w	r2, #18
 80026aa:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026b6:	2b80      	cmp	r3, #128	; 0x80
 80026b8:	d14f      	bne.n	800275a <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f003 0304 	and.w	r3, r3, #4
 80026c4:	2b04      	cmp	r3, #4
 80026c6:	d148      	bne.n	800275a <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026cc:	f003 0310 	and.w	r3, r3, #16
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d105      	bne.n	80026e0 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80026ea:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80026ee:	d012      	beq.n	8002716 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d125      	bne.n	800274a <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002708:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800270c:	d11d      	bne.n	800274a <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002712:	2b00      	cmp	r3, #0
 8002714:	d119      	bne.n	800274a <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	685a      	ldr	r2, [r3, #4]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002724:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800272a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800273a:	2b00      	cmp	r3, #0
 800273c:	d105      	bne.n	800274a <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002742:	f043 0201 	orr.w	r2, r3, #1
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f000 fa4e 	bl	8002bec <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f06f 020c 	mvn.w	r2, #12
 8002758:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002764:	2b40      	cmp	r3, #64	; 0x40
 8002766:	d114      	bne.n	8002792 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0301 	and.w	r3, r3, #1
 8002772:	2b01      	cmp	r3, #1
 8002774:	d10d      	bne.n	8002792 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800277a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f000 f809 	bl	800279a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f06f 0201 	mvn.w	r2, #1
 8002790:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8002792:	bf00      	nop
 8002794:	3708      	adds	r7, #8
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}

0800279a <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800279a:	b480      	push	{r7}
 800279c:	b083      	sub	sp, #12
 800279e:	af00      	add	r7, sp, #0
 80027a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80027a2:	bf00      	nop
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bc80      	pop	{r7}
 80027aa:	4770      	bx	lr

080027ac <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80027ac:	b480      	push	{r7}
 80027ae:	b085      	sub	sp, #20
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027b6:	2300      	movs	r3, #0
 80027b8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80027ba:	2300      	movs	r3, #0
 80027bc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d101      	bne.n	80027cc <HAL_ADC_ConfigChannel+0x20>
 80027c8:	2302      	movs	r3, #2
 80027ca:	e0dc      	b.n	8002986 <HAL_ADC_ConfigChannel+0x1da>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	2b06      	cmp	r3, #6
 80027da:	d81c      	bhi.n	8002816 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	685a      	ldr	r2, [r3, #4]
 80027e6:	4613      	mov	r3, r2
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	4413      	add	r3, r2
 80027ec:	3b05      	subs	r3, #5
 80027ee:	221f      	movs	r2, #31
 80027f0:	fa02 f303 	lsl.w	r3, r2, r3
 80027f4:	43db      	mvns	r3, r3
 80027f6:	4019      	ands	r1, r3
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	6818      	ldr	r0, [r3, #0]
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	685a      	ldr	r2, [r3, #4]
 8002800:	4613      	mov	r3, r2
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	4413      	add	r3, r2
 8002806:	3b05      	subs	r3, #5
 8002808:	fa00 f203 	lsl.w	r2, r0, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	430a      	orrs	r2, r1
 8002812:	635a      	str	r2, [r3, #52]	; 0x34
 8002814:	e03c      	b.n	8002890 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	2b0c      	cmp	r3, #12
 800281c:	d81c      	bhi.n	8002858 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685a      	ldr	r2, [r3, #4]
 8002828:	4613      	mov	r3, r2
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	4413      	add	r3, r2
 800282e:	3b23      	subs	r3, #35	; 0x23
 8002830:	221f      	movs	r2, #31
 8002832:	fa02 f303 	lsl.w	r3, r2, r3
 8002836:	43db      	mvns	r3, r3
 8002838:	4019      	ands	r1, r3
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	6818      	ldr	r0, [r3, #0]
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	685a      	ldr	r2, [r3, #4]
 8002842:	4613      	mov	r3, r2
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	4413      	add	r3, r2
 8002848:	3b23      	subs	r3, #35	; 0x23
 800284a:	fa00 f203 	lsl.w	r2, r0, r3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	430a      	orrs	r2, r1
 8002854:	631a      	str	r2, [r3, #48]	; 0x30
 8002856:	e01b      	b.n	8002890 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	685a      	ldr	r2, [r3, #4]
 8002862:	4613      	mov	r3, r2
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	4413      	add	r3, r2
 8002868:	3b41      	subs	r3, #65	; 0x41
 800286a:	221f      	movs	r2, #31
 800286c:	fa02 f303 	lsl.w	r3, r2, r3
 8002870:	43db      	mvns	r3, r3
 8002872:	4019      	ands	r1, r3
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	6818      	ldr	r0, [r3, #0]
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	685a      	ldr	r2, [r3, #4]
 800287c:	4613      	mov	r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	4413      	add	r3, r2
 8002882:	3b41      	subs	r3, #65	; 0x41
 8002884:	fa00 f203 	lsl.w	r2, r0, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	430a      	orrs	r2, r1
 800288e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2b09      	cmp	r3, #9
 8002896:	d91c      	bls.n	80028d2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	68d9      	ldr	r1, [r3, #12]
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	4613      	mov	r3, r2
 80028a4:	005b      	lsls	r3, r3, #1
 80028a6:	4413      	add	r3, r2
 80028a8:	3b1e      	subs	r3, #30
 80028aa:	2207      	movs	r2, #7
 80028ac:	fa02 f303 	lsl.w	r3, r2, r3
 80028b0:	43db      	mvns	r3, r3
 80028b2:	4019      	ands	r1, r3
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	6898      	ldr	r0, [r3, #8]
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	4613      	mov	r3, r2
 80028be:	005b      	lsls	r3, r3, #1
 80028c0:	4413      	add	r3, r2
 80028c2:	3b1e      	subs	r3, #30
 80028c4:	fa00 f203 	lsl.w	r2, r0, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	430a      	orrs	r2, r1
 80028ce:	60da      	str	r2, [r3, #12]
 80028d0:	e019      	b.n	8002906 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	6919      	ldr	r1, [r3, #16]
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	4613      	mov	r3, r2
 80028de:	005b      	lsls	r3, r3, #1
 80028e0:	4413      	add	r3, r2
 80028e2:	2207      	movs	r2, #7
 80028e4:	fa02 f303 	lsl.w	r3, r2, r3
 80028e8:	43db      	mvns	r3, r3
 80028ea:	4019      	ands	r1, r3
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	6898      	ldr	r0, [r3, #8]
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	4613      	mov	r3, r2
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	4413      	add	r3, r2
 80028fa:	fa00 f203 	lsl.w	r2, r0, r3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	430a      	orrs	r2, r1
 8002904:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	2b10      	cmp	r3, #16
 800290c:	d003      	beq.n	8002916 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002912:	2b11      	cmp	r3, #17
 8002914:	d132      	bne.n	800297c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a1d      	ldr	r2, [pc, #116]	; (8002990 <HAL_ADC_ConfigChannel+0x1e4>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d125      	bne.n	800296c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d126      	bne.n	800297c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	689a      	ldr	r2, [r3, #8]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800293c:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	2b10      	cmp	r3, #16
 8002944:	d11a      	bne.n	800297c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002946:	4b13      	ldr	r3, [pc, #76]	; (8002994 <HAL_ADC_ConfigChannel+0x1e8>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a13      	ldr	r2, [pc, #76]	; (8002998 <HAL_ADC_ConfigChannel+0x1ec>)
 800294c:	fba2 2303 	umull	r2, r3, r2, r3
 8002950:	0c9a      	lsrs	r2, r3, #18
 8002952:	4613      	mov	r3, r2
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	4413      	add	r3, r2
 8002958:	005b      	lsls	r3, r3, #1
 800295a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800295c:	e002      	b.n	8002964 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	3b01      	subs	r3, #1
 8002962:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d1f9      	bne.n	800295e <HAL_ADC_ConfigChannel+0x1b2>
 800296a:	e007      	b.n	800297c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002970:	f043 0220 	orr.w	r2, r3, #32
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002984:	7bfb      	ldrb	r3, [r7, #15]
}
 8002986:	4618      	mov	r0, r3
 8002988:	3714      	adds	r7, #20
 800298a:	46bd      	mov	sp, r7
 800298c:	bc80      	pop	{r7}
 800298e:	4770      	bx	lr
 8002990:	40012400 	.word	0x40012400
 8002994:	20000068 	.word	0x20000068
 8002998:	431bde83 	.word	0x431bde83

0800299c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80029a4:	2300      	movs	r3, #0
 80029a6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80029a8:	2300      	movs	r3, #0
 80029aa:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	2b01      	cmp	r3, #1
 80029b8:	d039      	beq.n	8002a2e <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	689a      	ldr	r2, [r3, #8]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f042 0201 	orr.w	r2, r2, #1
 80029c8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80029ca:	4b1b      	ldr	r3, [pc, #108]	; (8002a38 <ADC_Enable+0x9c>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a1b      	ldr	r2, [pc, #108]	; (8002a3c <ADC_Enable+0xa0>)
 80029d0:	fba2 2303 	umull	r2, r3, r2, r3
 80029d4:	0c9b      	lsrs	r3, r3, #18
 80029d6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80029d8:	e002      	b.n	80029e0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	3b01      	subs	r3, #1
 80029de:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d1f9      	bne.n	80029da <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80029e6:	f7ff fbaf 	bl	8002148 <HAL_GetTick>
 80029ea:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80029ec:	e018      	b.n	8002a20 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80029ee:	f7ff fbab 	bl	8002148 <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d911      	bls.n	8002a20 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a00:	f043 0210 	orr.w	r2, r3, #16
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a0c:	f043 0201 	orr.w	r2, r3, #1
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e007      	b.n	8002a30 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d1df      	bne.n	80029ee <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002a2e:	2300      	movs	r3, #0
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3710      	adds	r7, #16
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	20000068 	.word	0x20000068
 8002a3c:	431bde83 	.word	0x431bde83

08002a40 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f003 0301 	and.w	r3, r3, #1
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d127      	bne.n	8002aaa <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	689a      	ldr	r2, [r3, #8]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f022 0201 	bic.w	r2, r2, #1
 8002a68:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002a6a:	f7ff fb6d 	bl	8002148 <HAL_GetTick>
 8002a6e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002a70:	e014      	b.n	8002a9c <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002a72:	f7ff fb69 	bl	8002148 <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d90d      	bls.n	8002a9c <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a84:	f043 0210 	orr.w	r2, r3, #16
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a90:	f043 0201 	orr.w	r2, r3, #1
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e007      	b.n	8002aac <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f003 0301 	and.w	r3, r3, #1
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d0e3      	beq.n	8002a72 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002aaa:	2300      	movs	r3, #0
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3710      	adds	r7, #16
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002ab4:	b590      	push	{r4, r7, lr}
 8002ab6:	b087      	sub	sp, #28
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002abc:	2300      	movs	r3, #0
 8002abe:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d101      	bne.n	8002ad2 <HAL_ADCEx_Calibration_Start+0x1e>
 8002ace:	2302      	movs	r3, #2
 8002ad0:	e086      	b.n	8002be0 <HAL_ADCEx_Calibration_Start+0x12c>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f7ff ffb0 	bl	8002a40 <ADC_ConversionStop_Disable>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002ae4:	7dfb      	ldrb	r3, [r7, #23]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d175      	bne.n	8002bd6 <HAL_ADCEx_Calibration_Start+0x122>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aee:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002af2:	f023 0302 	bic.w	r3, r3, #2
 8002af6:	f043 0202 	orr.w	r2, r3, #2
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002afe:	4b3a      	ldr	r3, [pc, #232]	; (8002be8 <HAL_ADCEx_Calibration_Start+0x134>)
 8002b00:	681c      	ldr	r4, [r3, #0]
 8002b02:	2002      	movs	r0, #2
 8002b04:	f001 f928 	bl	8003d58 <HAL_RCCEx_GetPeriphCLKFreq>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8002b0e:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8002b10:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8002b12:	e002      	b.n	8002b1a <HAL_ADCEx_Calibration_Start+0x66>
    {
      wait_loop_index--;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	3b01      	subs	r3, #1
 8002b18:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d1f9      	bne.n	8002b14 <HAL_ADCEx_Calibration_Start+0x60>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f7ff ff3b 	bl	800299c <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	689a      	ldr	r2, [r3, #8]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f042 0208 	orr.w	r2, r2, #8
 8002b34:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002b36:	f7ff fb07 	bl	8002148 <HAL_GetTick>
 8002b3a:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002b3c:	e014      	b.n	8002b68 <HAL_ADCEx_Calibration_Start+0xb4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002b3e:	f7ff fb03 	bl	8002148 <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	2b0a      	cmp	r3, #10
 8002b4a:	d90d      	bls.n	8002b68 <HAL_ADCEx_Calibration_Start+0xb4>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b50:	f023 0312 	bic.w	r3, r3, #18
 8002b54:	f043 0210 	orr.w	r2, r3, #16
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e03b      	b.n	8002be0 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	f003 0308 	and.w	r3, r3, #8
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d1e3      	bne.n	8002b3e <HAL_ADCEx_Calibration_Start+0x8a>
      }
    }
    
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	689a      	ldr	r2, [r3, #8]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f042 0204 	orr.w	r2, r2, #4
 8002b84:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002b86:	f7ff fadf 	bl	8002148 <HAL_GetTick>
 8002b8a:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002b8c:	e014      	b.n	8002bb8 <HAL_ADCEx_Calibration_Start+0x104>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002b8e:	f7ff fadb 	bl	8002148 <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	2b0a      	cmp	r3, #10
 8002b9a:	d90d      	bls.n	8002bb8 <HAL_ADCEx_Calibration_Start+0x104>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba0:	f023 0312 	bic.w	r3, r3, #18
 8002ba4:	f043 0210 	orr.w	r2, r3, #16
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	629a      	str	r2, [r3, #40]	; 0x28
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        
        return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e013      	b.n	8002be0 <HAL_ADCEx_Calibration_Start+0x12c>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	f003 0304 	and.w	r3, r3, #4
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1e3      	bne.n	8002b8e <HAL_ADCEx_Calibration_Start+0xda>
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bca:	f023 0303 	bic.w	r3, r3, #3
 8002bce:	f043 0201 	orr.w	r2, r3, #1
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002bde:	7dfb      	ldrb	r3, [r7, #23]
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	371c      	adds	r7, #28
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd90      	pop	{r4, r7, pc}
 8002be8:	20000068 	.word	0x20000068

08002bec <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002bf4:	bf00      	nop
 8002bf6:	370c      	adds	r7, #12
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bc80      	pop	{r7}
 8002bfc:	4770      	bx	lr
	...

08002c00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b085      	sub	sp, #20
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f003 0307 	and.w	r3, r3, #7
 8002c0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c10:	4b0c      	ldr	r3, [pc, #48]	; (8002c44 <__NVIC_SetPriorityGrouping+0x44>)
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c16:	68ba      	ldr	r2, [r7, #8]
 8002c18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c32:	4a04      	ldr	r2, [pc, #16]	; (8002c44 <__NVIC_SetPriorityGrouping+0x44>)
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	60d3      	str	r3, [r2, #12]
}
 8002c38:	bf00      	nop
 8002c3a:	3714      	adds	r7, #20
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bc80      	pop	{r7}
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	e000ed00 	.word	0xe000ed00

08002c48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c4c:	4b04      	ldr	r3, [pc, #16]	; (8002c60 <__NVIC_GetPriorityGrouping+0x18>)
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	0a1b      	lsrs	r3, r3, #8
 8002c52:	f003 0307 	and.w	r3, r3, #7
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bc80      	pop	{r7}
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	e000ed00 	.word	0xe000ed00

08002c64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	db0b      	blt.n	8002c8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c76:	79fb      	ldrb	r3, [r7, #7]
 8002c78:	f003 021f 	and.w	r2, r3, #31
 8002c7c:	4906      	ldr	r1, [pc, #24]	; (8002c98 <__NVIC_EnableIRQ+0x34>)
 8002c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c82:	095b      	lsrs	r3, r3, #5
 8002c84:	2001      	movs	r0, #1
 8002c86:	fa00 f202 	lsl.w	r2, r0, r2
 8002c8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c8e:	bf00      	nop
 8002c90:	370c      	adds	r7, #12
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bc80      	pop	{r7}
 8002c96:	4770      	bx	lr
 8002c98:	e000e100 	.word	0xe000e100

08002c9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	6039      	str	r1, [r7, #0]
 8002ca6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ca8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	db0a      	blt.n	8002cc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	b2da      	uxtb	r2, r3
 8002cb4:	490c      	ldr	r1, [pc, #48]	; (8002ce8 <__NVIC_SetPriority+0x4c>)
 8002cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cba:	0112      	lsls	r2, r2, #4
 8002cbc:	b2d2      	uxtb	r2, r2
 8002cbe:	440b      	add	r3, r1
 8002cc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cc4:	e00a      	b.n	8002cdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	b2da      	uxtb	r2, r3
 8002cca:	4908      	ldr	r1, [pc, #32]	; (8002cec <__NVIC_SetPriority+0x50>)
 8002ccc:	79fb      	ldrb	r3, [r7, #7]
 8002cce:	f003 030f 	and.w	r3, r3, #15
 8002cd2:	3b04      	subs	r3, #4
 8002cd4:	0112      	lsls	r2, r2, #4
 8002cd6:	b2d2      	uxtb	r2, r2
 8002cd8:	440b      	add	r3, r1
 8002cda:	761a      	strb	r2, [r3, #24]
}
 8002cdc:	bf00      	nop
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bc80      	pop	{r7}
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	e000e100 	.word	0xe000e100
 8002cec:	e000ed00 	.word	0xe000ed00

08002cf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b089      	sub	sp, #36	; 0x24
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f003 0307 	and.w	r3, r3, #7
 8002d02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	f1c3 0307 	rsb	r3, r3, #7
 8002d0a:	2b04      	cmp	r3, #4
 8002d0c:	bf28      	it	cs
 8002d0e:	2304      	movcs	r3, #4
 8002d10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	3304      	adds	r3, #4
 8002d16:	2b06      	cmp	r3, #6
 8002d18:	d902      	bls.n	8002d20 <NVIC_EncodePriority+0x30>
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	3b03      	subs	r3, #3
 8002d1e:	e000      	b.n	8002d22 <NVIC_EncodePriority+0x32>
 8002d20:	2300      	movs	r3, #0
 8002d22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d24:	f04f 32ff 	mov.w	r2, #4294967295
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2e:	43da      	mvns	r2, r3
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	401a      	ands	r2, r3
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d38:	f04f 31ff 	mov.w	r1, #4294967295
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d42:	43d9      	mvns	r1, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d48:	4313      	orrs	r3, r2
         );
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3724      	adds	r7, #36	; 0x24
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bc80      	pop	{r7}
 8002d52:	4770      	bx	lr

08002d54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d64:	d301      	bcc.n	8002d6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d66:	2301      	movs	r3, #1
 8002d68:	e00f      	b.n	8002d8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d6a:	4a0a      	ldr	r2, [pc, #40]	; (8002d94 <SysTick_Config+0x40>)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	3b01      	subs	r3, #1
 8002d70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d72:	210f      	movs	r1, #15
 8002d74:	f04f 30ff 	mov.w	r0, #4294967295
 8002d78:	f7ff ff90 	bl	8002c9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d7c:	4b05      	ldr	r3, [pc, #20]	; (8002d94 <SysTick_Config+0x40>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d82:	4b04      	ldr	r3, [pc, #16]	; (8002d94 <SysTick_Config+0x40>)
 8002d84:	2207      	movs	r2, #7
 8002d86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3708      	adds	r7, #8
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	e000e010 	.word	0xe000e010

08002d98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f7ff ff2d 	bl	8002c00 <__NVIC_SetPriorityGrouping>
}
 8002da6:	bf00      	nop
 8002da8:	3708      	adds	r7, #8
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}

08002dae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002dae:	b580      	push	{r7, lr}
 8002db0:	b086      	sub	sp, #24
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	4603      	mov	r3, r0
 8002db6:	60b9      	str	r1, [r7, #8]
 8002db8:	607a      	str	r2, [r7, #4]
 8002dba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002dc0:	f7ff ff42 	bl	8002c48 <__NVIC_GetPriorityGrouping>
 8002dc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	68b9      	ldr	r1, [r7, #8]
 8002dca:	6978      	ldr	r0, [r7, #20]
 8002dcc:	f7ff ff90 	bl	8002cf0 <NVIC_EncodePriority>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dd6:	4611      	mov	r1, r2
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7ff ff5f 	bl	8002c9c <__NVIC_SetPriority>
}
 8002dde:	bf00      	nop
 8002de0:	3718      	adds	r7, #24
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002de6:	b580      	push	{r7, lr}
 8002de8:	b082      	sub	sp, #8
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	4603      	mov	r3, r0
 8002dee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002df4:	4618      	mov	r0, r3
 8002df6:	f7ff ff35 	bl	8002c64 <__NVIC_EnableIRQ>
}
 8002dfa:	bf00      	nop
 8002dfc:	3708      	adds	r7, #8
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}

08002e02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e02:	b580      	push	{r7, lr}
 8002e04:	b082      	sub	sp, #8
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f7ff ffa2 	bl	8002d54 <SysTick_Config>
 8002e10:	4603      	mov	r3, r0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3708      	adds	r7, #8
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
	...

08002e1c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e24:	2300      	movs	r3, #0
 8002e26:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d005      	beq.n	8002e3e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2204      	movs	r2, #4
 8002e36:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	73fb      	strb	r3, [r7, #15]
 8002e3c:	e051      	b.n	8002ee2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f022 020e 	bic.w	r2, r2, #14
 8002e4c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f022 0201 	bic.w	r2, r2, #1
 8002e5c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a22      	ldr	r2, [pc, #136]	; (8002eec <HAL_DMA_Abort_IT+0xd0>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d029      	beq.n	8002ebc <HAL_DMA_Abort_IT+0xa0>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a20      	ldr	r2, [pc, #128]	; (8002ef0 <HAL_DMA_Abort_IT+0xd4>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d022      	beq.n	8002eb8 <HAL_DMA_Abort_IT+0x9c>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a1f      	ldr	r2, [pc, #124]	; (8002ef4 <HAL_DMA_Abort_IT+0xd8>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d01a      	beq.n	8002eb2 <HAL_DMA_Abort_IT+0x96>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a1d      	ldr	r2, [pc, #116]	; (8002ef8 <HAL_DMA_Abort_IT+0xdc>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d012      	beq.n	8002eac <HAL_DMA_Abort_IT+0x90>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a1c      	ldr	r2, [pc, #112]	; (8002efc <HAL_DMA_Abort_IT+0xe0>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d00a      	beq.n	8002ea6 <HAL_DMA_Abort_IT+0x8a>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a1a      	ldr	r2, [pc, #104]	; (8002f00 <HAL_DMA_Abort_IT+0xe4>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d102      	bne.n	8002ea0 <HAL_DMA_Abort_IT+0x84>
 8002e9a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002e9e:	e00e      	b.n	8002ebe <HAL_DMA_Abort_IT+0xa2>
 8002ea0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ea4:	e00b      	b.n	8002ebe <HAL_DMA_Abort_IT+0xa2>
 8002ea6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002eaa:	e008      	b.n	8002ebe <HAL_DMA_Abort_IT+0xa2>
 8002eac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002eb0:	e005      	b.n	8002ebe <HAL_DMA_Abort_IT+0xa2>
 8002eb2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002eb6:	e002      	b.n	8002ebe <HAL_DMA_Abort_IT+0xa2>
 8002eb8:	2310      	movs	r3, #16
 8002eba:	e000      	b.n	8002ebe <HAL_DMA_Abort_IT+0xa2>
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	4a11      	ldr	r2, [pc, #68]	; (8002f04 <HAL_DMA_Abort_IT+0xe8>)
 8002ec0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d003      	beq.n	8002ee2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	4798      	blx	r3
    } 
  }
  return status;
 8002ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3710      	adds	r7, #16
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	40020008 	.word	0x40020008
 8002ef0:	4002001c 	.word	0x4002001c
 8002ef4:	40020030 	.word	0x40020030
 8002ef8:	40020044 	.word	0x40020044
 8002efc:	40020058 	.word	0x40020058
 8002f00:	4002006c 	.word	0x4002006c
 8002f04:	40020000 	.word	0x40020000

08002f08 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b08b      	sub	sp, #44	; 0x2c
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f12:	2300      	movs	r3, #0
 8002f14:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002f16:	2300      	movs	r3, #0
 8002f18:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f1a:	e169      	b.n	80031f0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f20:	fa02 f303 	lsl.w	r3, r2, r3
 8002f24:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	69fa      	ldr	r2, [r7, #28]
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002f30:	69ba      	ldr	r2, [r7, #24]
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	f040 8158 	bne.w	80031ea <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	4a9a      	ldr	r2, [pc, #616]	; (80031a8 <HAL_GPIO_Init+0x2a0>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d05e      	beq.n	8003002 <HAL_GPIO_Init+0xfa>
 8002f44:	4a98      	ldr	r2, [pc, #608]	; (80031a8 <HAL_GPIO_Init+0x2a0>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d875      	bhi.n	8003036 <HAL_GPIO_Init+0x12e>
 8002f4a:	4a98      	ldr	r2, [pc, #608]	; (80031ac <HAL_GPIO_Init+0x2a4>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d058      	beq.n	8003002 <HAL_GPIO_Init+0xfa>
 8002f50:	4a96      	ldr	r2, [pc, #600]	; (80031ac <HAL_GPIO_Init+0x2a4>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d86f      	bhi.n	8003036 <HAL_GPIO_Init+0x12e>
 8002f56:	4a96      	ldr	r2, [pc, #600]	; (80031b0 <HAL_GPIO_Init+0x2a8>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d052      	beq.n	8003002 <HAL_GPIO_Init+0xfa>
 8002f5c:	4a94      	ldr	r2, [pc, #592]	; (80031b0 <HAL_GPIO_Init+0x2a8>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d869      	bhi.n	8003036 <HAL_GPIO_Init+0x12e>
 8002f62:	4a94      	ldr	r2, [pc, #592]	; (80031b4 <HAL_GPIO_Init+0x2ac>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d04c      	beq.n	8003002 <HAL_GPIO_Init+0xfa>
 8002f68:	4a92      	ldr	r2, [pc, #584]	; (80031b4 <HAL_GPIO_Init+0x2ac>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d863      	bhi.n	8003036 <HAL_GPIO_Init+0x12e>
 8002f6e:	4a92      	ldr	r2, [pc, #584]	; (80031b8 <HAL_GPIO_Init+0x2b0>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d046      	beq.n	8003002 <HAL_GPIO_Init+0xfa>
 8002f74:	4a90      	ldr	r2, [pc, #576]	; (80031b8 <HAL_GPIO_Init+0x2b0>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d85d      	bhi.n	8003036 <HAL_GPIO_Init+0x12e>
 8002f7a:	2b12      	cmp	r3, #18
 8002f7c:	d82a      	bhi.n	8002fd4 <HAL_GPIO_Init+0xcc>
 8002f7e:	2b12      	cmp	r3, #18
 8002f80:	d859      	bhi.n	8003036 <HAL_GPIO_Init+0x12e>
 8002f82:	a201      	add	r2, pc, #4	; (adr r2, 8002f88 <HAL_GPIO_Init+0x80>)
 8002f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f88:	08003003 	.word	0x08003003
 8002f8c:	08002fdd 	.word	0x08002fdd
 8002f90:	08002fef 	.word	0x08002fef
 8002f94:	08003031 	.word	0x08003031
 8002f98:	08003037 	.word	0x08003037
 8002f9c:	08003037 	.word	0x08003037
 8002fa0:	08003037 	.word	0x08003037
 8002fa4:	08003037 	.word	0x08003037
 8002fa8:	08003037 	.word	0x08003037
 8002fac:	08003037 	.word	0x08003037
 8002fb0:	08003037 	.word	0x08003037
 8002fb4:	08003037 	.word	0x08003037
 8002fb8:	08003037 	.word	0x08003037
 8002fbc:	08003037 	.word	0x08003037
 8002fc0:	08003037 	.word	0x08003037
 8002fc4:	08003037 	.word	0x08003037
 8002fc8:	08003037 	.word	0x08003037
 8002fcc:	08002fe5 	.word	0x08002fe5
 8002fd0:	08002ff9 	.word	0x08002ff9
 8002fd4:	4a79      	ldr	r2, [pc, #484]	; (80031bc <HAL_GPIO_Init+0x2b4>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d013      	beq.n	8003002 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002fda:	e02c      	b.n	8003036 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	623b      	str	r3, [r7, #32]
          break;
 8002fe2:	e029      	b.n	8003038 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	3304      	adds	r3, #4
 8002fea:	623b      	str	r3, [r7, #32]
          break;
 8002fec:	e024      	b.n	8003038 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	3308      	adds	r3, #8
 8002ff4:	623b      	str	r3, [r7, #32]
          break;
 8002ff6:	e01f      	b.n	8003038 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	330c      	adds	r3, #12
 8002ffe:	623b      	str	r3, [r7, #32]
          break;
 8003000:	e01a      	b.n	8003038 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d102      	bne.n	8003010 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800300a:	2304      	movs	r3, #4
 800300c:	623b      	str	r3, [r7, #32]
          break;
 800300e:	e013      	b.n	8003038 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	2b01      	cmp	r3, #1
 8003016:	d105      	bne.n	8003024 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003018:	2308      	movs	r3, #8
 800301a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	69fa      	ldr	r2, [r7, #28]
 8003020:	611a      	str	r2, [r3, #16]
          break;
 8003022:	e009      	b.n	8003038 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003024:	2308      	movs	r3, #8
 8003026:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	69fa      	ldr	r2, [r7, #28]
 800302c:	615a      	str	r2, [r3, #20]
          break;
 800302e:	e003      	b.n	8003038 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003030:	2300      	movs	r3, #0
 8003032:	623b      	str	r3, [r7, #32]
          break;
 8003034:	e000      	b.n	8003038 <HAL_GPIO_Init+0x130>
          break;
 8003036:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003038:	69bb      	ldr	r3, [r7, #24]
 800303a:	2bff      	cmp	r3, #255	; 0xff
 800303c:	d801      	bhi.n	8003042 <HAL_GPIO_Init+0x13a>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	e001      	b.n	8003046 <HAL_GPIO_Init+0x13e>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	3304      	adds	r3, #4
 8003046:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	2bff      	cmp	r3, #255	; 0xff
 800304c:	d802      	bhi.n	8003054 <HAL_GPIO_Init+0x14c>
 800304e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	e002      	b.n	800305a <HAL_GPIO_Init+0x152>
 8003054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003056:	3b08      	subs	r3, #8
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	210f      	movs	r1, #15
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	fa01 f303 	lsl.w	r3, r1, r3
 8003068:	43db      	mvns	r3, r3
 800306a:	401a      	ands	r2, r3
 800306c:	6a39      	ldr	r1, [r7, #32]
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	fa01 f303 	lsl.w	r3, r1, r3
 8003074:	431a      	orrs	r2, r3
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003082:	2b00      	cmp	r3, #0
 8003084:	f000 80b1 	beq.w	80031ea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003088:	4b4d      	ldr	r3, [pc, #308]	; (80031c0 <HAL_GPIO_Init+0x2b8>)
 800308a:	699b      	ldr	r3, [r3, #24]
 800308c:	4a4c      	ldr	r2, [pc, #304]	; (80031c0 <HAL_GPIO_Init+0x2b8>)
 800308e:	f043 0301 	orr.w	r3, r3, #1
 8003092:	6193      	str	r3, [r2, #24]
 8003094:	4b4a      	ldr	r3, [pc, #296]	; (80031c0 <HAL_GPIO_Init+0x2b8>)
 8003096:	699b      	ldr	r3, [r3, #24]
 8003098:	f003 0301 	and.w	r3, r3, #1
 800309c:	60bb      	str	r3, [r7, #8]
 800309e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80030a0:	4a48      	ldr	r2, [pc, #288]	; (80031c4 <HAL_GPIO_Init+0x2bc>)
 80030a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a4:	089b      	lsrs	r3, r3, #2
 80030a6:	3302      	adds	r3, #2
 80030a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030ac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80030ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b0:	f003 0303 	and.w	r3, r3, #3
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	220f      	movs	r2, #15
 80030b8:	fa02 f303 	lsl.w	r3, r2, r3
 80030bc:	43db      	mvns	r3, r3
 80030be:	68fa      	ldr	r2, [r7, #12]
 80030c0:	4013      	ands	r3, r2
 80030c2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	4a40      	ldr	r2, [pc, #256]	; (80031c8 <HAL_GPIO_Init+0x2c0>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d013      	beq.n	80030f4 <HAL_GPIO_Init+0x1ec>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	4a3f      	ldr	r2, [pc, #252]	; (80031cc <HAL_GPIO_Init+0x2c4>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d00d      	beq.n	80030f0 <HAL_GPIO_Init+0x1e8>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	4a3e      	ldr	r2, [pc, #248]	; (80031d0 <HAL_GPIO_Init+0x2c8>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d007      	beq.n	80030ec <HAL_GPIO_Init+0x1e4>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	4a3d      	ldr	r2, [pc, #244]	; (80031d4 <HAL_GPIO_Init+0x2cc>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d101      	bne.n	80030e8 <HAL_GPIO_Init+0x1e0>
 80030e4:	2303      	movs	r3, #3
 80030e6:	e006      	b.n	80030f6 <HAL_GPIO_Init+0x1ee>
 80030e8:	2304      	movs	r3, #4
 80030ea:	e004      	b.n	80030f6 <HAL_GPIO_Init+0x1ee>
 80030ec:	2302      	movs	r3, #2
 80030ee:	e002      	b.n	80030f6 <HAL_GPIO_Init+0x1ee>
 80030f0:	2301      	movs	r3, #1
 80030f2:	e000      	b.n	80030f6 <HAL_GPIO_Init+0x1ee>
 80030f4:	2300      	movs	r3, #0
 80030f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030f8:	f002 0203 	and.w	r2, r2, #3
 80030fc:	0092      	lsls	r2, r2, #2
 80030fe:	4093      	lsls	r3, r2
 8003100:	68fa      	ldr	r2, [r7, #12]
 8003102:	4313      	orrs	r3, r2
 8003104:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003106:	492f      	ldr	r1, [pc, #188]	; (80031c4 <HAL_GPIO_Init+0x2bc>)
 8003108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800310a:	089b      	lsrs	r3, r3, #2
 800310c:	3302      	adds	r3, #2
 800310e:	68fa      	ldr	r2, [r7, #12]
 8003110:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d006      	beq.n	800312e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003120:	4b2d      	ldr	r3, [pc, #180]	; (80031d8 <HAL_GPIO_Init+0x2d0>)
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	492c      	ldr	r1, [pc, #176]	; (80031d8 <HAL_GPIO_Init+0x2d0>)
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	4313      	orrs	r3, r2
 800312a:	600b      	str	r3, [r1, #0]
 800312c:	e006      	b.n	800313c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800312e:	4b2a      	ldr	r3, [pc, #168]	; (80031d8 <HAL_GPIO_Init+0x2d0>)
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	43db      	mvns	r3, r3
 8003136:	4928      	ldr	r1, [pc, #160]	; (80031d8 <HAL_GPIO_Init+0x2d0>)
 8003138:	4013      	ands	r3, r2
 800313a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d006      	beq.n	8003156 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003148:	4b23      	ldr	r3, [pc, #140]	; (80031d8 <HAL_GPIO_Init+0x2d0>)
 800314a:	685a      	ldr	r2, [r3, #4]
 800314c:	4922      	ldr	r1, [pc, #136]	; (80031d8 <HAL_GPIO_Init+0x2d0>)
 800314e:	69bb      	ldr	r3, [r7, #24]
 8003150:	4313      	orrs	r3, r2
 8003152:	604b      	str	r3, [r1, #4]
 8003154:	e006      	b.n	8003164 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003156:	4b20      	ldr	r3, [pc, #128]	; (80031d8 <HAL_GPIO_Init+0x2d0>)
 8003158:	685a      	ldr	r2, [r3, #4]
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	43db      	mvns	r3, r3
 800315e:	491e      	ldr	r1, [pc, #120]	; (80031d8 <HAL_GPIO_Init+0x2d0>)
 8003160:	4013      	ands	r3, r2
 8003162:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800316c:	2b00      	cmp	r3, #0
 800316e:	d006      	beq.n	800317e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003170:	4b19      	ldr	r3, [pc, #100]	; (80031d8 <HAL_GPIO_Init+0x2d0>)
 8003172:	689a      	ldr	r2, [r3, #8]
 8003174:	4918      	ldr	r1, [pc, #96]	; (80031d8 <HAL_GPIO_Init+0x2d0>)
 8003176:	69bb      	ldr	r3, [r7, #24]
 8003178:	4313      	orrs	r3, r2
 800317a:	608b      	str	r3, [r1, #8]
 800317c:	e006      	b.n	800318c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800317e:	4b16      	ldr	r3, [pc, #88]	; (80031d8 <HAL_GPIO_Init+0x2d0>)
 8003180:	689a      	ldr	r2, [r3, #8]
 8003182:	69bb      	ldr	r3, [r7, #24]
 8003184:	43db      	mvns	r3, r3
 8003186:	4914      	ldr	r1, [pc, #80]	; (80031d8 <HAL_GPIO_Init+0x2d0>)
 8003188:	4013      	ands	r3, r2
 800318a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003194:	2b00      	cmp	r3, #0
 8003196:	d021      	beq.n	80031dc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003198:	4b0f      	ldr	r3, [pc, #60]	; (80031d8 <HAL_GPIO_Init+0x2d0>)
 800319a:	68da      	ldr	r2, [r3, #12]
 800319c:	490e      	ldr	r1, [pc, #56]	; (80031d8 <HAL_GPIO_Init+0x2d0>)
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	60cb      	str	r3, [r1, #12]
 80031a4:	e021      	b.n	80031ea <HAL_GPIO_Init+0x2e2>
 80031a6:	bf00      	nop
 80031a8:	10320000 	.word	0x10320000
 80031ac:	10310000 	.word	0x10310000
 80031b0:	10220000 	.word	0x10220000
 80031b4:	10210000 	.word	0x10210000
 80031b8:	10120000 	.word	0x10120000
 80031bc:	10110000 	.word	0x10110000
 80031c0:	40021000 	.word	0x40021000
 80031c4:	40010000 	.word	0x40010000
 80031c8:	40010800 	.word	0x40010800
 80031cc:	40010c00 	.word	0x40010c00
 80031d0:	40011000 	.word	0x40011000
 80031d4:	40011400 	.word	0x40011400
 80031d8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80031dc:	4b0b      	ldr	r3, [pc, #44]	; (800320c <HAL_GPIO_Init+0x304>)
 80031de:	68da      	ldr	r2, [r3, #12]
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	43db      	mvns	r3, r3
 80031e4:	4909      	ldr	r1, [pc, #36]	; (800320c <HAL_GPIO_Init+0x304>)
 80031e6:	4013      	ands	r3, r2
 80031e8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80031ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ec:	3301      	adds	r3, #1
 80031ee:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f6:	fa22 f303 	lsr.w	r3, r2, r3
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	f47f ae8e 	bne.w	8002f1c <HAL_GPIO_Init+0x14>
  }
}
 8003200:	bf00      	nop
 8003202:	bf00      	nop
 8003204:	372c      	adds	r7, #44	; 0x2c
 8003206:	46bd      	mov	sp, r7
 8003208:	bc80      	pop	{r7}
 800320a:	4770      	bx	lr
 800320c:	40010400 	.word	0x40010400

08003210 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003210:	b480      	push	{r7}
 8003212:	b089      	sub	sp, #36	; 0x24
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800321a:	2300      	movs	r3, #0
 800321c:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 800321e:	e09a      	b.n	8003356 <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003220:	2201      	movs	r2, #1
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	fa02 f303 	lsl.w	r3, r2, r3
 8003228:	683a      	ldr	r2, [r7, #0]
 800322a:	4013      	ands	r3, r2
 800322c:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	2b00      	cmp	r3, #0
 8003232:	f000 808d 	beq.w	8003350 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8003236:	4a4e      	ldr	r2, [pc, #312]	; (8003370 <HAL_GPIO_DeInit+0x160>)
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	089b      	lsrs	r3, r3, #2
 800323c:	3302      	adds	r3, #2
 800323e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003242:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	f003 0303 	and.w	r3, r3, #3
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	220f      	movs	r2, #15
 800324e:	fa02 f303 	lsl.w	r3, r2, r3
 8003252:	697a      	ldr	r2, [r7, #20]
 8003254:	4013      	ands	r3, r2
 8003256:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	4a46      	ldr	r2, [pc, #280]	; (8003374 <HAL_GPIO_DeInit+0x164>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d013      	beq.n	8003288 <HAL_GPIO_DeInit+0x78>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4a45      	ldr	r2, [pc, #276]	; (8003378 <HAL_GPIO_DeInit+0x168>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d00d      	beq.n	8003284 <HAL_GPIO_DeInit+0x74>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	4a44      	ldr	r2, [pc, #272]	; (800337c <HAL_GPIO_DeInit+0x16c>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d007      	beq.n	8003280 <HAL_GPIO_DeInit+0x70>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	4a43      	ldr	r2, [pc, #268]	; (8003380 <HAL_GPIO_DeInit+0x170>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d101      	bne.n	800327c <HAL_GPIO_DeInit+0x6c>
 8003278:	2303      	movs	r3, #3
 800327a:	e006      	b.n	800328a <HAL_GPIO_DeInit+0x7a>
 800327c:	2304      	movs	r3, #4
 800327e:	e004      	b.n	800328a <HAL_GPIO_DeInit+0x7a>
 8003280:	2302      	movs	r3, #2
 8003282:	e002      	b.n	800328a <HAL_GPIO_DeInit+0x7a>
 8003284:	2301      	movs	r3, #1
 8003286:	e000      	b.n	800328a <HAL_GPIO_DeInit+0x7a>
 8003288:	2300      	movs	r3, #0
 800328a:	69fa      	ldr	r2, [r7, #28]
 800328c:	f002 0203 	and.w	r2, r2, #3
 8003290:	0092      	lsls	r2, r2, #2
 8003292:	4093      	lsls	r3, r2
 8003294:	697a      	ldr	r2, [r7, #20]
 8003296:	429a      	cmp	r2, r3
 8003298:	d132      	bne.n	8003300 <HAL_GPIO_DeInit+0xf0>
      {
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	f003 0303 	and.w	r3, r3, #3
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	220f      	movs	r2, #15
 80032a4:	fa02 f303 	lsl.w	r3, r2, r3
 80032a8:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 80032aa:	4a31      	ldr	r2, [pc, #196]	; (8003370 <HAL_GPIO_DeInit+0x160>)
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	089b      	lsrs	r3, r3, #2
 80032b0:	3302      	adds	r3, #2
 80032b2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	43da      	mvns	r2, r3
 80032ba:	482d      	ldr	r0, [pc, #180]	; (8003370 <HAL_GPIO_DeInit+0x160>)
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	089b      	lsrs	r3, r3, #2
 80032c0:	400a      	ands	r2, r1
 80032c2:	3302      	adds	r3, #2
 80032c4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80032c8:	4b2e      	ldr	r3, [pc, #184]	; (8003384 <HAL_GPIO_DeInit+0x174>)
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	69bb      	ldr	r3, [r7, #24]
 80032ce:	43db      	mvns	r3, r3
 80032d0:	492c      	ldr	r1, [pc, #176]	; (8003384 <HAL_GPIO_DeInit+0x174>)
 80032d2:	4013      	ands	r3, r2
 80032d4:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80032d6:	4b2b      	ldr	r3, [pc, #172]	; (8003384 <HAL_GPIO_DeInit+0x174>)
 80032d8:	685a      	ldr	r2, [r3, #4]
 80032da:	69bb      	ldr	r3, [r7, #24]
 80032dc:	43db      	mvns	r3, r3
 80032de:	4929      	ldr	r1, [pc, #164]	; (8003384 <HAL_GPIO_DeInit+0x174>)
 80032e0:	4013      	ands	r3, r2
 80032e2:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80032e4:	4b27      	ldr	r3, [pc, #156]	; (8003384 <HAL_GPIO_DeInit+0x174>)
 80032e6:	689a      	ldr	r2, [r3, #8]
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	43db      	mvns	r3, r3
 80032ec:	4925      	ldr	r1, [pc, #148]	; (8003384 <HAL_GPIO_DeInit+0x174>)
 80032ee:	4013      	ands	r3, r2
 80032f0:	608b      	str	r3, [r1, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80032f2:	4b24      	ldr	r3, [pc, #144]	; (8003384 <HAL_GPIO_DeInit+0x174>)
 80032f4:	68da      	ldr	r2, [r3, #12]
 80032f6:	69bb      	ldr	r3, [r7, #24]
 80032f8:	43db      	mvns	r3, r3
 80032fa:	4922      	ldr	r1, [pc, #136]	; (8003384 <HAL_GPIO_DeInit+0x174>)
 80032fc:	4013      	ands	r3, r2
 80032fe:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	2bff      	cmp	r3, #255	; 0xff
 8003304:	d801      	bhi.n	800330a <HAL_GPIO_DeInit+0xfa>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	e001      	b.n	800330e <HAL_GPIO_DeInit+0xfe>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	3304      	adds	r3, #4
 800330e:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	2bff      	cmp	r3, #255	; 0xff
 8003314:	d802      	bhi.n	800331c <HAL_GPIO_DeInit+0x10c>
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	e002      	b.n	8003322 <HAL_GPIO_DeInit+0x112>
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	3b08      	subs	r3, #8
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	210f      	movs	r1, #15
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	fa01 f303 	lsl.w	r3, r1, r3
 8003330:	43db      	mvns	r3, r3
 8003332:	401a      	ands	r2, r3
 8003334:	2104      	movs	r1, #4
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	fa01 f303 	lsl.w	r3, r1, r3
 800333c:	431a      	orrs	r2, r3
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	68da      	ldr	r2, [r3, #12]
 8003346:	69bb      	ldr	r3, [r7, #24]
 8003348:	43db      	mvns	r3, r3
 800334a:	401a      	ands	r2, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	60da      	str	r2, [r3, #12]
    }

    position++;
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	3301      	adds	r3, #1
 8003354:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8003356:	683a      	ldr	r2, [r7, #0]
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	fa22 f303 	lsr.w	r3, r2, r3
 800335e:	2b00      	cmp	r3, #0
 8003360:	f47f af5e 	bne.w	8003220 <HAL_GPIO_DeInit+0x10>
  }
}
 8003364:	bf00      	nop
 8003366:	bf00      	nop
 8003368:	3724      	adds	r7, #36	; 0x24
 800336a:	46bd      	mov	sp, r7
 800336c:	bc80      	pop	{r7}
 800336e:	4770      	bx	lr
 8003370:	40010000 	.word	0x40010000
 8003374:	40010800 	.word	0x40010800
 8003378:	40010c00 	.word	0x40010c00
 800337c:	40011000 	.word	0x40011000
 8003380:	40011400 	.word	0x40011400
 8003384:	40010400 	.word	0x40010400

08003388 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	460b      	mov	r3, r1
 8003392:	807b      	strh	r3, [r7, #2]
 8003394:	4613      	mov	r3, r2
 8003396:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003398:	787b      	ldrb	r3, [r7, #1]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d003      	beq.n	80033a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800339e:	887a      	ldrh	r2, [r7, #2]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80033a4:	e003      	b.n	80033ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80033a6:	887b      	ldrh	r3, [r7, #2]
 80033a8:	041a      	lsls	r2, r3, #16
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	611a      	str	r2, [r3, #16]
}
 80033ae:	bf00      	nop
 80033b0:	370c      	adds	r7, #12
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bc80      	pop	{r7}
 80033b6:	4770      	bx	lr

080033b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b086      	sub	sp, #24
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d101      	bne.n	80033ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e26c      	b.n	80038a4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0301 	and.w	r3, r3, #1
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	f000 8087 	beq.w	80034e6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80033d8:	4b92      	ldr	r3, [pc, #584]	; (8003624 <HAL_RCC_OscConfig+0x26c>)
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f003 030c 	and.w	r3, r3, #12
 80033e0:	2b04      	cmp	r3, #4
 80033e2:	d00c      	beq.n	80033fe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80033e4:	4b8f      	ldr	r3, [pc, #572]	; (8003624 <HAL_RCC_OscConfig+0x26c>)
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f003 030c 	and.w	r3, r3, #12
 80033ec:	2b08      	cmp	r3, #8
 80033ee:	d112      	bne.n	8003416 <HAL_RCC_OscConfig+0x5e>
 80033f0:	4b8c      	ldr	r3, [pc, #560]	; (8003624 <HAL_RCC_OscConfig+0x26c>)
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033fc:	d10b      	bne.n	8003416 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033fe:	4b89      	ldr	r3, [pc, #548]	; (8003624 <HAL_RCC_OscConfig+0x26c>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d06c      	beq.n	80034e4 <HAL_RCC_OscConfig+0x12c>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d168      	bne.n	80034e4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e246      	b.n	80038a4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800341e:	d106      	bne.n	800342e <HAL_RCC_OscConfig+0x76>
 8003420:	4b80      	ldr	r3, [pc, #512]	; (8003624 <HAL_RCC_OscConfig+0x26c>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a7f      	ldr	r2, [pc, #508]	; (8003624 <HAL_RCC_OscConfig+0x26c>)
 8003426:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800342a:	6013      	str	r3, [r2, #0]
 800342c:	e02e      	b.n	800348c <HAL_RCC_OscConfig+0xd4>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d10c      	bne.n	8003450 <HAL_RCC_OscConfig+0x98>
 8003436:	4b7b      	ldr	r3, [pc, #492]	; (8003624 <HAL_RCC_OscConfig+0x26c>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a7a      	ldr	r2, [pc, #488]	; (8003624 <HAL_RCC_OscConfig+0x26c>)
 800343c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003440:	6013      	str	r3, [r2, #0]
 8003442:	4b78      	ldr	r3, [pc, #480]	; (8003624 <HAL_RCC_OscConfig+0x26c>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a77      	ldr	r2, [pc, #476]	; (8003624 <HAL_RCC_OscConfig+0x26c>)
 8003448:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800344c:	6013      	str	r3, [r2, #0]
 800344e:	e01d      	b.n	800348c <HAL_RCC_OscConfig+0xd4>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003458:	d10c      	bne.n	8003474 <HAL_RCC_OscConfig+0xbc>
 800345a:	4b72      	ldr	r3, [pc, #456]	; (8003624 <HAL_RCC_OscConfig+0x26c>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a71      	ldr	r2, [pc, #452]	; (8003624 <HAL_RCC_OscConfig+0x26c>)
 8003460:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003464:	6013      	str	r3, [r2, #0]
 8003466:	4b6f      	ldr	r3, [pc, #444]	; (8003624 <HAL_RCC_OscConfig+0x26c>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a6e      	ldr	r2, [pc, #440]	; (8003624 <HAL_RCC_OscConfig+0x26c>)
 800346c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003470:	6013      	str	r3, [r2, #0]
 8003472:	e00b      	b.n	800348c <HAL_RCC_OscConfig+0xd4>
 8003474:	4b6b      	ldr	r3, [pc, #428]	; (8003624 <HAL_RCC_OscConfig+0x26c>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a6a      	ldr	r2, [pc, #424]	; (8003624 <HAL_RCC_OscConfig+0x26c>)
 800347a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800347e:	6013      	str	r3, [r2, #0]
 8003480:	4b68      	ldr	r3, [pc, #416]	; (8003624 <HAL_RCC_OscConfig+0x26c>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a67      	ldr	r2, [pc, #412]	; (8003624 <HAL_RCC_OscConfig+0x26c>)
 8003486:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800348a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d013      	beq.n	80034bc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003494:	f7fe fe58 	bl	8002148 <HAL_GetTick>
 8003498:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800349a:	e008      	b.n	80034ae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800349c:	f7fe fe54 	bl	8002148 <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	2b64      	cmp	r3, #100	; 0x64
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e1fa      	b.n	80038a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ae:	4b5d      	ldr	r3, [pc, #372]	; (8003624 <HAL_RCC_OscConfig+0x26c>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d0f0      	beq.n	800349c <HAL_RCC_OscConfig+0xe4>
 80034ba:	e014      	b.n	80034e6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034bc:	f7fe fe44 	bl	8002148 <HAL_GetTick>
 80034c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034c2:	e008      	b.n	80034d6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034c4:	f7fe fe40 	bl	8002148 <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	2b64      	cmp	r3, #100	; 0x64
 80034d0:	d901      	bls.n	80034d6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e1e6      	b.n	80038a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034d6:	4b53      	ldr	r3, [pc, #332]	; (8003624 <HAL_RCC_OscConfig+0x26c>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d1f0      	bne.n	80034c4 <HAL_RCC_OscConfig+0x10c>
 80034e2:	e000      	b.n	80034e6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0302 	and.w	r3, r3, #2
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d063      	beq.n	80035ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80034f2:	4b4c      	ldr	r3, [pc, #304]	; (8003624 <HAL_RCC_OscConfig+0x26c>)
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f003 030c 	and.w	r3, r3, #12
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d00b      	beq.n	8003516 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80034fe:	4b49      	ldr	r3, [pc, #292]	; (8003624 <HAL_RCC_OscConfig+0x26c>)
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	f003 030c 	and.w	r3, r3, #12
 8003506:	2b08      	cmp	r3, #8
 8003508:	d11c      	bne.n	8003544 <HAL_RCC_OscConfig+0x18c>
 800350a:	4b46      	ldr	r3, [pc, #280]	; (8003624 <HAL_RCC_OscConfig+0x26c>)
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d116      	bne.n	8003544 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003516:	4b43      	ldr	r3, [pc, #268]	; (8003624 <HAL_RCC_OscConfig+0x26c>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0302 	and.w	r3, r3, #2
 800351e:	2b00      	cmp	r3, #0
 8003520:	d005      	beq.n	800352e <HAL_RCC_OscConfig+0x176>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	691b      	ldr	r3, [r3, #16]
 8003526:	2b01      	cmp	r3, #1
 8003528:	d001      	beq.n	800352e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e1ba      	b.n	80038a4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800352e:	4b3d      	ldr	r3, [pc, #244]	; (8003624 <HAL_RCC_OscConfig+0x26c>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	695b      	ldr	r3, [r3, #20]
 800353a:	00db      	lsls	r3, r3, #3
 800353c:	4939      	ldr	r1, [pc, #228]	; (8003624 <HAL_RCC_OscConfig+0x26c>)
 800353e:	4313      	orrs	r3, r2
 8003540:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003542:	e03a      	b.n	80035ba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	691b      	ldr	r3, [r3, #16]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d020      	beq.n	800358e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800354c:	4b36      	ldr	r3, [pc, #216]	; (8003628 <HAL_RCC_OscConfig+0x270>)
 800354e:	2201      	movs	r2, #1
 8003550:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003552:	f7fe fdf9 	bl	8002148 <HAL_GetTick>
 8003556:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003558:	e008      	b.n	800356c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800355a:	f7fe fdf5 	bl	8002148 <HAL_GetTick>
 800355e:	4602      	mov	r2, r0
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	2b02      	cmp	r3, #2
 8003566:	d901      	bls.n	800356c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003568:	2303      	movs	r3, #3
 800356a:	e19b      	b.n	80038a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800356c:	4b2d      	ldr	r3, [pc, #180]	; (8003624 <HAL_RCC_OscConfig+0x26c>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0302 	and.w	r3, r3, #2
 8003574:	2b00      	cmp	r3, #0
 8003576:	d0f0      	beq.n	800355a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003578:	4b2a      	ldr	r3, [pc, #168]	; (8003624 <HAL_RCC_OscConfig+0x26c>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	695b      	ldr	r3, [r3, #20]
 8003584:	00db      	lsls	r3, r3, #3
 8003586:	4927      	ldr	r1, [pc, #156]	; (8003624 <HAL_RCC_OscConfig+0x26c>)
 8003588:	4313      	orrs	r3, r2
 800358a:	600b      	str	r3, [r1, #0]
 800358c:	e015      	b.n	80035ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800358e:	4b26      	ldr	r3, [pc, #152]	; (8003628 <HAL_RCC_OscConfig+0x270>)
 8003590:	2200      	movs	r2, #0
 8003592:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003594:	f7fe fdd8 	bl	8002148 <HAL_GetTick>
 8003598:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800359a:	e008      	b.n	80035ae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800359c:	f7fe fdd4 	bl	8002148 <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d901      	bls.n	80035ae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	e17a      	b.n	80038a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035ae:	4b1d      	ldr	r3, [pc, #116]	; (8003624 <HAL_RCC_OscConfig+0x26c>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0302 	and.w	r3, r3, #2
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d1f0      	bne.n	800359c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0308 	and.w	r3, r3, #8
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d03a      	beq.n	800363c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	699b      	ldr	r3, [r3, #24]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d019      	beq.n	8003602 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035ce:	4b17      	ldr	r3, [pc, #92]	; (800362c <HAL_RCC_OscConfig+0x274>)
 80035d0:	2201      	movs	r2, #1
 80035d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035d4:	f7fe fdb8 	bl	8002148 <HAL_GetTick>
 80035d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035da:	e008      	b.n	80035ee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035dc:	f7fe fdb4 	bl	8002148 <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	2b02      	cmp	r3, #2
 80035e8:	d901      	bls.n	80035ee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e15a      	b.n	80038a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035ee:	4b0d      	ldr	r3, [pc, #52]	; (8003624 <HAL_RCC_OscConfig+0x26c>)
 80035f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f2:	f003 0302 	and.w	r3, r3, #2
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d0f0      	beq.n	80035dc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80035fa:	2001      	movs	r0, #1
 80035fc:	f000 fad8 	bl	8003bb0 <RCC_Delay>
 8003600:	e01c      	b.n	800363c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003602:	4b0a      	ldr	r3, [pc, #40]	; (800362c <HAL_RCC_OscConfig+0x274>)
 8003604:	2200      	movs	r2, #0
 8003606:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003608:	f7fe fd9e 	bl	8002148 <HAL_GetTick>
 800360c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800360e:	e00f      	b.n	8003630 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003610:	f7fe fd9a 	bl	8002148 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	2b02      	cmp	r3, #2
 800361c:	d908      	bls.n	8003630 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e140      	b.n	80038a4 <HAL_RCC_OscConfig+0x4ec>
 8003622:	bf00      	nop
 8003624:	40021000 	.word	0x40021000
 8003628:	42420000 	.word	0x42420000
 800362c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003630:	4b9e      	ldr	r3, [pc, #632]	; (80038ac <HAL_RCC_OscConfig+0x4f4>)
 8003632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003634:	f003 0302 	and.w	r3, r3, #2
 8003638:	2b00      	cmp	r3, #0
 800363a:	d1e9      	bne.n	8003610 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0304 	and.w	r3, r3, #4
 8003644:	2b00      	cmp	r3, #0
 8003646:	f000 80a6 	beq.w	8003796 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800364a:	2300      	movs	r3, #0
 800364c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800364e:	4b97      	ldr	r3, [pc, #604]	; (80038ac <HAL_RCC_OscConfig+0x4f4>)
 8003650:	69db      	ldr	r3, [r3, #28]
 8003652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d10d      	bne.n	8003676 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800365a:	4b94      	ldr	r3, [pc, #592]	; (80038ac <HAL_RCC_OscConfig+0x4f4>)
 800365c:	69db      	ldr	r3, [r3, #28]
 800365e:	4a93      	ldr	r2, [pc, #588]	; (80038ac <HAL_RCC_OscConfig+0x4f4>)
 8003660:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003664:	61d3      	str	r3, [r2, #28]
 8003666:	4b91      	ldr	r3, [pc, #580]	; (80038ac <HAL_RCC_OscConfig+0x4f4>)
 8003668:	69db      	ldr	r3, [r3, #28]
 800366a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800366e:	60bb      	str	r3, [r7, #8]
 8003670:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003672:	2301      	movs	r3, #1
 8003674:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003676:	4b8e      	ldr	r3, [pc, #568]	; (80038b0 <HAL_RCC_OscConfig+0x4f8>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800367e:	2b00      	cmp	r3, #0
 8003680:	d118      	bne.n	80036b4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003682:	4b8b      	ldr	r3, [pc, #556]	; (80038b0 <HAL_RCC_OscConfig+0x4f8>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a8a      	ldr	r2, [pc, #552]	; (80038b0 <HAL_RCC_OscConfig+0x4f8>)
 8003688:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800368c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800368e:	f7fe fd5b 	bl	8002148 <HAL_GetTick>
 8003692:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003694:	e008      	b.n	80036a8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003696:	f7fe fd57 	bl	8002148 <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	2b64      	cmp	r3, #100	; 0x64
 80036a2:	d901      	bls.n	80036a8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80036a4:	2303      	movs	r3, #3
 80036a6:	e0fd      	b.n	80038a4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036a8:	4b81      	ldr	r3, [pc, #516]	; (80038b0 <HAL_RCC_OscConfig+0x4f8>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d0f0      	beq.n	8003696 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d106      	bne.n	80036ca <HAL_RCC_OscConfig+0x312>
 80036bc:	4b7b      	ldr	r3, [pc, #492]	; (80038ac <HAL_RCC_OscConfig+0x4f4>)
 80036be:	6a1b      	ldr	r3, [r3, #32]
 80036c0:	4a7a      	ldr	r2, [pc, #488]	; (80038ac <HAL_RCC_OscConfig+0x4f4>)
 80036c2:	f043 0301 	orr.w	r3, r3, #1
 80036c6:	6213      	str	r3, [r2, #32]
 80036c8:	e02d      	b.n	8003726 <HAL_RCC_OscConfig+0x36e>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d10c      	bne.n	80036ec <HAL_RCC_OscConfig+0x334>
 80036d2:	4b76      	ldr	r3, [pc, #472]	; (80038ac <HAL_RCC_OscConfig+0x4f4>)
 80036d4:	6a1b      	ldr	r3, [r3, #32]
 80036d6:	4a75      	ldr	r2, [pc, #468]	; (80038ac <HAL_RCC_OscConfig+0x4f4>)
 80036d8:	f023 0301 	bic.w	r3, r3, #1
 80036dc:	6213      	str	r3, [r2, #32]
 80036de:	4b73      	ldr	r3, [pc, #460]	; (80038ac <HAL_RCC_OscConfig+0x4f4>)
 80036e0:	6a1b      	ldr	r3, [r3, #32]
 80036e2:	4a72      	ldr	r2, [pc, #456]	; (80038ac <HAL_RCC_OscConfig+0x4f4>)
 80036e4:	f023 0304 	bic.w	r3, r3, #4
 80036e8:	6213      	str	r3, [r2, #32]
 80036ea:	e01c      	b.n	8003726 <HAL_RCC_OscConfig+0x36e>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	2b05      	cmp	r3, #5
 80036f2:	d10c      	bne.n	800370e <HAL_RCC_OscConfig+0x356>
 80036f4:	4b6d      	ldr	r3, [pc, #436]	; (80038ac <HAL_RCC_OscConfig+0x4f4>)
 80036f6:	6a1b      	ldr	r3, [r3, #32]
 80036f8:	4a6c      	ldr	r2, [pc, #432]	; (80038ac <HAL_RCC_OscConfig+0x4f4>)
 80036fa:	f043 0304 	orr.w	r3, r3, #4
 80036fe:	6213      	str	r3, [r2, #32]
 8003700:	4b6a      	ldr	r3, [pc, #424]	; (80038ac <HAL_RCC_OscConfig+0x4f4>)
 8003702:	6a1b      	ldr	r3, [r3, #32]
 8003704:	4a69      	ldr	r2, [pc, #420]	; (80038ac <HAL_RCC_OscConfig+0x4f4>)
 8003706:	f043 0301 	orr.w	r3, r3, #1
 800370a:	6213      	str	r3, [r2, #32]
 800370c:	e00b      	b.n	8003726 <HAL_RCC_OscConfig+0x36e>
 800370e:	4b67      	ldr	r3, [pc, #412]	; (80038ac <HAL_RCC_OscConfig+0x4f4>)
 8003710:	6a1b      	ldr	r3, [r3, #32]
 8003712:	4a66      	ldr	r2, [pc, #408]	; (80038ac <HAL_RCC_OscConfig+0x4f4>)
 8003714:	f023 0301 	bic.w	r3, r3, #1
 8003718:	6213      	str	r3, [r2, #32]
 800371a:	4b64      	ldr	r3, [pc, #400]	; (80038ac <HAL_RCC_OscConfig+0x4f4>)
 800371c:	6a1b      	ldr	r3, [r3, #32]
 800371e:	4a63      	ldr	r2, [pc, #396]	; (80038ac <HAL_RCC_OscConfig+0x4f4>)
 8003720:	f023 0304 	bic.w	r3, r3, #4
 8003724:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d015      	beq.n	800375a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800372e:	f7fe fd0b 	bl	8002148 <HAL_GetTick>
 8003732:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003734:	e00a      	b.n	800374c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003736:	f7fe fd07 	bl	8002148 <HAL_GetTick>
 800373a:	4602      	mov	r2, r0
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	f241 3288 	movw	r2, #5000	; 0x1388
 8003744:	4293      	cmp	r3, r2
 8003746:	d901      	bls.n	800374c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e0ab      	b.n	80038a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800374c:	4b57      	ldr	r3, [pc, #348]	; (80038ac <HAL_RCC_OscConfig+0x4f4>)
 800374e:	6a1b      	ldr	r3, [r3, #32]
 8003750:	f003 0302 	and.w	r3, r3, #2
 8003754:	2b00      	cmp	r3, #0
 8003756:	d0ee      	beq.n	8003736 <HAL_RCC_OscConfig+0x37e>
 8003758:	e014      	b.n	8003784 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800375a:	f7fe fcf5 	bl	8002148 <HAL_GetTick>
 800375e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003760:	e00a      	b.n	8003778 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003762:	f7fe fcf1 	bl	8002148 <HAL_GetTick>
 8003766:	4602      	mov	r2, r0
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003770:	4293      	cmp	r3, r2
 8003772:	d901      	bls.n	8003778 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e095      	b.n	80038a4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003778:	4b4c      	ldr	r3, [pc, #304]	; (80038ac <HAL_RCC_OscConfig+0x4f4>)
 800377a:	6a1b      	ldr	r3, [r3, #32]
 800377c:	f003 0302 	and.w	r3, r3, #2
 8003780:	2b00      	cmp	r3, #0
 8003782:	d1ee      	bne.n	8003762 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003784:	7dfb      	ldrb	r3, [r7, #23]
 8003786:	2b01      	cmp	r3, #1
 8003788:	d105      	bne.n	8003796 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800378a:	4b48      	ldr	r3, [pc, #288]	; (80038ac <HAL_RCC_OscConfig+0x4f4>)
 800378c:	69db      	ldr	r3, [r3, #28]
 800378e:	4a47      	ldr	r2, [pc, #284]	; (80038ac <HAL_RCC_OscConfig+0x4f4>)
 8003790:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003794:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	69db      	ldr	r3, [r3, #28]
 800379a:	2b00      	cmp	r3, #0
 800379c:	f000 8081 	beq.w	80038a2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037a0:	4b42      	ldr	r3, [pc, #264]	; (80038ac <HAL_RCC_OscConfig+0x4f4>)
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f003 030c 	and.w	r3, r3, #12
 80037a8:	2b08      	cmp	r3, #8
 80037aa:	d061      	beq.n	8003870 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	69db      	ldr	r3, [r3, #28]
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d146      	bne.n	8003842 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037b4:	4b3f      	ldr	r3, [pc, #252]	; (80038b4 <HAL_RCC_OscConfig+0x4fc>)
 80037b6:	2200      	movs	r2, #0
 80037b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ba:	f7fe fcc5 	bl	8002148 <HAL_GetTick>
 80037be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037c0:	e008      	b.n	80037d4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037c2:	f7fe fcc1 	bl	8002148 <HAL_GetTick>
 80037c6:	4602      	mov	r2, r0
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d901      	bls.n	80037d4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80037d0:	2303      	movs	r3, #3
 80037d2:	e067      	b.n	80038a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037d4:	4b35      	ldr	r3, [pc, #212]	; (80038ac <HAL_RCC_OscConfig+0x4f4>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d1f0      	bne.n	80037c2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a1b      	ldr	r3, [r3, #32]
 80037e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037e8:	d108      	bne.n	80037fc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80037ea:	4b30      	ldr	r3, [pc, #192]	; (80038ac <HAL_RCC_OscConfig+0x4f4>)
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	492d      	ldr	r1, [pc, #180]	; (80038ac <HAL_RCC_OscConfig+0x4f4>)
 80037f8:	4313      	orrs	r3, r2
 80037fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037fc:	4b2b      	ldr	r3, [pc, #172]	; (80038ac <HAL_RCC_OscConfig+0x4f4>)
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6a19      	ldr	r1, [r3, #32]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380c:	430b      	orrs	r3, r1
 800380e:	4927      	ldr	r1, [pc, #156]	; (80038ac <HAL_RCC_OscConfig+0x4f4>)
 8003810:	4313      	orrs	r3, r2
 8003812:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003814:	4b27      	ldr	r3, [pc, #156]	; (80038b4 <HAL_RCC_OscConfig+0x4fc>)
 8003816:	2201      	movs	r2, #1
 8003818:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800381a:	f7fe fc95 	bl	8002148 <HAL_GetTick>
 800381e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003820:	e008      	b.n	8003834 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003822:	f7fe fc91 	bl	8002148 <HAL_GetTick>
 8003826:	4602      	mov	r2, r0
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	2b02      	cmp	r3, #2
 800382e:	d901      	bls.n	8003834 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003830:	2303      	movs	r3, #3
 8003832:	e037      	b.n	80038a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003834:	4b1d      	ldr	r3, [pc, #116]	; (80038ac <HAL_RCC_OscConfig+0x4f4>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d0f0      	beq.n	8003822 <HAL_RCC_OscConfig+0x46a>
 8003840:	e02f      	b.n	80038a2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003842:	4b1c      	ldr	r3, [pc, #112]	; (80038b4 <HAL_RCC_OscConfig+0x4fc>)
 8003844:	2200      	movs	r2, #0
 8003846:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003848:	f7fe fc7e 	bl	8002148 <HAL_GetTick>
 800384c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800384e:	e008      	b.n	8003862 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003850:	f7fe fc7a 	bl	8002148 <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	2b02      	cmp	r3, #2
 800385c:	d901      	bls.n	8003862 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e020      	b.n	80038a4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003862:	4b12      	ldr	r3, [pc, #72]	; (80038ac <HAL_RCC_OscConfig+0x4f4>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d1f0      	bne.n	8003850 <HAL_RCC_OscConfig+0x498>
 800386e:	e018      	b.n	80038a2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	69db      	ldr	r3, [r3, #28]
 8003874:	2b01      	cmp	r3, #1
 8003876:	d101      	bne.n	800387c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e013      	b.n	80038a4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800387c:	4b0b      	ldr	r3, [pc, #44]	; (80038ac <HAL_RCC_OscConfig+0x4f4>)
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6a1b      	ldr	r3, [r3, #32]
 800388c:	429a      	cmp	r2, r3
 800388e:	d106      	bne.n	800389e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800389a:	429a      	cmp	r2, r3
 800389c:	d001      	beq.n	80038a2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e000      	b.n	80038a4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80038a2:	2300      	movs	r3, #0
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3718      	adds	r7, #24
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	40021000 	.word	0x40021000
 80038b0:	40007000 	.word	0x40007000
 80038b4:	42420060 	.word	0x42420060

080038b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d101      	bne.n	80038cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e0d0      	b.n	8003a6e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038cc:	4b6a      	ldr	r3, [pc, #424]	; (8003a78 <HAL_RCC_ClockConfig+0x1c0>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0307 	and.w	r3, r3, #7
 80038d4:	683a      	ldr	r2, [r7, #0]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d910      	bls.n	80038fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038da:	4b67      	ldr	r3, [pc, #412]	; (8003a78 <HAL_RCC_ClockConfig+0x1c0>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f023 0207 	bic.w	r2, r3, #7
 80038e2:	4965      	ldr	r1, [pc, #404]	; (8003a78 <HAL_RCC_ClockConfig+0x1c0>)
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ea:	4b63      	ldr	r3, [pc, #396]	; (8003a78 <HAL_RCC_ClockConfig+0x1c0>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0307 	and.w	r3, r3, #7
 80038f2:	683a      	ldr	r2, [r7, #0]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d001      	beq.n	80038fc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e0b8      	b.n	8003a6e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0302 	and.w	r3, r3, #2
 8003904:	2b00      	cmp	r3, #0
 8003906:	d020      	beq.n	800394a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0304 	and.w	r3, r3, #4
 8003910:	2b00      	cmp	r3, #0
 8003912:	d005      	beq.n	8003920 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003914:	4b59      	ldr	r3, [pc, #356]	; (8003a7c <HAL_RCC_ClockConfig+0x1c4>)
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	4a58      	ldr	r2, [pc, #352]	; (8003a7c <HAL_RCC_ClockConfig+0x1c4>)
 800391a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800391e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0308 	and.w	r3, r3, #8
 8003928:	2b00      	cmp	r3, #0
 800392a:	d005      	beq.n	8003938 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800392c:	4b53      	ldr	r3, [pc, #332]	; (8003a7c <HAL_RCC_ClockConfig+0x1c4>)
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	4a52      	ldr	r2, [pc, #328]	; (8003a7c <HAL_RCC_ClockConfig+0x1c4>)
 8003932:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003936:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003938:	4b50      	ldr	r3, [pc, #320]	; (8003a7c <HAL_RCC_ClockConfig+0x1c4>)
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	494d      	ldr	r1, [pc, #308]	; (8003a7c <HAL_RCC_ClockConfig+0x1c4>)
 8003946:	4313      	orrs	r3, r2
 8003948:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0301 	and.w	r3, r3, #1
 8003952:	2b00      	cmp	r3, #0
 8003954:	d040      	beq.n	80039d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	2b01      	cmp	r3, #1
 800395c:	d107      	bne.n	800396e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800395e:	4b47      	ldr	r3, [pc, #284]	; (8003a7c <HAL_RCC_ClockConfig+0x1c4>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d115      	bne.n	8003996 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e07f      	b.n	8003a6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	2b02      	cmp	r3, #2
 8003974:	d107      	bne.n	8003986 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003976:	4b41      	ldr	r3, [pc, #260]	; (8003a7c <HAL_RCC_ClockConfig+0x1c4>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d109      	bne.n	8003996 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e073      	b.n	8003a6e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003986:	4b3d      	ldr	r3, [pc, #244]	; (8003a7c <HAL_RCC_ClockConfig+0x1c4>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f003 0302 	and.w	r3, r3, #2
 800398e:	2b00      	cmp	r3, #0
 8003990:	d101      	bne.n	8003996 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e06b      	b.n	8003a6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003996:	4b39      	ldr	r3, [pc, #228]	; (8003a7c <HAL_RCC_ClockConfig+0x1c4>)
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f023 0203 	bic.w	r2, r3, #3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	4936      	ldr	r1, [pc, #216]	; (8003a7c <HAL_RCC_ClockConfig+0x1c4>)
 80039a4:	4313      	orrs	r3, r2
 80039a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039a8:	f7fe fbce 	bl	8002148 <HAL_GetTick>
 80039ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ae:	e00a      	b.n	80039c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039b0:	f7fe fbca 	bl	8002148 <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80039be:	4293      	cmp	r3, r2
 80039c0:	d901      	bls.n	80039c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e053      	b.n	8003a6e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039c6:	4b2d      	ldr	r3, [pc, #180]	; (8003a7c <HAL_RCC_ClockConfig+0x1c4>)
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f003 020c 	and.w	r2, r3, #12
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d1eb      	bne.n	80039b0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80039d8:	4b27      	ldr	r3, [pc, #156]	; (8003a78 <HAL_RCC_ClockConfig+0x1c0>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0307 	and.w	r3, r3, #7
 80039e0:	683a      	ldr	r2, [r7, #0]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d210      	bcs.n	8003a08 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039e6:	4b24      	ldr	r3, [pc, #144]	; (8003a78 <HAL_RCC_ClockConfig+0x1c0>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f023 0207 	bic.w	r2, r3, #7
 80039ee:	4922      	ldr	r1, [pc, #136]	; (8003a78 <HAL_RCC_ClockConfig+0x1c0>)
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039f6:	4b20      	ldr	r3, [pc, #128]	; (8003a78 <HAL_RCC_ClockConfig+0x1c0>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0307 	and.w	r3, r3, #7
 80039fe:	683a      	ldr	r2, [r7, #0]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d001      	beq.n	8003a08 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e032      	b.n	8003a6e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0304 	and.w	r3, r3, #4
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d008      	beq.n	8003a26 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a14:	4b19      	ldr	r3, [pc, #100]	; (8003a7c <HAL_RCC_ClockConfig+0x1c4>)
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	4916      	ldr	r1, [pc, #88]	; (8003a7c <HAL_RCC_ClockConfig+0x1c4>)
 8003a22:	4313      	orrs	r3, r2
 8003a24:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0308 	and.w	r3, r3, #8
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d009      	beq.n	8003a46 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003a32:	4b12      	ldr	r3, [pc, #72]	; (8003a7c <HAL_RCC_ClockConfig+0x1c4>)
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	691b      	ldr	r3, [r3, #16]
 8003a3e:	00db      	lsls	r3, r3, #3
 8003a40:	490e      	ldr	r1, [pc, #56]	; (8003a7c <HAL_RCC_ClockConfig+0x1c4>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a46:	f000 f821 	bl	8003a8c <HAL_RCC_GetSysClockFreq>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	4b0b      	ldr	r3, [pc, #44]	; (8003a7c <HAL_RCC_ClockConfig+0x1c4>)
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	091b      	lsrs	r3, r3, #4
 8003a52:	f003 030f 	and.w	r3, r3, #15
 8003a56:	490a      	ldr	r1, [pc, #40]	; (8003a80 <HAL_RCC_ClockConfig+0x1c8>)
 8003a58:	5ccb      	ldrb	r3, [r1, r3]
 8003a5a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a5e:	4a09      	ldr	r2, [pc, #36]	; (8003a84 <HAL_RCC_ClockConfig+0x1cc>)
 8003a60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003a62:	4b09      	ldr	r3, [pc, #36]	; (8003a88 <HAL_RCC_ClockConfig+0x1d0>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4618      	mov	r0, r3
 8003a68:	f7fe fb2c 	bl	80020c4 <HAL_InitTick>

  return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3710      	adds	r7, #16
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	40022000 	.word	0x40022000
 8003a7c:	40021000 	.word	0x40021000
 8003a80:	08006ba8 	.word	0x08006ba8
 8003a84:	20000068 	.word	0x20000068
 8003a88:	2000006c 	.word	0x2000006c

08003a8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a8c:	b490      	push	{r4, r7}
 8003a8e:	b08a      	sub	sp, #40	; 0x28
 8003a90:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003a92:	4b2a      	ldr	r3, [pc, #168]	; (8003b3c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003a94:	1d3c      	adds	r4, r7, #4
 8003a96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a98:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003a9c:	f240 2301 	movw	r3, #513	; 0x201
 8003aa0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	61fb      	str	r3, [r7, #28]
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	61bb      	str	r3, [r7, #24]
 8003aaa:	2300      	movs	r3, #0
 8003aac:	627b      	str	r3, [r7, #36]	; 0x24
 8003aae:	2300      	movs	r3, #0
 8003ab0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003ab6:	4b22      	ldr	r3, [pc, #136]	; (8003b40 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	f003 030c 	and.w	r3, r3, #12
 8003ac2:	2b04      	cmp	r3, #4
 8003ac4:	d002      	beq.n	8003acc <HAL_RCC_GetSysClockFreq+0x40>
 8003ac6:	2b08      	cmp	r3, #8
 8003ac8:	d003      	beq.n	8003ad2 <HAL_RCC_GetSysClockFreq+0x46>
 8003aca:	e02d      	b.n	8003b28 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003acc:	4b1d      	ldr	r3, [pc, #116]	; (8003b44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ace:	623b      	str	r3, [r7, #32]
      break;
 8003ad0:	e02d      	b.n	8003b2e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	0c9b      	lsrs	r3, r3, #18
 8003ad6:	f003 030f 	and.w	r3, r3, #15
 8003ada:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003ade:	4413      	add	r3, r2
 8003ae0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003ae4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d013      	beq.n	8003b18 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003af0:	4b13      	ldr	r3, [pc, #76]	; (8003b40 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	0c5b      	lsrs	r3, r3, #17
 8003af6:	f003 0301 	and.w	r3, r3, #1
 8003afa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003afe:	4413      	add	r3, r2
 8003b00:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003b04:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	4a0e      	ldr	r2, [pc, #56]	; (8003b44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b0a:	fb02 f203 	mul.w	r2, r2, r3
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b14:	627b      	str	r3, [r7, #36]	; 0x24
 8003b16:	e004      	b.n	8003b22 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	4a0b      	ldr	r2, [pc, #44]	; (8003b48 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003b1c:	fb02 f303 	mul.w	r3, r2, r3
 8003b20:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b24:	623b      	str	r3, [r7, #32]
      break;
 8003b26:	e002      	b.n	8003b2e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003b28:	4b06      	ldr	r3, [pc, #24]	; (8003b44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003b2a:	623b      	str	r3, [r7, #32]
      break;
 8003b2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b2e:	6a3b      	ldr	r3, [r7, #32]
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3728      	adds	r7, #40	; 0x28
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bc90      	pop	{r4, r7}
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop
 8003b3c:	08006890 	.word	0x08006890
 8003b40:	40021000 	.word	0x40021000
 8003b44:	007a1200 	.word	0x007a1200
 8003b48:	003d0900 	.word	0x003d0900

08003b4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b50:	4b02      	ldr	r3, [pc, #8]	; (8003b5c <HAL_RCC_GetHCLKFreq+0x10>)
 8003b52:	681b      	ldr	r3, [r3, #0]
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bc80      	pop	{r7}
 8003b5a:	4770      	bx	lr
 8003b5c:	20000068 	.word	0x20000068

08003b60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b64:	f7ff fff2 	bl	8003b4c <HAL_RCC_GetHCLKFreq>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	4b05      	ldr	r3, [pc, #20]	; (8003b80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	0a1b      	lsrs	r3, r3, #8
 8003b70:	f003 0307 	and.w	r3, r3, #7
 8003b74:	4903      	ldr	r1, [pc, #12]	; (8003b84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b76:	5ccb      	ldrb	r3, [r1, r3]
 8003b78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	40021000 	.word	0x40021000
 8003b84:	08006bb8 	.word	0x08006bb8

08003b88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b8c:	f7ff ffde 	bl	8003b4c <HAL_RCC_GetHCLKFreq>
 8003b90:	4602      	mov	r2, r0
 8003b92:	4b05      	ldr	r3, [pc, #20]	; (8003ba8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	0adb      	lsrs	r3, r3, #11
 8003b98:	f003 0307 	and.w	r3, r3, #7
 8003b9c:	4903      	ldr	r1, [pc, #12]	; (8003bac <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b9e:	5ccb      	ldrb	r3, [r1, r3]
 8003ba0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	40021000 	.word	0x40021000
 8003bac:	08006bb8 	.word	0x08006bb8

08003bb0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b085      	sub	sp, #20
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003bb8:	4b0a      	ldr	r3, [pc, #40]	; (8003be4 <RCC_Delay+0x34>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a0a      	ldr	r2, [pc, #40]	; (8003be8 <RCC_Delay+0x38>)
 8003bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8003bc2:	0a5b      	lsrs	r3, r3, #9
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	fb02 f303 	mul.w	r3, r2, r3
 8003bca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003bcc:	bf00      	nop
  }
  while (Delay --);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	1e5a      	subs	r2, r3, #1
 8003bd2:	60fa      	str	r2, [r7, #12]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d1f9      	bne.n	8003bcc <RCC_Delay+0x1c>
}
 8003bd8:	bf00      	nop
 8003bda:	bf00      	nop
 8003bdc:	3714      	adds	r7, #20
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bc80      	pop	{r7}
 8003be2:	4770      	bx	lr
 8003be4:	20000068 	.word	0x20000068
 8003be8:	10624dd3 	.word	0x10624dd3

08003bec <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b086      	sub	sp, #24
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	613b      	str	r3, [r7, #16]
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0301 	and.w	r3, r3, #1
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d07d      	beq.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c0c:	4b4f      	ldr	r3, [pc, #316]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c0e:	69db      	ldr	r3, [r3, #28]
 8003c10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d10d      	bne.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c18:	4b4c      	ldr	r3, [pc, #304]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c1a:	69db      	ldr	r3, [r3, #28]
 8003c1c:	4a4b      	ldr	r2, [pc, #300]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c22:	61d3      	str	r3, [r2, #28]
 8003c24:	4b49      	ldr	r3, [pc, #292]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c26:	69db      	ldr	r3, [r3, #28]
 8003c28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c2c:	60bb      	str	r3, [r7, #8]
 8003c2e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c30:	2301      	movs	r3, #1
 8003c32:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c34:	4b46      	ldr	r3, [pc, #280]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d118      	bne.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c40:	4b43      	ldr	r3, [pc, #268]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a42      	ldr	r2, [pc, #264]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c4a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c4c:	f7fe fa7c 	bl	8002148 <HAL_GetTick>
 8003c50:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c52:	e008      	b.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c54:	f7fe fa78 	bl	8002148 <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	2b64      	cmp	r3, #100	; 0x64
 8003c60:	d901      	bls.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e06d      	b.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c66:	4b3a      	ldr	r3, [pc, #232]	; (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d0f0      	beq.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c72:	4b36      	ldr	r3, [pc, #216]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c74:	6a1b      	ldr	r3, [r3, #32]
 8003c76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c7a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d02e      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c8a:	68fa      	ldr	r2, [r7, #12]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d027      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c90:	4b2e      	ldr	r3, [pc, #184]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c92:	6a1b      	ldr	r3, [r3, #32]
 8003c94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c98:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c9a:	4b2e      	ldr	r3, [pc, #184]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ca0:	4b2c      	ldr	r3, [pc, #176]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003ca6:	4a29      	ldr	r2, [pc, #164]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f003 0301 	and.w	r3, r3, #1
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d014      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cb6:	f7fe fa47 	bl	8002148 <HAL_GetTick>
 8003cba:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cbc:	e00a      	b.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cbe:	f7fe fa43 	bl	8002148 <HAL_GetTick>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d901      	bls.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	e036      	b.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cd4:	4b1d      	ldr	r3, [pc, #116]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cd6:	6a1b      	ldr	r3, [r3, #32]
 8003cd8:	f003 0302 	and.w	r3, r3, #2
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d0ee      	beq.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ce0:	4b1a      	ldr	r3, [pc, #104]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ce2:	6a1b      	ldr	r3, [r3, #32]
 8003ce4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	4917      	ldr	r1, [pc, #92]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003cf2:	7dfb      	ldrb	r3, [r7, #23]
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d105      	bne.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cf8:	4b14      	ldr	r3, [pc, #80]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cfa:	69db      	ldr	r3, [r3, #28]
 8003cfc:	4a13      	ldr	r2, [pc, #76]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cfe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d02:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0302 	and.w	r3, r3, #2
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d008      	beq.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d10:	4b0e      	ldr	r3, [pc, #56]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	490b      	ldr	r1, [pc, #44]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0310 	and.w	r3, r3, #16
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d008      	beq.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d2e:	4b07      	ldr	r3, [pc, #28]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	4904      	ldr	r1, [pc, #16]	; (8003d4c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003d40:	2300      	movs	r3, #0
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3718      	adds	r7, #24
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	40021000 	.word	0x40021000
 8003d50:	40007000 	.word	0x40007000
 8003d54:	42420440 	.word	0x42420440

08003d58 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003d58:	b590      	push	{r4, r7, lr}
 8003d5a:	b08d      	sub	sp, #52	; 0x34
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003d60:	4b5a      	ldr	r3, [pc, #360]	; (8003ecc <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8003d62:	f107 040c 	add.w	r4, r7, #12
 8003d66:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d68:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003d6c:	f240 2301 	movw	r3, #513	; 0x201
 8003d70:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003d72:	2300      	movs	r3, #0
 8003d74:	627b      	str	r3, [r7, #36]	; 0x24
 8003d76:	2300      	movs	r3, #0
 8003d78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	61fb      	str	r3, [r7, #28]
 8003d82:	2300      	movs	r3, #0
 8003d84:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2b10      	cmp	r3, #16
 8003d8a:	d00a      	beq.n	8003da2 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2b10      	cmp	r3, #16
 8003d90:	f200 8091 	bhi.w	8003eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d04c      	beq.n	8003e34 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d07c      	beq.n	8003e9a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003da0:	e089      	b.n	8003eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 8003da2:	4b4b      	ldr	r3, [pc, #300]	; (8003ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003da8:	4b49      	ldr	r3, [pc, #292]	; (8003ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	f000 8082 	beq.w	8003eba <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	0c9b      	lsrs	r3, r3, #18
 8003dba:	f003 030f 	and.w	r3, r3, #15
 8003dbe:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003dc2:	4413      	add	r3, r2
 8003dc4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003dc8:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d018      	beq.n	8003e06 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003dd4:	4b3e      	ldr	r3, [pc, #248]	; (8003ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	0c5b      	lsrs	r3, r3, #17
 8003dda:	f003 0301 	and.w	r3, r3, #1
 8003dde:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003de2:	4413      	add	r3, r2
 8003de4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003de8:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d00d      	beq.n	8003e10 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003df4:	4a37      	ldr	r2, [pc, #220]	; (8003ed4 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8003df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003dfc:	6a3b      	ldr	r3, [r7, #32]
 8003dfe:	fb02 f303 	mul.w	r3, r2, r3
 8003e02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e04:	e004      	b.n	8003e10 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003e06:	6a3b      	ldr	r3, [r7, #32]
 8003e08:	4a33      	ldr	r2, [pc, #204]	; (8003ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8003e0a:	fb02 f303 	mul.w	r3, r2, r3
 8003e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003e10:	4b2f      	ldr	r3, [pc, #188]	; (8003ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e1c:	d102      	bne.n	8003e24 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 8003e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e20:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003e22:	e04a      	b.n	8003eba <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 8003e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e26:	005b      	lsls	r3, r3, #1
 8003e28:	4a2c      	ldr	r2, [pc, #176]	; (8003edc <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 8003e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e2e:	085b      	lsrs	r3, r3, #1
 8003e30:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003e32:	e042      	b.n	8003eba <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8003e34:	4b26      	ldr	r3, [pc, #152]	; (8003ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003e36:	6a1b      	ldr	r3, [r3, #32]
 8003e38:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e44:	d108      	bne.n	8003e58 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	f003 0302 	and.w	r3, r3, #2
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d003      	beq.n	8003e58 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8003e50:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e54:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e56:	e01f      	b.n	8003e98 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003e58:	69fb      	ldr	r3, [r7, #28]
 8003e5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e62:	d109      	bne.n	8003e78 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8003e64:	4b1a      	ldr	r3, [pc, #104]	; (8003ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e68:	f003 0302 	and.w	r3, r3, #2
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d003      	beq.n	8003e78 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8003e70:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003e74:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e76:	e00f      	b.n	8003e98 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003e78:	69fb      	ldr	r3, [r7, #28]
 8003e7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e82:	d11c      	bne.n	8003ebe <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8003e84:	4b12      	ldr	r3, [pc, #72]	; (8003ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d016      	beq.n	8003ebe <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 8003e90:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003e94:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003e96:	e012      	b.n	8003ebe <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8003e98:	e011      	b.n	8003ebe <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003e9a:	f7ff fe75 	bl	8003b88 <HAL_RCC_GetPCLK2Freq>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	4b0b      	ldr	r3, [pc, #44]	; (8003ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	0b9b      	lsrs	r3, r3, #14
 8003ea6:	f003 0303 	and.w	r3, r3, #3
 8003eaa:	3301      	adds	r3, #1
 8003eac:	005b      	lsls	r3, r3, #1
 8003eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eb2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003eb4:	e004      	b.n	8003ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8003eb6:	bf00      	nop
 8003eb8:	e002      	b.n	8003ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8003eba:	bf00      	nop
 8003ebc:	e000      	b.n	8003ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8003ebe:	bf00      	nop
    }
  }
  return (frequency);
 8003ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3734      	adds	r7, #52	; 0x34
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd90      	pop	{r4, r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	080068a0 	.word	0x080068a0
 8003ed0:	40021000 	.word	0x40021000
 8003ed4:	007a1200 	.word	0x007a1200
 8003ed8:	003d0900 	.word	0x003d0900
 8003edc:	aaaaaaab 	.word	0xaaaaaaab

08003ee0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b082      	sub	sp, #8
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d101      	bne.n	8003ef2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e041      	b.n	8003f76 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d106      	bne.n	8003f0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f7fd ffd4 	bl	8001eb4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2202      	movs	r2, #2
 8003f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	3304      	adds	r3, #4
 8003f1c:	4619      	mov	r1, r3
 8003f1e:	4610      	mov	r0, r2
 8003f20:	f000 fc70 	bl	8004804 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f74:	2300      	movs	r3, #0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3708      	adds	r7, #8
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
	...

08003f80 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b085      	sub	sp, #20
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d001      	beq.n	8003f98 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e032      	b.n	8003ffe <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2202      	movs	r2, #2
 8003f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a18      	ldr	r2, [pc, #96]	; (8004008 <HAL_TIM_Base_Start+0x88>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d00e      	beq.n	8003fc8 <HAL_TIM_Base_Start+0x48>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fb2:	d009      	beq.n	8003fc8 <HAL_TIM_Base_Start+0x48>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a14      	ldr	r2, [pc, #80]	; (800400c <HAL_TIM_Base_Start+0x8c>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d004      	beq.n	8003fc8 <HAL_TIM_Base_Start+0x48>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a13      	ldr	r2, [pc, #76]	; (8004010 <HAL_TIM_Base_Start+0x90>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d111      	bne.n	8003fec <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	f003 0307 	and.w	r3, r3, #7
 8003fd2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2b06      	cmp	r3, #6
 8003fd8:	d010      	beq.n	8003ffc <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f042 0201 	orr.w	r2, r2, #1
 8003fe8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fea:	e007      	b.n	8003ffc <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f042 0201 	orr.w	r2, r2, #1
 8003ffa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3714      	adds	r7, #20
 8004002:	46bd      	mov	sp, r7
 8004004:	bc80      	pop	{r7}
 8004006:	4770      	bx	lr
 8004008:	40012c00 	.word	0x40012c00
 800400c:	40000400 	.word	0x40000400
 8004010:	40000800 	.word	0x40000800

08004014 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b082      	sub	sp, #8
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d101      	bne.n	8004026 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e041      	b.n	80040aa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800402c:	b2db      	uxtb	r3, r3
 800402e:	2b00      	cmp	r3, #0
 8004030:	d106      	bne.n	8004040 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f000 f839 	bl	80040b2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2202      	movs	r2, #2
 8004044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	3304      	adds	r3, #4
 8004050:	4619      	mov	r1, r3
 8004052:	4610      	mov	r0, r2
 8004054:	f000 fbd6 	bl	8004804 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040a8:	2300      	movs	r3, #0
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3708      	adds	r7, #8
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}

080040b2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80040b2:	b480      	push	{r7}
 80040b4:	b083      	sub	sp, #12
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80040ba:	bf00      	nop
 80040bc:	370c      	adds	r7, #12
 80040be:	46bd      	mov	sp, r7
 80040c0:	bc80      	pop	{r7}
 80040c2:	4770      	bx	lr

080040c4 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b084      	sub	sp, #16
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d109      	bne.n	80040e8 <HAL_TIM_PWM_Start_IT+0x24>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	2b01      	cmp	r3, #1
 80040de:	bf14      	ite	ne
 80040e0:	2301      	movne	r3, #1
 80040e2:	2300      	moveq	r3, #0
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	e022      	b.n	800412e <HAL_TIM_PWM_Start_IT+0x6a>
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	2b04      	cmp	r3, #4
 80040ec:	d109      	bne.n	8004102 <HAL_TIM_PWM_Start_IT+0x3e>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	bf14      	ite	ne
 80040fa:	2301      	movne	r3, #1
 80040fc:	2300      	moveq	r3, #0
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	e015      	b.n	800412e <HAL_TIM_PWM_Start_IT+0x6a>
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	2b08      	cmp	r3, #8
 8004106:	d109      	bne.n	800411c <HAL_TIM_PWM_Start_IT+0x58>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800410e:	b2db      	uxtb	r3, r3
 8004110:	2b01      	cmp	r3, #1
 8004112:	bf14      	ite	ne
 8004114:	2301      	movne	r3, #1
 8004116:	2300      	moveq	r3, #0
 8004118:	b2db      	uxtb	r3, r3
 800411a:	e008      	b.n	800412e <HAL_TIM_PWM_Start_IT+0x6a>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004122:	b2db      	uxtb	r3, r3
 8004124:	2b01      	cmp	r3, #1
 8004126:	bf14      	ite	ne
 8004128:	2301      	movne	r3, #1
 800412a:	2300      	moveq	r3, #0
 800412c:	b2db      	uxtb	r3, r3
 800412e:	2b00      	cmp	r3, #0
 8004130:	d001      	beq.n	8004136 <HAL_TIM_PWM_Start_IT+0x72>
  {
    return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e0a4      	b.n	8004280 <HAL_TIM_PWM_Start_IT+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d104      	bne.n	8004146 <HAL_TIM_PWM_Start_IT+0x82>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2202      	movs	r2, #2
 8004140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004144:	e013      	b.n	800416e <HAL_TIM_PWM_Start_IT+0xaa>
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	2b04      	cmp	r3, #4
 800414a:	d104      	bne.n	8004156 <HAL_TIM_PWM_Start_IT+0x92>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2202      	movs	r2, #2
 8004150:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004154:	e00b      	b.n	800416e <HAL_TIM_PWM_Start_IT+0xaa>
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	2b08      	cmp	r3, #8
 800415a:	d104      	bne.n	8004166 <HAL_TIM_PWM_Start_IT+0xa2>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2202      	movs	r2, #2
 8004160:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004164:	e003      	b.n	800416e <HAL_TIM_PWM_Start_IT+0xaa>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2202      	movs	r2, #2
 800416a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	2b0c      	cmp	r3, #12
 8004172:	d841      	bhi.n	80041f8 <HAL_TIM_PWM_Start_IT+0x134>
 8004174:	a201      	add	r2, pc, #4	; (adr r2, 800417c <HAL_TIM_PWM_Start_IT+0xb8>)
 8004176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800417a:	bf00      	nop
 800417c:	080041b1 	.word	0x080041b1
 8004180:	080041f9 	.word	0x080041f9
 8004184:	080041f9 	.word	0x080041f9
 8004188:	080041f9 	.word	0x080041f9
 800418c:	080041c3 	.word	0x080041c3
 8004190:	080041f9 	.word	0x080041f9
 8004194:	080041f9 	.word	0x080041f9
 8004198:	080041f9 	.word	0x080041f9
 800419c:	080041d5 	.word	0x080041d5
 80041a0:	080041f9 	.word	0x080041f9
 80041a4:	080041f9 	.word	0x080041f9
 80041a8:	080041f9 	.word	0x080041f9
 80041ac:	080041e7 	.word	0x080041e7
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	68da      	ldr	r2, [r3, #12]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f042 0202 	orr.w	r2, r2, #2
 80041be:	60da      	str	r2, [r3, #12]
      break;
 80041c0:	e01b      	b.n	80041fa <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	68da      	ldr	r2, [r3, #12]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f042 0204 	orr.w	r2, r2, #4
 80041d0:	60da      	str	r2, [r3, #12]
      break;
 80041d2:	e012      	b.n	80041fa <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	68da      	ldr	r2, [r3, #12]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f042 0208 	orr.w	r2, r2, #8
 80041e2:	60da      	str	r2, [r3, #12]
      break;
 80041e4:	e009      	b.n	80041fa <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	68da      	ldr	r2, [r3, #12]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f042 0210 	orr.w	r2, r2, #16
 80041f4:	60da      	str	r2, [r3, #12]
      break;
 80041f6:	e000      	b.n	80041fa <HAL_TIM_PWM_Start_IT+0x136>
    }

    default:
      break;
 80041f8:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	2201      	movs	r2, #1
 8004200:	6839      	ldr	r1, [r7, #0]
 8004202:	4618      	mov	r0, r3
 8004204:	f000 fd7e 	bl	8004d04 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a1e      	ldr	r2, [pc, #120]	; (8004288 <HAL_TIM_PWM_Start_IT+0x1c4>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d107      	bne.n	8004222 <HAL_TIM_PWM_Start_IT+0x15e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004220:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a18      	ldr	r2, [pc, #96]	; (8004288 <HAL_TIM_PWM_Start_IT+0x1c4>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d00e      	beq.n	800424a <HAL_TIM_PWM_Start_IT+0x186>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004234:	d009      	beq.n	800424a <HAL_TIM_PWM_Start_IT+0x186>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a14      	ldr	r2, [pc, #80]	; (800428c <HAL_TIM_PWM_Start_IT+0x1c8>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d004      	beq.n	800424a <HAL_TIM_PWM_Start_IT+0x186>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a12      	ldr	r2, [pc, #72]	; (8004290 <HAL_TIM_PWM_Start_IT+0x1cc>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d111      	bne.n	800426e <HAL_TIM_PWM_Start_IT+0x1aa>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	f003 0307 	and.w	r3, r3, #7
 8004254:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2b06      	cmp	r3, #6
 800425a:	d010      	beq.n	800427e <HAL_TIM_PWM_Start_IT+0x1ba>
    {
      __HAL_TIM_ENABLE(htim);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f042 0201 	orr.w	r2, r2, #1
 800426a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800426c:	e007      	b.n	800427e <HAL_TIM_PWM_Start_IT+0x1ba>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f042 0201 	orr.w	r2, r2, #1
 800427c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800427e:	2300      	movs	r3, #0
}
 8004280:	4618      	mov	r0, r3
 8004282:	3710      	adds	r7, #16
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}
 8004288:	40012c00 	.word	0x40012c00
 800428c:	40000400 	.word	0x40000400
 8004290:	40000800 	.word	0x40000800

08004294 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b082      	sub	sp, #8
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	691b      	ldr	r3, [r3, #16]
 80042a2:	f003 0302 	and.w	r3, r3, #2
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d122      	bne.n	80042f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	f003 0302 	and.w	r3, r3, #2
 80042b4:	2b02      	cmp	r3, #2
 80042b6:	d11b      	bne.n	80042f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f06f 0202 	mvn.w	r2, #2
 80042c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2201      	movs	r2, #1
 80042c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	699b      	ldr	r3, [r3, #24]
 80042ce:	f003 0303 	and.w	r3, r3, #3
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d003      	beq.n	80042de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f000 fa78 	bl	80047cc <HAL_TIM_IC_CaptureCallback>
 80042dc:	e005      	b.n	80042ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f000 fa6b 	bl	80047ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f000 fa7a 	bl	80047de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	f003 0304 	and.w	r3, r3, #4
 80042fa:	2b04      	cmp	r3, #4
 80042fc:	d122      	bne.n	8004344 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	f003 0304 	and.w	r3, r3, #4
 8004308:	2b04      	cmp	r3, #4
 800430a:	d11b      	bne.n	8004344 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f06f 0204 	mvn.w	r2, #4
 8004314:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2202      	movs	r2, #2
 800431a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	699b      	ldr	r3, [r3, #24]
 8004322:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004326:	2b00      	cmp	r3, #0
 8004328:	d003      	beq.n	8004332 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f000 fa4e 	bl	80047cc <HAL_TIM_IC_CaptureCallback>
 8004330:	e005      	b.n	800433e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f000 fa41 	bl	80047ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f000 fa50 	bl	80047de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	f003 0308 	and.w	r3, r3, #8
 800434e:	2b08      	cmp	r3, #8
 8004350:	d122      	bne.n	8004398 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	f003 0308 	and.w	r3, r3, #8
 800435c:	2b08      	cmp	r3, #8
 800435e:	d11b      	bne.n	8004398 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f06f 0208 	mvn.w	r2, #8
 8004368:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2204      	movs	r2, #4
 800436e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	69db      	ldr	r3, [r3, #28]
 8004376:	f003 0303 	and.w	r3, r3, #3
 800437a:	2b00      	cmp	r3, #0
 800437c:	d003      	beq.n	8004386 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f000 fa24 	bl	80047cc <HAL_TIM_IC_CaptureCallback>
 8004384:	e005      	b.n	8004392 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 fa17 	bl	80047ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f000 fa26 	bl	80047de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	691b      	ldr	r3, [r3, #16]
 800439e:	f003 0310 	and.w	r3, r3, #16
 80043a2:	2b10      	cmp	r3, #16
 80043a4:	d122      	bne.n	80043ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	f003 0310 	and.w	r3, r3, #16
 80043b0:	2b10      	cmp	r3, #16
 80043b2:	d11b      	bne.n	80043ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f06f 0210 	mvn.w	r2, #16
 80043bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2208      	movs	r2, #8
 80043c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	69db      	ldr	r3, [r3, #28]
 80043ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d003      	beq.n	80043da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f000 f9fa 	bl	80047cc <HAL_TIM_IC_CaptureCallback>
 80043d8:	e005      	b.n	80043e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f000 f9ed 	bl	80047ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f000 f9fc 	bl	80047de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	f003 0301 	and.w	r3, r3, #1
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d10e      	bne.n	8004418 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	f003 0301 	and.w	r3, r3, #1
 8004404:	2b01      	cmp	r3, #1
 8004406:	d107      	bne.n	8004418 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f06f 0201 	mvn.w	r2, #1
 8004410:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f000 f9c8 	bl	80047a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	691b      	ldr	r3, [r3, #16]
 800441e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004422:	2b80      	cmp	r3, #128	; 0x80
 8004424:	d10e      	bne.n	8004444 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004430:	2b80      	cmp	r3, #128	; 0x80
 8004432:	d107      	bne.n	8004444 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800443c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 fceb 	bl	8004e1a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800444e:	2b40      	cmp	r3, #64	; 0x40
 8004450:	d10e      	bne.n	8004470 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800445c:	2b40      	cmp	r3, #64	; 0x40
 800445e:	d107      	bne.n	8004470 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004468:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f000 f9c0 	bl	80047f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	f003 0320 	and.w	r3, r3, #32
 800447a:	2b20      	cmp	r3, #32
 800447c:	d10e      	bne.n	800449c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	f003 0320 	and.w	r3, r3, #32
 8004488:	2b20      	cmp	r3, #32
 800448a:	d107      	bne.n	800449c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f06f 0220 	mvn.w	r2, #32
 8004494:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 fcb6 	bl	8004e08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800449c:	bf00      	nop
 800449e:	3708      	adds	r7, #8
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	60b9      	str	r1, [r7, #8]
 80044ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d101      	bne.n	80044be <HAL_TIM_PWM_ConfigChannel+0x1a>
 80044ba:	2302      	movs	r3, #2
 80044bc:	e0ac      	b.n	8004618 <HAL_TIM_PWM_ConfigChannel+0x174>
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2201      	movs	r2, #1
 80044c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2b0c      	cmp	r3, #12
 80044ca:	f200 809f 	bhi.w	800460c <HAL_TIM_PWM_ConfigChannel+0x168>
 80044ce:	a201      	add	r2, pc, #4	; (adr r2, 80044d4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80044d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044d4:	08004509 	.word	0x08004509
 80044d8:	0800460d 	.word	0x0800460d
 80044dc:	0800460d 	.word	0x0800460d
 80044e0:	0800460d 	.word	0x0800460d
 80044e4:	08004549 	.word	0x08004549
 80044e8:	0800460d 	.word	0x0800460d
 80044ec:	0800460d 	.word	0x0800460d
 80044f0:	0800460d 	.word	0x0800460d
 80044f4:	0800458b 	.word	0x0800458b
 80044f8:	0800460d 	.word	0x0800460d
 80044fc:	0800460d 	.word	0x0800460d
 8004500:	0800460d 	.word	0x0800460d
 8004504:	080045cb 	.word	0x080045cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	68b9      	ldr	r1, [r7, #8]
 800450e:	4618      	mov	r0, r3
 8004510:	f000 f9da 	bl	80048c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	699a      	ldr	r2, [r3, #24]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f042 0208 	orr.w	r2, r2, #8
 8004522:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	699a      	ldr	r2, [r3, #24]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f022 0204 	bic.w	r2, r2, #4
 8004532:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	6999      	ldr	r1, [r3, #24]
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	691a      	ldr	r2, [r3, #16]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	430a      	orrs	r2, r1
 8004544:	619a      	str	r2, [r3, #24]
      break;
 8004546:	e062      	b.n	800460e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	68b9      	ldr	r1, [r7, #8]
 800454e:	4618      	mov	r0, r3
 8004550:	f000 fa20 	bl	8004994 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	699a      	ldr	r2, [r3, #24]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004562:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	699a      	ldr	r2, [r3, #24]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004572:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	6999      	ldr	r1, [r3, #24]
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	691b      	ldr	r3, [r3, #16]
 800457e:	021a      	lsls	r2, r3, #8
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	430a      	orrs	r2, r1
 8004586:	619a      	str	r2, [r3, #24]
      break;
 8004588:	e041      	b.n	800460e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	68b9      	ldr	r1, [r7, #8]
 8004590:	4618      	mov	r0, r3
 8004592:	f000 fa69 	bl	8004a68 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	69da      	ldr	r2, [r3, #28]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f042 0208 	orr.w	r2, r2, #8
 80045a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	69da      	ldr	r2, [r3, #28]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f022 0204 	bic.w	r2, r2, #4
 80045b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	69d9      	ldr	r1, [r3, #28]
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	691a      	ldr	r2, [r3, #16]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	430a      	orrs	r2, r1
 80045c6:	61da      	str	r2, [r3, #28]
      break;
 80045c8:	e021      	b.n	800460e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	68b9      	ldr	r1, [r7, #8]
 80045d0:	4618      	mov	r0, r3
 80045d2:	f000 fab3 	bl	8004b3c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	69da      	ldr	r2, [r3, #28]
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	69da      	ldr	r2, [r3, #28]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	69d9      	ldr	r1, [r3, #28]
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	691b      	ldr	r3, [r3, #16]
 8004600:	021a      	lsls	r2, r3, #8
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	430a      	orrs	r2, r1
 8004608:	61da      	str	r2, [r3, #28]
      break;
 800460a:	e000      	b.n	800460e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800460c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004616:	2300      	movs	r3, #0
}
 8004618:	4618      	mov	r0, r3
 800461a:	3710      	adds	r7, #16
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}

08004620 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b084      	sub	sp, #16
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004630:	2b01      	cmp	r3, #1
 8004632:	d101      	bne.n	8004638 <HAL_TIM_ConfigClockSource+0x18>
 8004634:	2302      	movs	r3, #2
 8004636:	e0b3      	b.n	80047a0 <HAL_TIM_ConfigClockSource+0x180>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2202      	movs	r2, #2
 8004644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004656:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800465e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	68fa      	ldr	r2, [r7, #12]
 8004666:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004670:	d03e      	beq.n	80046f0 <HAL_TIM_ConfigClockSource+0xd0>
 8004672:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004676:	f200 8087 	bhi.w	8004788 <HAL_TIM_ConfigClockSource+0x168>
 800467a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800467e:	f000 8085 	beq.w	800478c <HAL_TIM_ConfigClockSource+0x16c>
 8004682:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004686:	d87f      	bhi.n	8004788 <HAL_TIM_ConfigClockSource+0x168>
 8004688:	2b70      	cmp	r3, #112	; 0x70
 800468a:	d01a      	beq.n	80046c2 <HAL_TIM_ConfigClockSource+0xa2>
 800468c:	2b70      	cmp	r3, #112	; 0x70
 800468e:	d87b      	bhi.n	8004788 <HAL_TIM_ConfigClockSource+0x168>
 8004690:	2b60      	cmp	r3, #96	; 0x60
 8004692:	d050      	beq.n	8004736 <HAL_TIM_ConfigClockSource+0x116>
 8004694:	2b60      	cmp	r3, #96	; 0x60
 8004696:	d877      	bhi.n	8004788 <HAL_TIM_ConfigClockSource+0x168>
 8004698:	2b50      	cmp	r3, #80	; 0x50
 800469a:	d03c      	beq.n	8004716 <HAL_TIM_ConfigClockSource+0xf6>
 800469c:	2b50      	cmp	r3, #80	; 0x50
 800469e:	d873      	bhi.n	8004788 <HAL_TIM_ConfigClockSource+0x168>
 80046a0:	2b40      	cmp	r3, #64	; 0x40
 80046a2:	d058      	beq.n	8004756 <HAL_TIM_ConfigClockSource+0x136>
 80046a4:	2b40      	cmp	r3, #64	; 0x40
 80046a6:	d86f      	bhi.n	8004788 <HAL_TIM_ConfigClockSource+0x168>
 80046a8:	2b30      	cmp	r3, #48	; 0x30
 80046aa:	d064      	beq.n	8004776 <HAL_TIM_ConfigClockSource+0x156>
 80046ac:	2b30      	cmp	r3, #48	; 0x30
 80046ae:	d86b      	bhi.n	8004788 <HAL_TIM_ConfigClockSource+0x168>
 80046b0:	2b20      	cmp	r3, #32
 80046b2:	d060      	beq.n	8004776 <HAL_TIM_ConfigClockSource+0x156>
 80046b4:	2b20      	cmp	r3, #32
 80046b6:	d867      	bhi.n	8004788 <HAL_TIM_ConfigClockSource+0x168>
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d05c      	beq.n	8004776 <HAL_TIM_ConfigClockSource+0x156>
 80046bc:	2b10      	cmp	r3, #16
 80046be:	d05a      	beq.n	8004776 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80046c0:	e062      	b.n	8004788 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6818      	ldr	r0, [r3, #0]
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	6899      	ldr	r1, [r3, #8]
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	685a      	ldr	r2, [r3, #4]
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	f000 faf8 	bl	8004cc6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80046e4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	68fa      	ldr	r2, [r7, #12]
 80046ec:	609a      	str	r2, [r3, #8]
      break;
 80046ee:	e04e      	b.n	800478e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6818      	ldr	r0, [r3, #0]
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	6899      	ldr	r1, [r3, #8]
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	685a      	ldr	r2, [r3, #4]
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	f000 fae1 	bl	8004cc6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	689a      	ldr	r2, [r3, #8]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004712:	609a      	str	r2, [r3, #8]
      break;
 8004714:	e03b      	b.n	800478e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6818      	ldr	r0, [r3, #0]
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	6859      	ldr	r1, [r3, #4]
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	68db      	ldr	r3, [r3, #12]
 8004722:	461a      	mov	r2, r3
 8004724:	f000 fa58 	bl	8004bd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2150      	movs	r1, #80	; 0x50
 800472e:	4618      	mov	r0, r3
 8004730:	f000 faaf 	bl	8004c92 <TIM_ITRx_SetConfig>
      break;
 8004734:	e02b      	b.n	800478e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6818      	ldr	r0, [r3, #0]
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	6859      	ldr	r1, [r3, #4]
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	461a      	mov	r2, r3
 8004744:	f000 fa76 	bl	8004c34 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	2160      	movs	r1, #96	; 0x60
 800474e:	4618      	mov	r0, r3
 8004750:	f000 fa9f 	bl	8004c92 <TIM_ITRx_SetConfig>
      break;
 8004754:	e01b      	b.n	800478e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6818      	ldr	r0, [r3, #0]
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	6859      	ldr	r1, [r3, #4]
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	68db      	ldr	r3, [r3, #12]
 8004762:	461a      	mov	r2, r3
 8004764:	f000 fa38 	bl	8004bd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	2140      	movs	r1, #64	; 0x40
 800476e:	4618      	mov	r0, r3
 8004770:	f000 fa8f 	bl	8004c92 <TIM_ITRx_SetConfig>
      break;
 8004774:	e00b      	b.n	800478e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4619      	mov	r1, r3
 8004780:	4610      	mov	r0, r2
 8004782:	f000 fa86 	bl	8004c92 <TIM_ITRx_SetConfig>
        break;
 8004786:	e002      	b.n	800478e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004788:	bf00      	nop
 800478a:	e000      	b.n	800478e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800478c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2201      	movs	r2, #1
 8004792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800479e:	2300      	movs	r3, #0
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3710      	adds	r7, #16
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80047b0:	bf00      	nop
 80047b2:	370c      	adds	r7, #12
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bc80      	pop	{r7}
 80047b8:	4770      	bx	lr

080047ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047ba:	b480      	push	{r7}
 80047bc:	b083      	sub	sp, #12
 80047be:	af00      	add	r7, sp, #0
 80047c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80047c2:	bf00      	nop
 80047c4:	370c      	adds	r7, #12
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bc80      	pop	{r7}
 80047ca:	4770      	bx	lr

080047cc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80047d4:	bf00      	nop
 80047d6:	370c      	adds	r7, #12
 80047d8:	46bd      	mov	sp, r7
 80047da:	bc80      	pop	{r7}
 80047dc:	4770      	bx	lr

080047de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80047de:	b480      	push	{r7}
 80047e0:	b083      	sub	sp, #12
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047e6:	bf00      	nop
 80047e8:	370c      	adds	r7, #12
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bc80      	pop	{r7}
 80047ee:	4770      	bx	lr

080047f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047f8:	bf00      	nop
 80047fa:	370c      	adds	r7, #12
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bc80      	pop	{r7}
 8004800:	4770      	bx	lr
	...

08004804 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004804:	b480      	push	{r7}
 8004806:	b085      	sub	sp, #20
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	4a29      	ldr	r2, [pc, #164]	; (80048bc <TIM_Base_SetConfig+0xb8>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d00b      	beq.n	8004834 <TIM_Base_SetConfig+0x30>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004822:	d007      	beq.n	8004834 <TIM_Base_SetConfig+0x30>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	4a26      	ldr	r2, [pc, #152]	; (80048c0 <TIM_Base_SetConfig+0xbc>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d003      	beq.n	8004834 <TIM_Base_SetConfig+0x30>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	4a25      	ldr	r2, [pc, #148]	; (80048c4 <TIM_Base_SetConfig+0xc0>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d108      	bne.n	8004846 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800483a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	68fa      	ldr	r2, [r7, #12]
 8004842:	4313      	orrs	r3, r2
 8004844:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	4a1c      	ldr	r2, [pc, #112]	; (80048bc <TIM_Base_SetConfig+0xb8>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d00b      	beq.n	8004866 <TIM_Base_SetConfig+0x62>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004854:	d007      	beq.n	8004866 <TIM_Base_SetConfig+0x62>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4a19      	ldr	r2, [pc, #100]	; (80048c0 <TIM_Base_SetConfig+0xbc>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d003      	beq.n	8004866 <TIM_Base_SetConfig+0x62>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a18      	ldr	r2, [pc, #96]	; (80048c4 <TIM_Base_SetConfig+0xc0>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d108      	bne.n	8004878 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800486c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	68fa      	ldr	r2, [r7, #12]
 8004874:	4313      	orrs	r3, r2
 8004876:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	695b      	ldr	r3, [r3, #20]
 8004882:	4313      	orrs	r3, r2
 8004884:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	68fa      	ldr	r2, [r7, #12]
 800488a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	689a      	ldr	r2, [r3, #8]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	4a07      	ldr	r2, [pc, #28]	; (80048bc <TIM_Base_SetConfig+0xb8>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d103      	bne.n	80048ac <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	691a      	ldr	r2, [r3, #16]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2201      	movs	r2, #1
 80048b0:	615a      	str	r2, [r3, #20]
}
 80048b2:	bf00      	nop
 80048b4:	3714      	adds	r7, #20
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bc80      	pop	{r7}
 80048ba:	4770      	bx	lr
 80048bc:	40012c00 	.word	0x40012c00
 80048c0:	40000400 	.word	0x40000400
 80048c4:	40000800 	.word	0x40000800

080048c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b087      	sub	sp, #28
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6a1b      	ldr	r3, [r3, #32]
 80048d6:	f023 0201 	bic.w	r2, r3, #1
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a1b      	ldr	r3, [r3, #32]
 80048e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	699b      	ldr	r3, [r3, #24]
 80048ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f023 0303 	bic.w	r3, r3, #3
 80048fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	68fa      	ldr	r2, [r7, #12]
 8004906:	4313      	orrs	r3, r2
 8004908:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	f023 0302 	bic.w	r3, r3, #2
 8004910:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	697a      	ldr	r2, [r7, #20]
 8004918:	4313      	orrs	r3, r2
 800491a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	4a1c      	ldr	r2, [pc, #112]	; (8004990 <TIM_OC1_SetConfig+0xc8>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d10c      	bne.n	800493e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	f023 0308 	bic.w	r3, r3, #8
 800492a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	697a      	ldr	r2, [r7, #20]
 8004932:	4313      	orrs	r3, r2
 8004934:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	f023 0304 	bic.w	r3, r3, #4
 800493c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a13      	ldr	r2, [pc, #76]	; (8004990 <TIM_OC1_SetConfig+0xc8>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d111      	bne.n	800496a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800494c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004954:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	695b      	ldr	r3, [r3, #20]
 800495a:	693a      	ldr	r2, [r7, #16]
 800495c:	4313      	orrs	r3, r2
 800495e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	699b      	ldr	r3, [r3, #24]
 8004964:	693a      	ldr	r2, [r7, #16]
 8004966:	4313      	orrs	r3, r2
 8004968:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	693a      	ldr	r2, [r7, #16]
 800496e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	68fa      	ldr	r2, [r7, #12]
 8004974:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	685a      	ldr	r2, [r3, #4]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	697a      	ldr	r2, [r7, #20]
 8004982:	621a      	str	r2, [r3, #32]
}
 8004984:	bf00      	nop
 8004986:	371c      	adds	r7, #28
 8004988:	46bd      	mov	sp, r7
 800498a:	bc80      	pop	{r7}
 800498c:	4770      	bx	lr
 800498e:	bf00      	nop
 8004990:	40012c00 	.word	0x40012c00

08004994 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004994:	b480      	push	{r7}
 8004996:	b087      	sub	sp, #28
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a1b      	ldr	r3, [r3, #32]
 80049a2:	f023 0210 	bic.w	r2, r3, #16
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a1b      	ldr	r3, [r3, #32]
 80049ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	699b      	ldr	r3, [r3, #24]
 80049ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	021b      	lsls	r3, r3, #8
 80049d2:	68fa      	ldr	r2, [r7, #12]
 80049d4:	4313      	orrs	r3, r2
 80049d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	f023 0320 	bic.w	r3, r3, #32
 80049de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	011b      	lsls	r3, r3, #4
 80049e6:	697a      	ldr	r2, [r7, #20]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	4a1d      	ldr	r2, [pc, #116]	; (8004a64 <TIM_OC2_SetConfig+0xd0>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d10d      	bne.n	8004a10 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	011b      	lsls	r3, r3, #4
 8004a02:	697a      	ldr	r2, [r7, #20]
 8004a04:	4313      	orrs	r3, r2
 8004a06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a0e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	4a14      	ldr	r2, [pc, #80]	; (8004a64 <TIM_OC2_SetConfig+0xd0>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d113      	bne.n	8004a40 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a1e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a26:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	695b      	ldr	r3, [r3, #20]
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	693a      	ldr	r2, [r7, #16]
 8004a30:	4313      	orrs	r3, r2
 8004a32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	699b      	ldr	r3, [r3, #24]
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	693a      	ldr	r2, [r7, #16]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	693a      	ldr	r2, [r7, #16]
 8004a44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	68fa      	ldr	r2, [r7, #12]
 8004a4a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	685a      	ldr	r2, [r3, #4]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	697a      	ldr	r2, [r7, #20]
 8004a58:	621a      	str	r2, [r3, #32]
}
 8004a5a:	bf00      	nop
 8004a5c:	371c      	adds	r7, #28
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bc80      	pop	{r7}
 8004a62:	4770      	bx	lr
 8004a64:	40012c00 	.word	0x40012c00

08004a68 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b087      	sub	sp, #28
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a1b      	ldr	r3, [r3, #32]
 8004a76:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a1b      	ldr	r3, [r3, #32]
 8004a82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	69db      	ldr	r3, [r3, #28]
 8004a8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f023 0303 	bic.w	r3, r3, #3
 8004a9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	68fa      	ldr	r2, [r7, #12]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ab0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	021b      	lsls	r3, r3, #8
 8004ab8:	697a      	ldr	r2, [r7, #20]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	4a1d      	ldr	r2, [pc, #116]	; (8004b38 <TIM_OC3_SetConfig+0xd0>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d10d      	bne.n	8004ae2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004acc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	68db      	ldr	r3, [r3, #12]
 8004ad2:	021b      	lsls	r3, r3, #8
 8004ad4:	697a      	ldr	r2, [r7, #20]
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ae0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4a14      	ldr	r2, [pc, #80]	; (8004b38 <TIM_OC3_SetConfig+0xd0>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d113      	bne.n	8004b12 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004af0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004af8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	695b      	ldr	r3, [r3, #20]
 8004afe:	011b      	lsls	r3, r3, #4
 8004b00:	693a      	ldr	r2, [r7, #16]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	699b      	ldr	r3, [r3, #24]
 8004b0a:	011b      	lsls	r3, r3, #4
 8004b0c:	693a      	ldr	r2, [r7, #16]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	693a      	ldr	r2, [r7, #16]
 8004b16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	68fa      	ldr	r2, [r7, #12]
 8004b1c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	685a      	ldr	r2, [r3, #4]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	697a      	ldr	r2, [r7, #20]
 8004b2a:	621a      	str	r2, [r3, #32]
}
 8004b2c:	bf00      	nop
 8004b2e:	371c      	adds	r7, #28
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bc80      	pop	{r7}
 8004b34:	4770      	bx	lr
 8004b36:	bf00      	nop
 8004b38:	40012c00 	.word	0x40012c00

08004b3c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b087      	sub	sp, #28
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6a1b      	ldr	r3, [r3, #32]
 8004b4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6a1b      	ldr	r3, [r3, #32]
 8004b56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	69db      	ldr	r3, [r3, #28]
 8004b62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	021b      	lsls	r3, r3, #8
 8004b7a:	68fa      	ldr	r2, [r7, #12]
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	031b      	lsls	r3, r3, #12
 8004b8e:	693a      	ldr	r2, [r7, #16]
 8004b90:	4313      	orrs	r3, r2
 8004b92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	4a0f      	ldr	r2, [pc, #60]	; (8004bd4 <TIM_OC4_SetConfig+0x98>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d109      	bne.n	8004bb0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ba2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	695b      	ldr	r3, [r3, #20]
 8004ba8:	019b      	lsls	r3, r3, #6
 8004baa:	697a      	ldr	r2, [r7, #20]
 8004bac:	4313      	orrs	r3, r2
 8004bae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	697a      	ldr	r2, [r7, #20]
 8004bb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	68fa      	ldr	r2, [r7, #12]
 8004bba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	685a      	ldr	r2, [r3, #4]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	693a      	ldr	r2, [r7, #16]
 8004bc8:	621a      	str	r2, [r3, #32]
}
 8004bca:	bf00      	nop
 8004bcc:	371c      	adds	r7, #28
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bc80      	pop	{r7}
 8004bd2:	4770      	bx	lr
 8004bd4:	40012c00 	.word	0x40012c00

08004bd8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b087      	sub	sp, #28
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	60f8      	str	r0, [r7, #12]
 8004be0:	60b9      	str	r1, [r7, #8]
 8004be2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	6a1b      	ldr	r3, [r3, #32]
 8004be8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	6a1b      	ldr	r3, [r3, #32]
 8004bee:	f023 0201 	bic.w	r2, r3, #1
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	699b      	ldr	r3, [r3, #24]
 8004bfa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	011b      	lsls	r3, r3, #4
 8004c08:	693a      	ldr	r2, [r7, #16]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	f023 030a 	bic.w	r3, r3, #10
 8004c14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004c16:	697a      	ldr	r2, [r7, #20]
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	693a      	ldr	r2, [r7, #16]
 8004c22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	697a      	ldr	r2, [r7, #20]
 8004c28:	621a      	str	r2, [r3, #32]
}
 8004c2a:	bf00      	nop
 8004c2c:	371c      	adds	r7, #28
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bc80      	pop	{r7}
 8004c32:	4770      	bx	lr

08004c34 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b087      	sub	sp, #28
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	60b9      	str	r1, [r7, #8]
 8004c3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	6a1b      	ldr	r3, [r3, #32]
 8004c44:	f023 0210 	bic.w	r2, r3, #16
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	699b      	ldr	r3, [r3, #24]
 8004c50:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	6a1b      	ldr	r3, [r3, #32]
 8004c56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c5e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	031b      	lsls	r3, r3, #12
 8004c64:	697a      	ldr	r2, [r7, #20]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004c70:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	011b      	lsls	r3, r3, #4
 8004c76:	693a      	ldr	r2, [r7, #16]
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	697a      	ldr	r2, [r7, #20]
 8004c80:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	693a      	ldr	r2, [r7, #16]
 8004c86:	621a      	str	r2, [r3, #32]
}
 8004c88:	bf00      	nop
 8004c8a:	371c      	adds	r7, #28
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bc80      	pop	{r7}
 8004c90:	4770      	bx	lr

08004c92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c92:	b480      	push	{r7}
 8004c94:	b085      	sub	sp, #20
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	6078      	str	r0, [r7, #4]
 8004c9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ca8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004caa:	683a      	ldr	r2, [r7, #0]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	f043 0307 	orr.w	r3, r3, #7
 8004cb4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	68fa      	ldr	r2, [r7, #12]
 8004cba:	609a      	str	r2, [r3, #8]
}
 8004cbc:	bf00      	nop
 8004cbe:	3714      	adds	r7, #20
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bc80      	pop	{r7}
 8004cc4:	4770      	bx	lr

08004cc6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004cc6:	b480      	push	{r7}
 8004cc8:	b087      	sub	sp, #28
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	60f8      	str	r0, [r7, #12]
 8004cce:	60b9      	str	r1, [r7, #8]
 8004cd0:	607a      	str	r2, [r7, #4]
 8004cd2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ce0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	021a      	lsls	r2, r3, #8
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	431a      	orrs	r2, r3
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	697a      	ldr	r2, [r7, #20]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	697a      	ldr	r2, [r7, #20]
 8004cf8:	609a      	str	r2, [r3, #8]
}
 8004cfa:	bf00      	nop
 8004cfc:	371c      	adds	r7, #28
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bc80      	pop	{r7}
 8004d02:	4770      	bx	lr

08004d04 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b087      	sub	sp, #28
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	60f8      	str	r0, [r7, #12]
 8004d0c:	60b9      	str	r1, [r7, #8]
 8004d0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	f003 031f 	and.w	r3, r3, #31
 8004d16:	2201      	movs	r2, #1
 8004d18:	fa02 f303 	lsl.w	r3, r2, r3
 8004d1c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	6a1a      	ldr	r2, [r3, #32]
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	43db      	mvns	r3, r3
 8004d26:	401a      	ands	r2, r3
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6a1a      	ldr	r2, [r3, #32]
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	f003 031f 	and.w	r3, r3, #31
 8004d36:	6879      	ldr	r1, [r7, #4]
 8004d38:	fa01 f303 	lsl.w	r3, r1, r3
 8004d3c:	431a      	orrs	r2, r3
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	621a      	str	r2, [r3, #32]
}
 8004d42:	bf00      	nop
 8004d44:	371c      	adds	r7, #28
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bc80      	pop	{r7}
 8004d4a:	4770      	bx	lr

08004d4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b085      	sub	sp, #20
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d101      	bne.n	8004d64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d60:	2302      	movs	r3, #2
 8004d62:	e046      	b.n	8004df2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2201      	movs	r2, #1
 8004d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2202      	movs	r2, #2
 8004d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	68fa      	ldr	r2, [r7, #12]
 8004d92:	4313      	orrs	r3, r2
 8004d94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	68fa      	ldr	r2, [r7, #12]
 8004d9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a16      	ldr	r2, [pc, #88]	; (8004dfc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d00e      	beq.n	8004dc6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004db0:	d009      	beq.n	8004dc6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4a12      	ldr	r2, [pc, #72]	; (8004e00 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d004      	beq.n	8004dc6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a10      	ldr	r2, [pc, #64]	; (8004e04 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d10c      	bne.n	8004de0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004dcc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	68ba      	ldr	r2, [r7, #8]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	68ba      	ldr	r2, [r7, #8]
 8004dde:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004df0:	2300      	movs	r3, #0
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3714      	adds	r7, #20
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bc80      	pop	{r7}
 8004dfa:	4770      	bx	lr
 8004dfc:	40012c00 	.word	0x40012c00
 8004e00:	40000400 	.word	0x40000400
 8004e04:	40000800 	.word	0x40000800

08004e08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b083      	sub	sp, #12
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e10:	bf00      	nop
 8004e12:	370c      	adds	r7, #12
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bc80      	pop	{r7}
 8004e18:	4770      	bx	lr

08004e1a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e1a:	b480      	push	{r7}
 8004e1c:	b083      	sub	sp, #12
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e22:	bf00      	nop
 8004e24:	370c      	adds	r7, #12
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bc80      	pop	{r7}
 8004e2a:	4770      	bx	lr

08004e2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b082      	sub	sp, #8
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d101      	bne.n	8004e3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e03f      	b.n	8004ebe <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d106      	bne.n	8004e58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f7fd f888 	bl	8001f68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2224      	movs	r2, #36	; 0x24
 8004e5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68da      	ldr	r2, [r3, #12]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f000 fb83 	bl	800557c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	691a      	ldr	r2, [r3, #16]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	695a      	ldr	r2, [r3, #20]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	68da      	ldr	r2, [r3, #12]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ea4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2220      	movs	r2, #32
 8004eb0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2220      	movs	r2, #32
 8004eb8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004ebc:	2300      	movs	r3, #0
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3708      	adds	r7, #8
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}

08004ec6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ec6:	b580      	push	{r7, lr}
 8004ec8:	b08a      	sub	sp, #40	; 0x28
 8004eca:	af02      	add	r7, sp, #8
 8004ecc:	60f8      	str	r0, [r7, #12]
 8004ece:	60b9      	str	r1, [r7, #8]
 8004ed0:	603b      	str	r3, [r7, #0]
 8004ed2:	4613      	mov	r3, r2
 8004ed4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	2b20      	cmp	r3, #32
 8004ee4:	d17c      	bne.n	8004fe0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d002      	beq.n	8004ef2 <HAL_UART_Transmit+0x2c>
 8004eec:	88fb      	ldrh	r3, [r7, #6]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d101      	bne.n	8004ef6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e075      	b.n	8004fe2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d101      	bne.n	8004f04 <HAL_UART_Transmit+0x3e>
 8004f00:	2302      	movs	r3, #2
 8004f02:	e06e      	b.n	8004fe2 <HAL_UART_Transmit+0x11c>
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2201      	movs	r2, #1
 8004f08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2221      	movs	r2, #33	; 0x21
 8004f16:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004f1a:	f7fd f915 	bl	8002148 <HAL_GetTick>
 8004f1e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	88fa      	ldrh	r2, [r7, #6]
 8004f24:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	88fa      	ldrh	r2, [r7, #6]
 8004f2a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f34:	d108      	bne.n	8004f48 <HAL_UART_Transmit+0x82>
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	691b      	ldr	r3, [r3, #16]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d104      	bne.n	8004f48 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	61bb      	str	r3, [r7, #24]
 8004f46:	e003      	b.n	8004f50 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2200      	movs	r2, #0
 8004f54:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8004f58:	e02a      	b.n	8004fb0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	9300      	str	r3, [sp, #0]
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	2200      	movs	r2, #0
 8004f62:	2180      	movs	r1, #128	; 0x80
 8004f64:	68f8      	ldr	r0, [r7, #12]
 8004f66:	f000 f9a7 	bl	80052b8 <UART_WaitOnFlagUntilTimeout>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d001      	beq.n	8004f74 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004f70:	2303      	movs	r3, #3
 8004f72:	e036      	b.n	8004fe2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004f74:	69fb      	ldr	r3, [r7, #28]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d10b      	bne.n	8004f92 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f7a:	69bb      	ldr	r3, [r7, #24]
 8004f7c:	881b      	ldrh	r3, [r3, #0]
 8004f7e:	461a      	mov	r2, r3
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f88:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004f8a:	69bb      	ldr	r3, [r7, #24]
 8004f8c:	3302      	adds	r3, #2
 8004f8e:	61bb      	str	r3, [r7, #24]
 8004f90:	e007      	b.n	8004fa2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f92:	69fb      	ldr	r3, [r7, #28]
 8004f94:	781a      	ldrb	r2, [r3, #0]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004f9c:	69fb      	ldr	r3, [r7, #28]
 8004f9e:	3301      	adds	r3, #1
 8004fa0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	3b01      	subs	r3, #1
 8004faa:	b29a      	uxth	r2, r3
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d1cf      	bne.n	8004f5a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	9300      	str	r3, [sp, #0]
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	2140      	movs	r1, #64	; 0x40
 8004fc4:	68f8      	ldr	r0, [r7, #12]
 8004fc6:	f000 f977 	bl	80052b8 <UART_WaitOnFlagUntilTimeout>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d001      	beq.n	8004fd4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004fd0:	2303      	movs	r3, #3
 8004fd2:	e006      	b.n	8004fe2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2220      	movs	r2, #32
 8004fd8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	e000      	b.n	8004fe2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004fe0:	2302      	movs	r3, #2
  }
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3720      	adds	r7, #32
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}

08004fea <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004fea:	b480      	push	{r7}
 8004fec:	b085      	sub	sp, #20
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	60f8      	str	r0, [r7, #12]
 8004ff2:	60b9      	str	r1, [r7, #8]
 8004ff4:	4613      	mov	r3, r2
 8004ff6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	2b20      	cmp	r3, #32
 8005002:	d140      	bne.n	8005086 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d002      	beq.n	8005010 <HAL_UART_Receive_IT+0x26>
 800500a:	88fb      	ldrh	r3, [r7, #6]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d101      	bne.n	8005014 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	e039      	b.n	8005088 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800501a:	2b01      	cmp	r3, #1
 800501c:	d101      	bne.n	8005022 <HAL_UART_Receive_IT+0x38>
 800501e:	2302      	movs	r3, #2
 8005020:	e032      	b.n	8005088 <HAL_UART_Receive_IT+0x9e>
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2201      	movs	r2, #1
 8005026:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	68ba      	ldr	r2, [r7, #8]
 800502e:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	88fa      	ldrh	r2, [r7, #6]
 8005034:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	88fa      	ldrh	r2, [r7, #6]
 800503a:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2200      	movs	r2, #0
 8005040:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2222      	movs	r2, #34	; 0x22
 8005046:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2200      	movs	r2, #0
 800504e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	68da      	ldr	r2, [r3, #12]
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005060:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	695a      	ldr	r2, [r3, #20]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f042 0201 	orr.w	r2, r2, #1
 8005070:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	68da      	ldr	r2, [r3, #12]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f042 0220 	orr.w	r2, r2, #32
 8005080:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005082:	2300      	movs	r3, #0
 8005084:	e000      	b.n	8005088 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005086:	2302      	movs	r3, #2
  }
}
 8005088:	4618      	mov	r0, r3
 800508a:	3714      	adds	r7, #20
 800508c:	46bd      	mov	sp, r7
 800508e:	bc80      	pop	{r7}
 8005090:	4770      	bx	lr
	...

08005094 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b088      	sub	sp, #32
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	68db      	ldr	r3, [r3, #12]
 80050aa:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	695b      	ldr	r3, [r3, #20]
 80050b2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80050b4:	2300      	movs	r3, #0
 80050b6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80050b8:	2300      	movs	r3, #0
 80050ba:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	f003 030f 	and.w	r3, r3, #15
 80050c2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d10d      	bne.n	80050e6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80050ca:	69fb      	ldr	r3, [r7, #28]
 80050cc:	f003 0320 	and.w	r3, r3, #32
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d008      	beq.n	80050e6 <HAL_UART_IRQHandler+0x52>
 80050d4:	69bb      	ldr	r3, [r7, #24]
 80050d6:	f003 0320 	and.w	r3, r3, #32
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d003      	beq.n	80050e6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f000 f9cc 	bl	800547c <UART_Receive_IT>
      return;
 80050e4:	e0d0      	b.n	8005288 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	f000 80b0 	beq.w	800524e <HAL_UART_IRQHandler+0x1ba>
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	f003 0301 	and.w	r3, r3, #1
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d105      	bne.n	8005104 <HAL_UART_IRQHandler+0x70>
 80050f8:	69bb      	ldr	r3, [r7, #24]
 80050fa:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80050fe:	2b00      	cmp	r3, #0
 8005100:	f000 80a5 	beq.w	800524e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005104:	69fb      	ldr	r3, [r7, #28]
 8005106:	f003 0301 	and.w	r3, r3, #1
 800510a:	2b00      	cmp	r3, #0
 800510c:	d00a      	beq.n	8005124 <HAL_UART_IRQHandler+0x90>
 800510e:	69bb      	ldr	r3, [r7, #24]
 8005110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005114:	2b00      	cmp	r3, #0
 8005116:	d005      	beq.n	8005124 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800511c:	f043 0201 	orr.w	r2, r3, #1
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	f003 0304 	and.w	r3, r3, #4
 800512a:	2b00      	cmp	r3, #0
 800512c:	d00a      	beq.n	8005144 <HAL_UART_IRQHandler+0xb0>
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	f003 0301 	and.w	r3, r3, #1
 8005134:	2b00      	cmp	r3, #0
 8005136:	d005      	beq.n	8005144 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800513c:	f043 0202 	orr.w	r2, r3, #2
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005144:	69fb      	ldr	r3, [r7, #28]
 8005146:	f003 0302 	and.w	r3, r3, #2
 800514a:	2b00      	cmp	r3, #0
 800514c:	d00a      	beq.n	8005164 <HAL_UART_IRQHandler+0xd0>
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	f003 0301 	and.w	r3, r3, #1
 8005154:	2b00      	cmp	r3, #0
 8005156:	d005      	beq.n	8005164 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800515c:	f043 0204 	orr.w	r2, r3, #4
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	f003 0308 	and.w	r3, r3, #8
 800516a:	2b00      	cmp	r3, #0
 800516c:	d00f      	beq.n	800518e <HAL_UART_IRQHandler+0xfa>
 800516e:	69bb      	ldr	r3, [r7, #24]
 8005170:	f003 0320 	and.w	r3, r3, #32
 8005174:	2b00      	cmp	r3, #0
 8005176:	d104      	bne.n	8005182 <HAL_UART_IRQHandler+0xee>
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	f003 0301 	and.w	r3, r3, #1
 800517e:	2b00      	cmp	r3, #0
 8005180:	d005      	beq.n	800518e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005186:	f043 0208 	orr.w	r2, r3, #8
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005192:	2b00      	cmp	r3, #0
 8005194:	d077      	beq.n	8005286 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005196:	69fb      	ldr	r3, [r7, #28]
 8005198:	f003 0320 	and.w	r3, r3, #32
 800519c:	2b00      	cmp	r3, #0
 800519e:	d007      	beq.n	80051b0 <HAL_UART_IRQHandler+0x11c>
 80051a0:	69bb      	ldr	r3, [r7, #24]
 80051a2:	f003 0320 	and.w	r3, r3, #32
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d002      	beq.n	80051b0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 f966 	bl	800547c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	695b      	ldr	r3, [r3, #20]
 80051b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	bf14      	ite	ne
 80051be:	2301      	movne	r3, #1
 80051c0:	2300      	moveq	r3, #0
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051ca:	f003 0308 	and.w	r3, r3, #8
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d102      	bne.n	80051d8 <HAL_UART_IRQHandler+0x144>
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d031      	beq.n	800523c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f000 f8b7 	bl	800534c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	695b      	ldr	r3, [r3, #20]
 80051e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d023      	beq.n	8005234 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	695a      	ldr	r2, [r3, #20]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051fa:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005200:	2b00      	cmp	r3, #0
 8005202:	d013      	beq.n	800522c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005208:	4a21      	ldr	r2, [pc, #132]	; (8005290 <HAL_UART_IRQHandler+0x1fc>)
 800520a:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005210:	4618      	mov	r0, r3
 8005212:	f7fd fe03 	bl	8002e1c <HAL_DMA_Abort_IT>
 8005216:	4603      	mov	r3, r0
 8005218:	2b00      	cmp	r3, #0
 800521a:	d016      	beq.n	800524a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005226:	4610      	mov	r0, r2
 8005228:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800522a:	e00e      	b.n	800524a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f000 f83a 	bl	80052a6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005232:	e00a      	b.n	800524a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f000 f836 	bl	80052a6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800523a:	e006      	b.n	800524a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f000 f832 	bl	80052a6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005248:	e01d      	b.n	8005286 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800524a:	bf00      	nop
    return;
 800524c:	e01b      	b.n	8005286 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800524e:	69fb      	ldr	r3, [r7, #28]
 8005250:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005254:	2b00      	cmp	r3, #0
 8005256:	d008      	beq.n	800526a <HAL_UART_IRQHandler+0x1d6>
 8005258:	69bb      	ldr	r3, [r7, #24]
 800525a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800525e:	2b00      	cmp	r3, #0
 8005260:	d003      	beq.n	800526a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f000 f8a3 	bl	80053ae <UART_Transmit_IT>
    return;
 8005268:	e00e      	b.n	8005288 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800526a:	69fb      	ldr	r3, [r7, #28]
 800526c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005270:	2b00      	cmp	r3, #0
 8005272:	d009      	beq.n	8005288 <HAL_UART_IRQHandler+0x1f4>
 8005274:	69bb      	ldr	r3, [r7, #24]
 8005276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800527a:	2b00      	cmp	r3, #0
 800527c:	d004      	beq.n	8005288 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f000 f8e4 	bl	800544c <UART_EndTransmit_IT>
    return;
 8005284:	e000      	b.n	8005288 <HAL_UART_IRQHandler+0x1f4>
    return;
 8005286:	bf00      	nop
  }
}
 8005288:	3720      	adds	r7, #32
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
 800528e:	bf00      	nop
 8005290:	08005387 	.word	0x08005387

08005294 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005294:	b480      	push	{r7}
 8005296:	b083      	sub	sp, #12
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800529c:	bf00      	nop
 800529e:	370c      	adds	r7, #12
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bc80      	pop	{r7}
 80052a4:	4770      	bx	lr

080052a6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80052a6:	b480      	push	{r7}
 80052a8:	b083      	sub	sp, #12
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80052ae:	bf00      	nop
 80052b0:	370c      	adds	r7, #12
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bc80      	pop	{r7}
 80052b6:	4770      	bx	lr

080052b8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b084      	sub	sp, #16
 80052bc:	af00      	add	r7, sp, #0
 80052be:	60f8      	str	r0, [r7, #12]
 80052c0:	60b9      	str	r1, [r7, #8]
 80052c2:	603b      	str	r3, [r7, #0]
 80052c4:	4613      	mov	r3, r2
 80052c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052c8:	e02c      	b.n	8005324 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052ca:	69bb      	ldr	r3, [r7, #24]
 80052cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052d0:	d028      	beq.n	8005324 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80052d2:	69bb      	ldr	r3, [r7, #24]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d007      	beq.n	80052e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80052d8:	f7fc ff36 	bl	8002148 <HAL_GetTick>
 80052dc:	4602      	mov	r2, r0
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	1ad3      	subs	r3, r2, r3
 80052e2:	69ba      	ldr	r2, [r7, #24]
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d21d      	bcs.n	8005324 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	68da      	ldr	r2, [r3, #12]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80052f6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	695a      	ldr	r2, [r3, #20]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f022 0201 	bic.w	r2, r2, #1
 8005306:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2220      	movs	r2, #32
 800530c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2220      	movs	r2, #32
 8005314:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2200      	movs	r2, #0
 800531c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005320:	2303      	movs	r3, #3
 8005322:	e00f      	b.n	8005344 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	4013      	ands	r3, r2
 800532e:	68ba      	ldr	r2, [r7, #8]
 8005330:	429a      	cmp	r2, r3
 8005332:	bf0c      	ite	eq
 8005334:	2301      	moveq	r3, #1
 8005336:	2300      	movne	r3, #0
 8005338:	b2db      	uxtb	r3, r3
 800533a:	461a      	mov	r2, r3
 800533c:	79fb      	ldrb	r3, [r7, #7]
 800533e:	429a      	cmp	r2, r3
 8005340:	d0c3      	beq.n	80052ca <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005342:	2300      	movs	r3, #0
}
 8005344:	4618      	mov	r0, r3
 8005346:	3710      	adds	r7, #16
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}

0800534c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800534c:	b480      	push	{r7}
 800534e:	b083      	sub	sp, #12
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	68da      	ldr	r2, [r3, #12]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005362:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	695a      	ldr	r2, [r3, #20]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f022 0201 	bic.w	r2, r2, #1
 8005372:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2220      	movs	r2, #32
 8005378:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800537c:	bf00      	nop
 800537e:	370c      	adds	r7, #12
 8005380:	46bd      	mov	sp, r7
 8005382:	bc80      	pop	{r7}
 8005384:	4770      	bx	lr

08005386 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005386:	b580      	push	{r7, lr}
 8005388:	b084      	sub	sp, #16
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005392:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2200      	movs	r2, #0
 8005398:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2200      	movs	r2, #0
 800539e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80053a0:	68f8      	ldr	r0, [r7, #12]
 80053a2:	f7ff ff80 	bl	80052a6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053a6:	bf00      	nop
 80053a8:	3710      	adds	r7, #16
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}

080053ae <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80053ae:	b480      	push	{r7}
 80053b0:	b085      	sub	sp, #20
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	2b21      	cmp	r3, #33	; 0x21
 80053c0:	d13e      	bne.n	8005440 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053ca:	d114      	bne.n	80053f6 <UART_Transmit_IT+0x48>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	691b      	ldr	r3, [r3, #16]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d110      	bne.n	80053f6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6a1b      	ldr	r3, [r3, #32]
 80053d8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	881b      	ldrh	r3, [r3, #0]
 80053de:	461a      	mov	r2, r3
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053e8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6a1b      	ldr	r3, [r3, #32]
 80053ee:	1c9a      	adds	r2, r3, #2
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	621a      	str	r2, [r3, #32]
 80053f4:	e008      	b.n	8005408 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a1b      	ldr	r3, [r3, #32]
 80053fa:	1c59      	adds	r1, r3, #1
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	6211      	str	r1, [r2, #32]
 8005400:	781a      	ldrb	r2, [r3, #0]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800540c:	b29b      	uxth	r3, r3
 800540e:	3b01      	subs	r3, #1
 8005410:	b29b      	uxth	r3, r3
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	4619      	mov	r1, r3
 8005416:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005418:	2b00      	cmp	r3, #0
 800541a:	d10f      	bne.n	800543c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	68da      	ldr	r2, [r3, #12]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800542a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	68da      	ldr	r2, [r3, #12]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800543a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800543c:	2300      	movs	r3, #0
 800543e:	e000      	b.n	8005442 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005440:	2302      	movs	r3, #2
  }
}
 8005442:	4618      	mov	r0, r3
 8005444:	3714      	adds	r7, #20
 8005446:	46bd      	mov	sp, r7
 8005448:	bc80      	pop	{r7}
 800544a:	4770      	bx	lr

0800544c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b082      	sub	sp, #8
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	68da      	ldr	r2, [r3, #12]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005462:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2220      	movs	r2, #32
 8005468:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f7ff ff11 	bl	8005294 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005472:	2300      	movs	r3, #0
}
 8005474:	4618      	mov	r0, r3
 8005476:	3708      	adds	r7, #8
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}

0800547c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b084      	sub	sp, #16
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800548a:	b2db      	uxtb	r3, r3
 800548c:	2b22      	cmp	r3, #34	; 0x22
 800548e:	d170      	bne.n	8005572 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005498:	d117      	bne.n	80054ca <UART_Receive_IT+0x4e>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	691b      	ldr	r3, [r3, #16]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d113      	bne.n	80054ca <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 80054a2:	2300      	movs	r3, #0
 80054a4:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054aa:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054b8:	b29a      	uxth	r2, r3
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054c2:	1c9a      	adds	r2, r3, #2
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	629a      	str	r2, [r3, #40]	; 0x28
 80054c8:	e026      	b.n	8005518 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ce:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80054d0:	2300      	movs	r3, #0
 80054d2:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054dc:	d007      	beq.n	80054ee <UART_Receive_IT+0x72>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d10a      	bne.n	80054fc <UART_Receive_IT+0x80>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	691b      	ldr	r3, [r3, #16]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d106      	bne.n	80054fc <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	b2da      	uxtb	r2, r3
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	701a      	strb	r2, [r3, #0]
 80054fa:	e008      	b.n	800550e <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	b2db      	uxtb	r3, r3
 8005504:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005508:	b2da      	uxtb	r2, r3
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005512:	1c5a      	adds	r2, r3, #1
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800551c:	b29b      	uxth	r3, r3
 800551e:	3b01      	subs	r3, #1
 8005520:	b29b      	uxth	r3, r3
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	4619      	mov	r1, r3
 8005526:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005528:	2b00      	cmp	r3, #0
 800552a:	d120      	bne.n	800556e <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	68da      	ldr	r2, [r3, #12]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f022 0220 	bic.w	r2, r2, #32
 800553a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	68da      	ldr	r2, [r3, #12]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800554a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	695a      	ldr	r2, [r3, #20]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f022 0201 	bic.w	r2, r2, #1
 800555a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2220      	movs	r2, #32
 8005560:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f7fc fa29 	bl	80019bc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800556a:	2300      	movs	r3, #0
 800556c:	e002      	b.n	8005574 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 800556e:	2300      	movs	r3, #0
 8005570:	e000      	b.n	8005574 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8005572:	2302      	movs	r3, #2
  }
}
 8005574:	4618      	mov	r0, r3
 8005576:	3710      	adds	r7, #16
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}

0800557c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b084      	sub	sp, #16
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	691b      	ldr	r3, [r3, #16]
 800558a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	68da      	ldr	r2, [r3, #12]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	430a      	orrs	r2, r1
 8005598:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	689a      	ldr	r2, [r3, #8]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	691b      	ldr	r3, [r3, #16]
 80055a2:	431a      	orrs	r2, r3
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	695b      	ldr	r3, [r3, #20]
 80055a8:	4313      	orrs	r3, r2
 80055aa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	68db      	ldr	r3, [r3, #12]
 80055b2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80055b6:	f023 030c 	bic.w	r3, r3, #12
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	6812      	ldr	r2, [r2, #0]
 80055be:	68b9      	ldr	r1, [r7, #8]
 80055c0:	430b      	orrs	r3, r1
 80055c2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	695b      	ldr	r3, [r3, #20]
 80055ca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	699a      	ldr	r2, [r3, #24]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	430a      	orrs	r2, r1
 80055d8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a2c      	ldr	r2, [pc, #176]	; (8005690 <UART_SetConfig+0x114>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d103      	bne.n	80055ec <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80055e4:	f7fe fad0 	bl	8003b88 <HAL_RCC_GetPCLK2Freq>
 80055e8:	60f8      	str	r0, [r7, #12]
 80055ea:	e002      	b.n	80055f2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80055ec:	f7fe fab8 	bl	8003b60 <HAL_RCC_GetPCLK1Freq>
 80055f0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80055f2:	68fa      	ldr	r2, [r7, #12]
 80055f4:	4613      	mov	r3, r2
 80055f6:	009b      	lsls	r3, r3, #2
 80055f8:	4413      	add	r3, r2
 80055fa:	009a      	lsls	r2, r3, #2
 80055fc:	441a      	add	r2, r3
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	009b      	lsls	r3, r3, #2
 8005604:	fbb2 f3f3 	udiv	r3, r2, r3
 8005608:	4a22      	ldr	r2, [pc, #136]	; (8005694 <UART_SetConfig+0x118>)
 800560a:	fba2 2303 	umull	r2, r3, r2, r3
 800560e:	095b      	lsrs	r3, r3, #5
 8005610:	0119      	lsls	r1, r3, #4
 8005612:	68fa      	ldr	r2, [r7, #12]
 8005614:	4613      	mov	r3, r2
 8005616:	009b      	lsls	r3, r3, #2
 8005618:	4413      	add	r3, r2
 800561a:	009a      	lsls	r2, r3, #2
 800561c:	441a      	add	r2, r3
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	009b      	lsls	r3, r3, #2
 8005624:	fbb2 f2f3 	udiv	r2, r2, r3
 8005628:	4b1a      	ldr	r3, [pc, #104]	; (8005694 <UART_SetConfig+0x118>)
 800562a:	fba3 0302 	umull	r0, r3, r3, r2
 800562e:	095b      	lsrs	r3, r3, #5
 8005630:	2064      	movs	r0, #100	; 0x64
 8005632:	fb00 f303 	mul.w	r3, r0, r3
 8005636:	1ad3      	subs	r3, r2, r3
 8005638:	011b      	lsls	r3, r3, #4
 800563a:	3332      	adds	r3, #50	; 0x32
 800563c:	4a15      	ldr	r2, [pc, #84]	; (8005694 <UART_SetConfig+0x118>)
 800563e:	fba2 2303 	umull	r2, r3, r2, r3
 8005642:	095b      	lsrs	r3, r3, #5
 8005644:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005648:	4419      	add	r1, r3
 800564a:	68fa      	ldr	r2, [r7, #12]
 800564c:	4613      	mov	r3, r2
 800564e:	009b      	lsls	r3, r3, #2
 8005650:	4413      	add	r3, r2
 8005652:	009a      	lsls	r2, r3, #2
 8005654:	441a      	add	r2, r3
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	009b      	lsls	r3, r3, #2
 800565c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005660:	4b0c      	ldr	r3, [pc, #48]	; (8005694 <UART_SetConfig+0x118>)
 8005662:	fba3 0302 	umull	r0, r3, r3, r2
 8005666:	095b      	lsrs	r3, r3, #5
 8005668:	2064      	movs	r0, #100	; 0x64
 800566a:	fb00 f303 	mul.w	r3, r0, r3
 800566e:	1ad3      	subs	r3, r2, r3
 8005670:	011b      	lsls	r3, r3, #4
 8005672:	3332      	adds	r3, #50	; 0x32
 8005674:	4a07      	ldr	r2, [pc, #28]	; (8005694 <UART_SetConfig+0x118>)
 8005676:	fba2 2303 	umull	r2, r3, r2, r3
 800567a:	095b      	lsrs	r3, r3, #5
 800567c:	f003 020f 	and.w	r2, r3, #15
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	440a      	add	r2, r1
 8005686:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005688:	bf00      	nop
 800568a:	3710      	adds	r7, #16
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}
 8005690:	40013800 	.word	0x40013800
 8005694:	51eb851f 	.word	0x51eb851f

08005698 <__libc_init_array>:
 8005698:	b570      	push	{r4, r5, r6, lr}
 800569a:	2600      	movs	r6, #0
 800569c:	4d0c      	ldr	r5, [pc, #48]	; (80056d0 <__libc_init_array+0x38>)
 800569e:	4c0d      	ldr	r4, [pc, #52]	; (80056d4 <__libc_init_array+0x3c>)
 80056a0:	1b64      	subs	r4, r4, r5
 80056a2:	10a4      	asrs	r4, r4, #2
 80056a4:	42a6      	cmp	r6, r4
 80056a6:	d109      	bne.n	80056bc <__libc_init_array+0x24>
 80056a8:	f001 f8c6 	bl	8006838 <_init>
 80056ac:	2600      	movs	r6, #0
 80056ae:	4d0a      	ldr	r5, [pc, #40]	; (80056d8 <__libc_init_array+0x40>)
 80056b0:	4c0a      	ldr	r4, [pc, #40]	; (80056dc <__libc_init_array+0x44>)
 80056b2:	1b64      	subs	r4, r4, r5
 80056b4:	10a4      	asrs	r4, r4, #2
 80056b6:	42a6      	cmp	r6, r4
 80056b8:	d105      	bne.n	80056c6 <__libc_init_array+0x2e>
 80056ba:	bd70      	pop	{r4, r5, r6, pc}
 80056bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80056c0:	4798      	blx	r3
 80056c2:	3601      	adds	r6, #1
 80056c4:	e7ee      	b.n	80056a4 <__libc_init_array+0xc>
 80056c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80056ca:	4798      	blx	r3
 80056cc:	3601      	adds	r6, #1
 80056ce:	e7f2      	b.n	80056b6 <__libc_init_array+0x1e>
 80056d0:	08006d0c 	.word	0x08006d0c
 80056d4:	08006d0c 	.word	0x08006d0c
 80056d8:	08006d0c 	.word	0x08006d0c
 80056dc:	08006d14 	.word	0x08006d14

080056e0 <memmove>:
 80056e0:	4288      	cmp	r0, r1
 80056e2:	b510      	push	{r4, lr}
 80056e4:	eb01 0402 	add.w	r4, r1, r2
 80056e8:	d902      	bls.n	80056f0 <memmove+0x10>
 80056ea:	4284      	cmp	r4, r0
 80056ec:	4623      	mov	r3, r4
 80056ee:	d807      	bhi.n	8005700 <memmove+0x20>
 80056f0:	1e43      	subs	r3, r0, #1
 80056f2:	42a1      	cmp	r1, r4
 80056f4:	d008      	beq.n	8005708 <memmove+0x28>
 80056f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80056fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80056fe:	e7f8      	b.n	80056f2 <memmove+0x12>
 8005700:	4601      	mov	r1, r0
 8005702:	4402      	add	r2, r0
 8005704:	428a      	cmp	r2, r1
 8005706:	d100      	bne.n	800570a <memmove+0x2a>
 8005708:	bd10      	pop	{r4, pc}
 800570a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800570e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005712:	e7f7      	b.n	8005704 <memmove+0x24>

08005714 <memset>:
 8005714:	4603      	mov	r3, r0
 8005716:	4402      	add	r2, r0
 8005718:	4293      	cmp	r3, r2
 800571a:	d100      	bne.n	800571e <memset+0xa>
 800571c:	4770      	bx	lr
 800571e:	f803 1b01 	strb.w	r1, [r3], #1
 8005722:	e7f9      	b.n	8005718 <memset+0x4>

08005724 <srand>:
 8005724:	b538      	push	{r3, r4, r5, lr}
 8005726:	4b10      	ldr	r3, [pc, #64]	; (8005768 <srand+0x44>)
 8005728:	4604      	mov	r4, r0
 800572a:	681d      	ldr	r5, [r3, #0]
 800572c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800572e:	b9b3      	cbnz	r3, 800575e <srand+0x3a>
 8005730:	2018      	movs	r0, #24
 8005732:	f000 f895 	bl	8005860 <malloc>
 8005736:	4602      	mov	r2, r0
 8005738:	63a8      	str	r0, [r5, #56]	; 0x38
 800573a:	b920      	cbnz	r0, 8005746 <srand+0x22>
 800573c:	2142      	movs	r1, #66	; 0x42
 800573e:	4b0b      	ldr	r3, [pc, #44]	; (800576c <srand+0x48>)
 8005740:	480b      	ldr	r0, [pc, #44]	; (8005770 <srand+0x4c>)
 8005742:	f000 f85d 	bl	8005800 <__assert_func>
 8005746:	490b      	ldr	r1, [pc, #44]	; (8005774 <srand+0x50>)
 8005748:	4b0b      	ldr	r3, [pc, #44]	; (8005778 <srand+0x54>)
 800574a:	e9c0 1300 	strd	r1, r3, [r0]
 800574e:	4b0b      	ldr	r3, [pc, #44]	; (800577c <srand+0x58>)
 8005750:	2100      	movs	r1, #0
 8005752:	6083      	str	r3, [r0, #8]
 8005754:	230b      	movs	r3, #11
 8005756:	8183      	strh	r3, [r0, #12]
 8005758:	2001      	movs	r0, #1
 800575a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800575e:	2200      	movs	r2, #0
 8005760:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8005762:	611c      	str	r4, [r3, #16]
 8005764:	615a      	str	r2, [r3, #20]
 8005766:	bd38      	pop	{r3, r4, r5, pc}
 8005768:	20000074 	.word	0x20000074
 800576c:	08006bc4 	.word	0x08006bc4
 8005770:	08006bdb 	.word	0x08006bdb
 8005774:	abcd330e 	.word	0xabcd330e
 8005778:	e66d1234 	.word	0xe66d1234
 800577c:	0005deec 	.word	0x0005deec

08005780 <rand>:
 8005780:	4b17      	ldr	r3, [pc, #92]	; (80057e0 <rand+0x60>)
 8005782:	b510      	push	{r4, lr}
 8005784:	681c      	ldr	r4, [r3, #0]
 8005786:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005788:	b9b3      	cbnz	r3, 80057b8 <rand+0x38>
 800578a:	2018      	movs	r0, #24
 800578c:	f000 f868 	bl	8005860 <malloc>
 8005790:	4602      	mov	r2, r0
 8005792:	63a0      	str	r0, [r4, #56]	; 0x38
 8005794:	b920      	cbnz	r0, 80057a0 <rand+0x20>
 8005796:	214e      	movs	r1, #78	; 0x4e
 8005798:	4b12      	ldr	r3, [pc, #72]	; (80057e4 <rand+0x64>)
 800579a:	4813      	ldr	r0, [pc, #76]	; (80057e8 <rand+0x68>)
 800579c:	f000 f830 	bl	8005800 <__assert_func>
 80057a0:	4912      	ldr	r1, [pc, #72]	; (80057ec <rand+0x6c>)
 80057a2:	4b13      	ldr	r3, [pc, #76]	; (80057f0 <rand+0x70>)
 80057a4:	e9c0 1300 	strd	r1, r3, [r0]
 80057a8:	4b12      	ldr	r3, [pc, #72]	; (80057f4 <rand+0x74>)
 80057aa:	2100      	movs	r1, #0
 80057ac:	6083      	str	r3, [r0, #8]
 80057ae:	230b      	movs	r3, #11
 80057b0:	8183      	strh	r3, [r0, #12]
 80057b2:	2001      	movs	r0, #1
 80057b4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80057b8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80057ba:	480f      	ldr	r0, [pc, #60]	; (80057f8 <rand+0x78>)
 80057bc:	690a      	ldr	r2, [r1, #16]
 80057be:	694b      	ldr	r3, [r1, #20]
 80057c0:	4350      	muls	r0, r2
 80057c2:	4c0e      	ldr	r4, [pc, #56]	; (80057fc <rand+0x7c>)
 80057c4:	fb04 0003 	mla	r0, r4, r3, r0
 80057c8:	fba2 3404 	umull	r3, r4, r2, r4
 80057cc:	1c5a      	adds	r2, r3, #1
 80057ce:	4404      	add	r4, r0
 80057d0:	f144 0000 	adc.w	r0, r4, #0
 80057d4:	e9c1 2004 	strd	r2, r0, [r1, #16]
 80057d8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80057dc:	bd10      	pop	{r4, pc}
 80057de:	bf00      	nop
 80057e0:	20000074 	.word	0x20000074
 80057e4:	08006bc4 	.word	0x08006bc4
 80057e8:	08006bdb 	.word	0x08006bdb
 80057ec:	abcd330e 	.word	0xabcd330e
 80057f0:	e66d1234 	.word	0xe66d1234
 80057f4:	0005deec 	.word	0x0005deec
 80057f8:	5851f42d 	.word	0x5851f42d
 80057fc:	4c957f2d 	.word	0x4c957f2d

08005800 <__assert_func>:
 8005800:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005802:	4614      	mov	r4, r2
 8005804:	461a      	mov	r2, r3
 8005806:	4b09      	ldr	r3, [pc, #36]	; (800582c <__assert_func+0x2c>)
 8005808:	4605      	mov	r5, r0
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	68d8      	ldr	r0, [r3, #12]
 800580e:	b14c      	cbz	r4, 8005824 <__assert_func+0x24>
 8005810:	4b07      	ldr	r3, [pc, #28]	; (8005830 <__assert_func+0x30>)
 8005812:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005816:	9100      	str	r1, [sp, #0]
 8005818:	462b      	mov	r3, r5
 800581a:	4906      	ldr	r1, [pc, #24]	; (8005834 <__assert_func+0x34>)
 800581c:	f000 f80e 	bl	800583c <fiprintf>
 8005820:	f000 fc8a 	bl	8006138 <abort>
 8005824:	4b04      	ldr	r3, [pc, #16]	; (8005838 <__assert_func+0x38>)
 8005826:	461c      	mov	r4, r3
 8005828:	e7f3      	b.n	8005812 <__assert_func+0x12>
 800582a:	bf00      	nop
 800582c:	20000074 	.word	0x20000074
 8005830:	08006c3a 	.word	0x08006c3a
 8005834:	08006c47 	.word	0x08006c47
 8005838:	08006c75 	.word	0x08006c75

0800583c <fiprintf>:
 800583c:	b40e      	push	{r1, r2, r3}
 800583e:	b503      	push	{r0, r1, lr}
 8005840:	4601      	mov	r1, r0
 8005842:	ab03      	add	r3, sp, #12
 8005844:	4805      	ldr	r0, [pc, #20]	; (800585c <fiprintf+0x20>)
 8005846:	f853 2b04 	ldr.w	r2, [r3], #4
 800584a:	6800      	ldr	r0, [r0, #0]
 800584c:	9301      	str	r3, [sp, #4]
 800584e:	f000 f8dd 	bl	8005a0c <_vfiprintf_r>
 8005852:	b002      	add	sp, #8
 8005854:	f85d eb04 	ldr.w	lr, [sp], #4
 8005858:	b003      	add	sp, #12
 800585a:	4770      	bx	lr
 800585c:	20000074 	.word	0x20000074

08005860 <malloc>:
 8005860:	4b02      	ldr	r3, [pc, #8]	; (800586c <malloc+0xc>)
 8005862:	4601      	mov	r1, r0
 8005864:	6818      	ldr	r0, [r3, #0]
 8005866:	f000 b84f 	b.w	8005908 <_malloc_r>
 800586a:	bf00      	nop
 800586c:	20000074 	.word	0x20000074

08005870 <_free_r>:
 8005870:	b538      	push	{r3, r4, r5, lr}
 8005872:	4605      	mov	r5, r0
 8005874:	2900      	cmp	r1, #0
 8005876:	d043      	beq.n	8005900 <_free_r+0x90>
 8005878:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800587c:	1f0c      	subs	r4, r1, #4
 800587e:	2b00      	cmp	r3, #0
 8005880:	bfb8      	it	lt
 8005882:	18e4      	addlt	r4, r4, r3
 8005884:	f000 fe8c 	bl	80065a0 <__malloc_lock>
 8005888:	4a1e      	ldr	r2, [pc, #120]	; (8005904 <_free_r+0x94>)
 800588a:	6813      	ldr	r3, [r2, #0]
 800588c:	4610      	mov	r0, r2
 800588e:	b933      	cbnz	r3, 800589e <_free_r+0x2e>
 8005890:	6063      	str	r3, [r4, #4]
 8005892:	6014      	str	r4, [r2, #0]
 8005894:	4628      	mov	r0, r5
 8005896:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800589a:	f000 be87 	b.w	80065ac <__malloc_unlock>
 800589e:	42a3      	cmp	r3, r4
 80058a0:	d90a      	bls.n	80058b8 <_free_r+0x48>
 80058a2:	6821      	ldr	r1, [r4, #0]
 80058a4:	1862      	adds	r2, r4, r1
 80058a6:	4293      	cmp	r3, r2
 80058a8:	bf01      	itttt	eq
 80058aa:	681a      	ldreq	r2, [r3, #0]
 80058ac:	685b      	ldreq	r3, [r3, #4]
 80058ae:	1852      	addeq	r2, r2, r1
 80058b0:	6022      	streq	r2, [r4, #0]
 80058b2:	6063      	str	r3, [r4, #4]
 80058b4:	6004      	str	r4, [r0, #0]
 80058b6:	e7ed      	b.n	8005894 <_free_r+0x24>
 80058b8:	461a      	mov	r2, r3
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	b10b      	cbz	r3, 80058c2 <_free_r+0x52>
 80058be:	42a3      	cmp	r3, r4
 80058c0:	d9fa      	bls.n	80058b8 <_free_r+0x48>
 80058c2:	6811      	ldr	r1, [r2, #0]
 80058c4:	1850      	adds	r0, r2, r1
 80058c6:	42a0      	cmp	r0, r4
 80058c8:	d10b      	bne.n	80058e2 <_free_r+0x72>
 80058ca:	6820      	ldr	r0, [r4, #0]
 80058cc:	4401      	add	r1, r0
 80058ce:	1850      	adds	r0, r2, r1
 80058d0:	4283      	cmp	r3, r0
 80058d2:	6011      	str	r1, [r2, #0]
 80058d4:	d1de      	bne.n	8005894 <_free_r+0x24>
 80058d6:	6818      	ldr	r0, [r3, #0]
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	4401      	add	r1, r0
 80058dc:	6011      	str	r1, [r2, #0]
 80058de:	6053      	str	r3, [r2, #4]
 80058e0:	e7d8      	b.n	8005894 <_free_r+0x24>
 80058e2:	d902      	bls.n	80058ea <_free_r+0x7a>
 80058e4:	230c      	movs	r3, #12
 80058e6:	602b      	str	r3, [r5, #0]
 80058e8:	e7d4      	b.n	8005894 <_free_r+0x24>
 80058ea:	6820      	ldr	r0, [r4, #0]
 80058ec:	1821      	adds	r1, r4, r0
 80058ee:	428b      	cmp	r3, r1
 80058f0:	bf01      	itttt	eq
 80058f2:	6819      	ldreq	r1, [r3, #0]
 80058f4:	685b      	ldreq	r3, [r3, #4]
 80058f6:	1809      	addeq	r1, r1, r0
 80058f8:	6021      	streq	r1, [r4, #0]
 80058fa:	6063      	str	r3, [r4, #4]
 80058fc:	6054      	str	r4, [r2, #4]
 80058fe:	e7c9      	b.n	8005894 <_free_r+0x24>
 8005900:	bd38      	pop	{r3, r4, r5, pc}
 8005902:	bf00      	nop
 8005904:	20000298 	.word	0x20000298

08005908 <_malloc_r>:
 8005908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800590a:	1ccd      	adds	r5, r1, #3
 800590c:	f025 0503 	bic.w	r5, r5, #3
 8005910:	3508      	adds	r5, #8
 8005912:	2d0c      	cmp	r5, #12
 8005914:	bf38      	it	cc
 8005916:	250c      	movcc	r5, #12
 8005918:	2d00      	cmp	r5, #0
 800591a:	4606      	mov	r6, r0
 800591c:	db01      	blt.n	8005922 <_malloc_r+0x1a>
 800591e:	42a9      	cmp	r1, r5
 8005920:	d903      	bls.n	800592a <_malloc_r+0x22>
 8005922:	230c      	movs	r3, #12
 8005924:	6033      	str	r3, [r6, #0]
 8005926:	2000      	movs	r0, #0
 8005928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800592a:	f000 fe39 	bl	80065a0 <__malloc_lock>
 800592e:	4921      	ldr	r1, [pc, #132]	; (80059b4 <_malloc_r+0xac>)
 8005930:	680a      	ldr	r2, [r1, #0]
 8005932:	4614      	mov	r4, r2
 8005934:	b99c      	cbnz	r4, 800595e <_malloc_r+0x56>
 8005936:	4f20      	ldr	r7, [pc, #128]	; (80059b8 <_malloc_r+0xb0>)
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	b923      	cbnz	r3, 8005946 <_malloc_r+0x3e>
 800593c:	4621      	mov	r1, r4
 800593e:	4630      	mov	r0, r6
 8005940:	f000 fb2a 	bl	8005f98 <_sbrk_r>
 8005944:	6038      	str	r0, [r7, #0]
 8005946:	4629      	mov	r1, r5
 8005948:	4630      	mov	r0, r6
 800594a:	f000 fb25 	bl	8005f98 <_sbrk_r>
 800594e:	1c43      	adds	r3, r0, #1
 8005950:	d123      	bne.n	800599a <_malloc_r+0x92>
 8005952:	230c      	movs	r3, #12
 8005954:	4630      	mov	r0, r6
 8005956:	6033      	str	r3, [r6, #0]
 8005958:	f000 fe28 	bl	80065ac <__malloc_unlock>
 800595c:	e7e3      	b.n	8005926 <_malloc_r+0x1e>
 800595e:	6823      	ldr	r3, [r4, #0]
 8005960:	1b5b      	subs	r3, r3, r5
 8005962:	d417      	bmi.n	8005994 <_malloc_r+0x8c>
 8005964:	2b0b      	cmp	r3, #11
 8005966:	d903      	bls.n	8005970 <_malloc_r+0x68>
 8005968:	6023      	str	r3, [r4, #0]
 800596a:	441c      	add	r4, r3
 800596c:	6025      	str	r5, [r4, #0]
 800596e:	e004      	b.n	800597a <_malloc_r+0x72>
 8005970:	6863      	ldr	r3, [r4, #4]
 8005972:	42a2      	cmp	r2, r4
 8005974:	bf0c      	ite	eq
 8005976:	600b      	streq	r3, [r1, #0]
 8005978:	6053      	strne	r3, [r2, #4]
 800597a:	4630      	mov	r0, r6
 800597c:	f000 fe16 	bl	80065ac <__malloc_unlock>
 8005980:	f104 000b 	add.w	r0, r4, #11
 8005984:	1d23      	adds	r3, r4, #4
 8005986:	f020 0007 	bic.w	r0, r0, #7
 800598a:	1ac2      	subs	r2, r0, r3
 800598c:	d0cc      	beq.n	8005928 <_malloc_r+0x20>
 800598e:	1a1b      	subs	r3, r3, r0
 8005990:	50a3      	str	r3, [r4, r2]
 8005992:	e7c9      	b.n	8005928 <_malloc_r+0x20>
 8005994:	4622      	mov	r2, r4
 8005996:	6864      	ldr	r4, [r4, #4]
 8005998:	e7cc      	b.n	8005934 <_malloc_r+0x2c>
 800599a:	1cc4      	adds	r4, r0, #3
 800599c:	f024 0403 	bic.w	r4, r4, #3
 80059a0:	42a0      	cmp	r0, r4
 80059a2:	d0e3      	beq.n	800596c <_malloc_r+0x64>
 80059a4:	1a21      	subs	r1, r4, r0
 80059a6:	4630      	mov	r0, r6
 80059a8:	f000 faf6 	bl	8005f98 <_sbrk_r>
 80059ac:	3001      	adds	r0, #1
 80059ae:	d1dd      	bne.n	800596c <_malloc_r+0x64>
 80059b0:	e7cf      	b.n	8005952 <_malloc_r+0x4a>
 80059b2:	bf00      	nop
 80059b4:	20000298 	.word	0x20000298
 80059b8:	2000029c 	.word	0x2000029c

080059bc <__sfputc_r>:
 80059bc:	6893      	ldr	r3, [r2, #8]
 80059be:	b410      	push	{r4}
 80059c0:	3b01      	subs	r3, #1
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	6093      	str	r3, [r2, #8]
 80059c6:	da07      	bge.n	80059d8 <__sfputc_r+0x1c>
 80059c8:	6994      	ldr	r4, [r2, #24]
 80059ca:	42a3      	cmp	r3, r4
 80059cc:	db01      	blt.n	80059d2 <__sfputc_r+0x16>
 80059ce:	290a      	cmp	r1, #10
 80059d0:	d102      	bne.n	80059d8 <__sfputc_r+0x1c>
 80059d2:	bc10      	pop	{r4}
 80059d4:	f000 baf0 	b.w	8005fb8 <__swbuf_r>
 80059d8:	6813      	ldr	r3, [r2, #0]
 80059da:	1c58      	adds	r0, r3, #1
 80059dc:	6010      	str	r0, [r2, #0]
 80059de:	7019      	strb	r1, [r3, #0]
 80059e0:	4608      	mov	r0, r1
 80059e2:	bc10      	pop	{r4}
 80059e4:	4770      	bx	lr

080059e6 <__sfputs_r>:
 80059e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059e8:	4606      	mov	r6, r0
 80059ea:	460f      	mov	r7, r1
 80059ec:	4614      	mov	r4, r2
 80059ee:	18d5      	adds	r5, r2, r3
 80059f0:	42ac      	cmp	r4, r5
 80059f2:	d101      	bne.n	80059f8 <__sfputs_r+0x12>
 80059f4:	2000      	movs	r0, #0
 80059f6:	e007      	b.n	8005a08 <__sfputs_r+0x22>
 80059f8:	463a      	mov	r2, r7
 80059fa:	4630      	mov	r0, r6
 80059fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a00:	f7ff ffdc 	bl	80059bc <__sfputc_r>
 8005a04:	1c43      	adds	r3, r0, #1
 8005a06:	d1f3      	bne.n	80059f0 <__sfputs_r+0xa>
 8005a08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005a0c <_vfiprintf_r>:
 8005a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a10:	460d      	mov	r5, r1
 8005a12:	4614      	mov	r4, r2
 8005a14:	4698      	mov	r8, r3
 8005a16:	4606      	mov	r6, r0
 8005a18:	b09d      	sub	sp, #116	; 0x74
 8005a1a:	b118      	cbz	r0, 8005a24 <_vfiprintf_r+0x18>
 8005a1c:	6983      	ldr	r3, [r0, #24]
 8005a1e:	b90b      	cbnz	r3, 8005a24 <_vfiprintf_r+0x18>
 8005a20:	f000 fcac 	bl	800637c <__sinit>
 8005a24:	4b89      	ldr	r3, [pc, #548]	; (8005c4c <_vfiprintf_r+0x240>)
 8005a26:	429d      	cmp	r5, r3
 8005a28:	d11b      	bne.n	8005a62 <_vfiprintf_r+0x56>
 8005a2a:	6875      	ldr	r5, [r6, #4]
 8005a2c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a2e:	07d9      	lsls	r1, r3, #31
 8005a30:	d405      	bmi.n	8005a3e <_vfiprintf_r+0x32>
 8005a32:	89ab      	ldrh	r3, [r5, #12]
 8005a34:	059a      	lsls	r2, r3, #22
 8005a36:	d402      	bmi.n	8005a3e <_vfiprintf_r+0x32>
 8005a38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a3a:	f000 fd3d 	bl	80064b8 <__retarget_lock_acquire_recursive>
 8005a3e:	89ab      	ldrh	r3, [r5, #12]
 8005a40:	071b      	lsls	r3, r3, #28
 8005a42:	d501      	bpl.n	8005a48 <_vfiprintf_r+0x3c>
 8005a44:	692b      	ldr	r3, [r5, #16]
 8005a46:	b9eb      	cbnz	r3, 8005a84 <_vfiprintf_r+0x78>
 8005a48:	4629      	mov	r1, r5
 8005a4a:	4630      	mov	r0, r6
 8005a4c:	f000 fb06 	bl	800605c <__swsetup_r>
 8005a50:	b1c0      	cbz	r0, 8005a84 <_vfiprintf_r+0x78>
 8005a52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a54:	07dc      	lsls	r4, r3, #31
 8005a56:	d50e      	bpl.n	8005a76 <_vfiprintf_r+0x6a>
 8005a58:	f04f 30ff 	mov.w	r0, #4294967295
 8005a5c:	b01d      	add	sp, #116	; 0x74
 8005a5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a62:	4b7b      	ldr	r3, [pc, #492]	; (8005c50 <_vfiprintf_r+0x244>)
 8005a64:	429d      	cmp	r5, r3
 8005a66:	d101      	bne.n	8005a6c <_vfiprintf_r+0x60>
 8005a68:	68b5      	ldr	r5, [r6, #8]
 8005a6a:	e7df      	b.n	8005a2c <_vfiprintf_r+0x20>
 8005a6c:	4b79      	ldr	r3, [pc, #484]	; (8005c54 <_vfiprintf_r+0x248>)
 8005a6e:	429d      	cmp	r5, r3
 8005a70:	bf08      	it	eq
 8005a72:	68f5      	ldreq	r5, [r6, #12]
 8005a74:	e7da      	b.n	8005a2c <_vfiprintf_r+0x20>
 8005a76:	89ab      	ldrh	r3, [r5, #12]
 8005a78:	0598      	lsls	r0, r3, #22
 8005a7a:	d4ed      	bmi.n	8005a58 <_vfiprintf_r+0x4c>
 8005a7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a7e:	f000 fd1c 	bl	80064ba <__retarget_lock_release_recursive>
 8005a82:	e7e9      	b.n	8005a58 <_vfiprintf_r+0x4c>
 8005a84:	2300      	movs	r3, #0
 8005a86:	9309      	str	r3, [sp, #36]	; 0x24
 8005a88:	2320      	movs	r3, #32
 8005a8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005a8e:	2330      	movs	r3, #48	; 0x30
 8005a90:	f04f 0901 	mov.w	r9, #1
 8005a94:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a98:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8005c58 <_vfiprintf_r+0x24c>
 8005a9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005aa0:	4623      	mov	r3, r4
 8005aa2:	469a      	mov	sl, r3
 8005aa4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005aa8:	b10a      	cbz	r2, 8005aae <_vfiprintf_r+0xa2>
 8005aaa:	2a25      	cmp	r2, #37	; 0x25
 8005aac:	d1f9      	bne.n	8005aa2 <_vfiprintf_r+0x96>
 8005aae:	ebba 0b04 	subs.w	fp, sl, r4
 8005ab2:	d00b      	beq.n	8005acc <_vfiprintf_r+0xc0>
 8005ab4:	465b      	mov	r3, fp
 8005ab6:	4622      	mov	r2, r4
 8005ab8:	4629      	mov	r1, r5
 8005aba:	4630      	mov	r0, r6
 8005abc:	f7ff ff93 	bl	80059e6 <__sfputs_r>
 8005ac0:	3001      	adds	r0, #1
 8005ac2:	f000 80aa 	beq.w	8005c1a <_vfiprintf_r+0x20e>
 8005ac6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ac8:	445a      	add	r2, fp
 8005aca:	9209      	str	r2, [sp, #36]	; 0x24
 8005acc:	f89a 3000 	ldrb.w	r3, [sl]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	f000 80a2 	beq.w	8005c1a <_vfiprintf_r+0x20e>
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	f04f 32ff 	mov.w	r2, #4294967295
 8005adc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ae0:	f10a 0a01 	add.w	sl, sl, #1
 8005ae4:	9304      	str	r3, [sp, #16]
 8005ae6:	9307      	str	r3, [sp, #28]
 8005ae8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005aec:	931a      	str	r3, [sp, #104]	; 0x68
 8005aee:	4654      	mov	r4, sl
 8005af0:	2205      	movs	r2, #5
 8005af2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005af6:	4858      	ldr	r0, [pc, #352]	; (8005c58 <_vfiprintf_r+0x24c>)
 8005af8:	f000 fd44 	bl	8006584 <memchr>
 8005afc:	9a04      	ldr	r2, [sp, #16]
 8005afe:	b9d8      	cbnz	r0, 8005b38 <_vfiprintf_r+0x12c>
 8005b00:	06d1      	lsls	r1, r2, #27
 8005b02:	bf44      	itt	mi
 8005b04:	2320      	movmi	r3, #32
 8005b06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b0a:	0713      	lsls	r3, r2, #28
 8005b0c:	bf44      	itt	mi
 8005b0e:	232b      	movmi	r3, #43	; 0x2b
 8005b10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b14:	f89a 3000 	ldrb.w	r3, [sl]
 8005b18:	2b2a      	cmp	r3, #42	; 0x2a
 8005b1a:	d015      	beq.n	8005b48 <_vfiprintf_r+0x13c>
 8005b1c:	4654      	mov	r4, sl
 8005b1e:	2000      	movs	r0, #0
 8005b20:	f04f 0c0a 	mov.w	ip, #10
 8005b24:	9a07      	ldr	r2, [sp, #28]
 8005b26:	4621      	mov	r1, r4
 8005b28:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b2c:	3b30      	subs	r3, #48	; 0x30
 8005b2e:	2b09      	cmp	r3, #9
 8005b30:	d94e      	bls.n	8005bd0 <_vfiprintf_r+0x1c4>
 8005b32:	b1b0      	cbz	r0, 8005b62 <_vfiprintf_r+0x156>
 8005b34:	9207      	str	r2, [sp, #28]
 8005b36:	e014      	b.n	8005b62 <_vfiprintf_r+0x156>
 8005b38:	eba0 0308 	sub.w	r3, r0, r8
 8005b3c:	fa09 f303 	lsl.w	r3, r9, r3
 8005b40:	4313      	orrs	r3, r2
 8005b42:	46a2      	mov	sl, r4
 8005b44:	9304      	str	r3, [sp, #16]
 8005b46:	e7d2      	b.n	8005aee <_vfiprintf_r+0xe2>
 8005b48:	9b03      	ldr	r3, [sp, #12]
 8005b4a:	1d19      	adds	r1, r3, #4
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	9103      	str	r1, [sp, #12]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	bfbb      	ittet	lt
 8005b54:	425b      	neglt	r3, r3
 8005b56:	f042 0202 	orrlt.w	r2, r2, #2
 8005b5a:	9307      	strge	r3, [sp, #28]
 8005b5c:	9307      	strlt	r3, [sp, #28]
 8005b5e:	bfb8      	it	lt
 8005b60:	9204      	strlt	r2, [sp, #16]
 8005b62:	7823      	ldrb	r3, [r4, #0]
 8005b64:	2b2e      	cmp	r3, #46	; 0x2e
 8005b66:	d10c      	bne.n	8005b82 <_vfiprintf_r+0x176>
 8005b68:	7863      	ldrb	r3, [r4, #1]
 8005b6a:	2b2a      	cmp	r3, #42	; 0x2a
 8005b6c:	d135      	bne.n	8005bda <_vfiprintf_r+0x1ce>
 8005b6e:	9b03      	ldr	r3, [sp, #12]
 8005b70:	3402      	adds	r4, #2
 8005b72:	1d1a      	adds	r2, r3, #4
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	9203      	str	r2, [sp, #12]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	bfb8      	it	lt
 8005b7c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005b80:	9305      	str	r3, [sp, #20]
 8005b82:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005c68 <_vfiprintf_r+0x25c>
 8005b86:	2203      	movs	r2, #3
 8005b88:	4650      	mov	r0, sl
 8005b8a:	7821      	ldrb	r1, [r4, #0]
 8005b8c:	f000 fcfa 	bl	8006584 <memchr>
 8005b90:	b140      	cbz	r0, 8005ba4 <_vfiprintf_r+0x198>
 8005b92:	2340      	movs	r3, #64	; 0x40
 8005b94:	eba0 000a 	sub.w	r0, r0, sl
 8005b98:	fa03 f000 	lsl.w	r0, r3, r0
 8005b9c:	9b04      	ldr	r3, [sp, #16]
 8005b9e:	3401      	adds	r4, #1
 8005ba0:	4303      	orrs	r3, r0
 8005ba2:	9304      	str	r3, [sp, #16]
 8005ba4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ba8:	2206      	movs	r2, #6
 8005baa:	482c      	ldr	r0, [pc, #176]	; (8005c5c <_vfiprintf_r+0x250>)
 8005bac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005bb0:	f000 fce8 	bl	8006584 <memchr>
 8005bb4:	2800      	cmp	r0, #0
 8005bb6:	d03f      	beq.n	8005c38 <_vfiprintf_r+0x22c>
 8005bb8:	4b29      	ldr	r3, [pc, #164]	; (8005c60 <_vfiprintf_r+0x254>)
 8005bba:	bb1b      	cbnz	r3, 8005c04 <_vfiprintf_r+0x1f8>
 8005bbc:	9b03      	ldr	r3, [sp, #12]
 8005bbe:	3307      	adds	r3, #7
 8005bc0:	f023 0307 	bic.w	r3, r3, #7
 8005bc4:	3308      	adds	r3, #8
 8005bc6:	9303      	str	r3, [sp, #12]
 8005bc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bca:	443b      	add	r3, r7
 8005bcc:	9309      	str	r3, [sp, #36]	; 0x24
 8005bce:	e767      	b.n	8005aa0 <_vfiprintf_r+0x94>
 8005bd0:	460c      	mov	r4, r1
 8005bd2:	2001      	movs	r0, #1
 8005bd4:	fb0c 3202 	mla	r2, ip, r2, r3
 8005bd8:	e7a5      	b.n	8005b26 <_vfiprintf_r+0x11a>
 8005bda:	2300      	movs	r3, #0
 8005bdc:	f04f 0c0a 	mov.w	ip, #10
 8005be0:	4619      	mov	r1, r3
 8005be2:	3401      	adds	r4, #1
 8005be4:	9305      	str	r3, [sp, #20]
 8005be6:	4620      	mov	r0, r4
 8005be8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005bec:	3a30      	subs	r2, #48	; 0x30
 8005bee:	2a09      	cmp	r2, #9
 8005bf0:	d903      	bls.n	8005bfa <_vfiprintf_r+0x1ee>
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d0c5      	beq.n	8005b82 <_vfiprintf_r+0x176>
 8005bf6:	9105      	str	r1, [sp, #20]
 8005bf8:	e7c3      	b.n	8005b82 <_vfiprintf_r+0x176>
 8005bfa:	4604      	mov	r4, r0
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c02:	e7f0      	b.n	8005be6 <_vfiprintf_r+0x1da>
 8005c04:	ab03      	add	r3, sp, #12
 8005c06:	9300      	str	r3, [sp, #0]
 8005c08:	462a      	mov	r2, r5
 8005c0a:	4630      	mov	r0, r6
 8005c0c:	4b15      	ldr	r3, [pc, #84]	; (8005c64 <_vfiprintf_r+0x258>)
 8005c0e:	a904      	add	r1, sp, #16
 8005c10:	f3af 8000 	nop.w
 8005c14:	4607      	mov	r7, r0
 8005c16:	1c78      	adds	r0, r7, #1
 8005c18:	d1d6      	bne.n	8005bc8 <_vfiprintf_r+0x1bc>
 8005c1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c1c:	07d9      	lsls	r1, r3, #31
 8005c1e:	d405      	bmi.n	8005c2c <_vfiprintf_r+0x220>
 8005c20:	89ab      	ldrh	r3, [r5, #12]
 8005c22:	059a      	lsls	r2, r3, #22
 8005c24:	d402      	bmi.n	8005c2c <_vfiprintf_r+0x220>
 8005c26:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c28:	f000 fc47 	bl	80064ba <__retarget_lock_release_recursive>
 8005c2c:	89ab      	ldrh	r3, [r5, #12]
 8005c2e:	065b      	lsls	r3, r3, #25
 8005c30:	f53f af12 	bmi.w	8005a58 <_vfiprintf_r+0x4c>
 8005c34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005c36:	e711      	b.n	8005a5c <_vfiprintf_r+0x50>
 8005c38:	ab03      	add	r3, sp, #12
 8005c3a:	9300      	str	r3, [sp, #0]
 8005c3c:	462a      	mov	r2, r5
 8005c3e:	4630      	mov	r0, r6
 8005c40:	4b08      	ldr	r3, [pc, #32]	; (8005c64 <_vfiprintf_r+0x258>)
 8005c42:	a904      	add	r1, sp, #16
 8005c44:	f000 f882 	bl	8005d4c <_printf_i>
 8005c48:	e7e4      	b.n	8005c14 <_vfiprintf_r+0x208>
 8005c4a:	bf00      	nop
 8005c4c:	08006ccc 	.word	0x08006ccc
 8005c50:	08006cec 	.word	0x08006cec
 8005c54:	08006cac 	.word	0x08006cac
 8005c58:	08006c76 	.word	0x08006c76
 8005c5c:	08006c80 	.word	0x08006c80
 8005c60:	00000000 	.word	0x00000000
 8005c64:	080059e7 	.word	0x080059e7
 8005c68:	08006c7c 	.word	0x08006c7c

08005c6c <_printf_common>:
 8005c6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c70:	4616      	mov	r6, r2
 8005c72:	4699      	mov	r9, r3
 8005c74:	688a      	ldr	r2, [r1, #8]
 8005c76:	690b      	ldr	r3, [r1, #16]
 8005c78:	4607      	mov	r7, r0
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	bfb8      	it	lt
 8005c7e:	4613      	movlt	r3, r2
 8005c80:	6033      	str	r3, [r6, #0]
 8005c82:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c86:	460c      	mov	r4, r1
 8005c88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c8c:	b10a      	cbz	r2, 8005c92 <_printf_common+0x26>
 8005c8e:	3301      	adds	r3, #1
 8005c90:	6033      	str	r3, [r6, #0]
 8005c92:	6823      	ldr	r3, [r4, #0]
 8005c94:	0699      	lsls	r1, r3, #26
 8005c96:	bf42      	ittt	mi
 8005c98:	6833      	ldrmi	r3, [r6, #0]
 8005c9a:	3302      	addmi	r3, #2
 8005c9c:	6033      	strmi	r3, [r6, #0]
 8005c9e:	6825      	ldr	r5, [r4, #0]
 8005ca0:	f015 0506 	ands.w	r5, r5, #6
 8005ca4:	d106      	bne.n	8005cb4 <_printf_common+0x48>
 8005ca6:	f104 0a19 	add.w	sl, r4, #25
 8005caa:	68e3      	ldr	r3, [r4, #12]
 8005cac:	6832      	ldr	r2, [r6, #0]
 8005cae:	1a9b      	subs	r3, r3, r2
 8005cb0:	42ab      	cmp	r3, r5
 8005cb2:	dc28      	bgt.n	8005d06 <_printf_common+0x9a>
 8005cb4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005cb8:	1e13      	subs	r3, r2, #0
 8005cba:	6822      	ldr	r2, [r4, #0]
 8005cbc:	bf18      	it	ne
 8005cbe:	2301      	movne	r3, #1
 8005cc0:	0692      	lsls	r2, r2, #26
 8005cc2:	d42d      	bmi.n	8005d20 <_printf_common+0xb4>
 8005cc4:	4649      	mov	r1, r9
 8005cc6:	4638      	mov	r0, r7
 8005cc8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ccc:	47c0      	blx	r8
 8005cce:	3001      	adds	r0, #1
 8005cd0:	d020      	beq.n	8005d14 <_printf_common+0xa8>
 8005cd2:	6823      	ldr	r3, [r4, #0]
 8005cd4:	68e5      	ldr	r5, [r4, #12]
 8005cd6:	f003 0306 	and.w	r3, r3, #6
 8005cda:	2b04      	cmp	r3, #4
 8005cdc:	bf18      	it	ne
 8005cde:	2500      	movne	r5, #0
 8005ce0:	6832      	ldr	r2, [r6, #0]
 8005ce2:	f04f 0600 	mov.w	r6, #0
 8005ce6:	68a3      	ldr	r3, [r4, #8]
 8005ce8:	bf08      	it	eq
 8005cea:	1aad      	subeq	r5, r5, r2
 8005cec:	6922      	ldr	r2, [r4, #16]
 8005cee:	bf08      	it	eq
 8005cf0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	bfc4      	itt	gt
 8005cf8:	1a9b      	subgt	r3, r3, r2
 8005cfa:	18ed      	addgt	r5, r5, r3
 8005cfc:	341a      	adds	r4, #26
 8005cfe:	42b5      	cmp	r5, r6
 8005d00:	d11a      	bne.n	8005d38 <_printf_common+0xcc>
 8005d02:	2000      	movs	r0, #0
 8005d04:	e008      	b.n	8005d18 <_printf_common+0xac>
 8005d06:	2301      	movs	r3, #1
 8005d08:	4652      	mov	r2, sl
 8005d0a:	4649      	mov	r1, r9
 8005d0c:	4638      	mov	r0, r7
 8005d0e:	47c0      	blx	r8
 8005d10:	3001      	adds	r0, #1
 8005d12:	d103      	bne.n	8005d1c <_printf_common+0xb0>
 8005d14:	f04f 30ff 	mov.w	r0, #4294967295
 8005d18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d1c:	3501      	adds	r5, #1
 8005d1e:	e7c4      	b.n	8005caa <_printf_common+0x3e>
 8005d20:	2030      	movs	r0, #48	; 0x30
 8005d22:	18e1      	adds	r1, r4, r3
 8005d24:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005d28:	1c5a      	adds	r2, r3, #1
 8005d2a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005d2e:	4422      	add	r2, r4
 8005d30:	3302      	adds	r3, #2
 8005d32:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005d36:	e7c5      	b.n	8005cc4 <_printf_common+0x58>
 8005d38:	2301      	movs	r3, #1
 8005d3a:	4622      	mov	r2, r4
 8005d3c:	4649      	mov	r1, r9
 8005d3e:	4638      	mov	r0, r7
 8005d40:	47c0      	blx	r8
 8005d42:	3001      	adds	r0, #1
 8005d44:	d0e6      	beq.n	8005d14 <_printf_common+0xa8>
 8005d46:	3601      	adds	r6, #1
 8005d48:	e7d9      	b.n	8005cfe <_printf_common+0x92>
	...

08005d4c <_printf_i>:
 8005d4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d50:	460c      	mov	r4, r1
 8005d52:	7e27      	ldrb	r7, [r4, #24]
 8005d54:	4691      	mov	r9, r2
 8005d56:	2f78      	cmp	r7, #120	; 0x78
 8005d58:	4680      	mov	r8, r0
 8005d5a:	469a      	mov	sl, r3
 8005d5c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005d5e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005d62:	d807      	bhi.n	8005d74 <_printf_i+0x28>
 8005d64:	2f62      	cmp	r7, #98	; 0x62
 8005d66:	d80a      	bhi.n	8005d7e <_printf_i+0x32>
 8005d68:	2f00      	cmp	r7, #0
 8005d6a:	f000 80d9 	beq.w	8005f20 <_printf_i+0x1d4>
 8005d6e:	2f58      	cmp	r7, #88	; 0x58
 8005d70:	f000 80a4 	beq.w	8005ebc <_printf_i+0x170>
 8005d74:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005d78:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005d7c:	e03a      	b.n	8005df4 <_printf_i+0xa8>
 8005d7e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005d82:	2b15      	cmp	r3, #21
 8005d84:	d8f6      	bhi.n	8005d74 <_printf_i+0x28>
 8005d86:	a001      	add	r0, pc, #4	; (adr r0, 8005d8c <_printf_i+0x40>)
 8005d88:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005d8c:	08005de5 	.word	0x08005de5
 8005d90:	08005df9 	.word	0x08005df9
 8005d94:	08005d75 	.word	0x08005d75
 8005d98:	08005d75 	.word	0x08005d75
 8005d9c:	08005d75 	.word	0x08005d75
 8005da0:	08005d75 	.word	0x08005d75
 8005da4:	08005df9 	.word	0x08005df9
 8005da8:	08005d75 	.word	0x08005d75
 8005dac:	08005d75 	.word	0x08005d75
 8005db0:	08005d75 	.word	0x08005d75
 8005db4:	08005d75 	.word	0x08005d75
 8005db8:	08005f07 	.word	0x08005f07
 8005dbc:	08005e29 	.word	0x08005e29
 8005dc0:	08005ee9 	.word	0x08005ee9
 8005dc4:	08005d75 	.word	0x08005d75
 8005dc8:	08005d75 	.word	0x08005d75
 8005dcc:	08005f29 	.word	0x08005f29
 8005dd0:	08005d75 	.word	0x08005d75
 8005dd4:	08005e29 	.word	0x08005e29
 8005dd8:	08005d75 	.word	0x08005d75
 8005ddc:	08005d75 	.word	0x08005d75
 8005de0:	08005ef1 	.word	0x08005ef1
 8005de4:	680b      	ldr	r3, [r1, #0]
 8005de6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005dea:	1d1a      	adds	r2, r3, #4
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	600a      	str	r2, [r1, #0]
 8005df0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005df4:	2301      	movs	r3, #1
 8005df6:	e0a4      	b.n	8005f42 <_printf_i+0x1f6>
 8005df8:	6825      	ldr	r5, [r4, #0]
 8005dfa:	6808      	ldr	r0, [r1, #0]
 8005dfc:	062e      	lsls	r6, r5, #24
 8005dfe:	f100 0304 	add.w	r3, r0, #4
 8005e02:	d50a      	bpl.n	8005e1a <_printf_i+0xce>
 8005e04:	6805      	ldr	r5, [r0, #0]
 8005e06:	600b      	str	r3, [r1, #0]
 8005e08:	2d00      	cmp	r5, #0
 8005e0a:	da03      	bge.n	8005e14 <_printf_i+0xc8>
 8005e0c:	232d      	movs	r3, #45	; 0x2d
 8005e0e:	426d      	negs	r5, r5
 8005e10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e14:	230a      	movs	r3, #10
 8005e16:	485e      	ldr	r0, [pc, #376]	; (8005f90 <_printf_i+0x244>)
 8005e18:	e019      	b.n	8005e4e <_printf_i+0x102>
 8005e1a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005e1e:	6805      	ldr	r5, [r0, #0]
 8005e20:	600b      	str	r3, [r1, #0]
 8005e22:	bf18      	it	ne
 8005e24:	b22d      	sxthne	r5, r5
 8005e26:	e7ef      	b.n	8005e08 <_printf_i+0xbc>
 8005e28:	680b      	ldr	r3, [r1, #0]
 8005e2a:	6825      	ldr	r5, [r4, #0]
 8005e2c:	1d18      	adds	r0, r3, #4
 8005e2e:	6008      	str	r0, [r1, #0]
 8005e30:	0628      	lsls	r0, r5, #24
 8005e32:	d501      	bpl.n	8005e38 <_printf_i+0xec>
 8005e34:	681d      	ldr	r5, [r3, #0]
 8005e36:	e002      	b.n	8005e3e <_printf_i+0xf2>
 8005e38:	0669      	lsls	r1, r5, #25
 8005e3a:	d5fb      	bpl.n	8005e34 <_printf_i+0xe8>
 8005e3c:	881d      	ldrh	r5, [r3, #0]
 8005e3e:	2f6f      	cmp	r7, #111	; 0x6f
 8005e40:	bf0c      	ite	eq
 8005e42:	2308      	moveq	r3, #8
 8005e44:	230a      	movne	r3, #10
 8005e46:	4852      	ldr	r0, [pc, #328]	; (8005f90 <_printf_i+0x244>)
 8005e48:	2100      	movs	r1, #0
 8005e4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005e4e:	6866      	ldr	r6, [r4, #4]
 8005e50:	2e00      	cmp	r6, #0
 8005e52:	bfa8      	it	ge
 8005e54:	6821      	ldrge	r1, [r4, #0]
 8005e56:	60a6      	str	r6, [r4, #8]
 8005e58:	bfa4      	itt	ge
 8005e5a:	f021 0104 	bicge.w	r1, r1, #4
 8005e5e:	6021      	strge	r1, [r4, #0]
 8005e60:	b90d      	cbnz	r5, 8005e66 <_printf_i+0x11a>
 8005e62:	2e00      	cmp	r6, #0
 8005e64:	d04d      	beq.n	8005f02 <_printf_i+0x1b6>
 8005e66:	4616      	mov	r6, r2
 8005e68:	fbb5 f1f3 	udiv	r1, r5, r3
 8005e6c:	fb03 5711 	mls	r7, r3, r1, r5
 8005e70:	5dc7      	ldrb	r7, [r0, r7]
 8005e72:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005e76:	462f      	mov	r7, r5
 8005e78:	42bb      	cmp	r3, r7
 8005e7a:	460d      	mov	r5, r1
 8005e7c:	d9f4      	bls.n	8005e68 <_printf_i+0x11c>
 8005e7e:	2b08      	cmp	r3, #8
 8005e80:	d10b      	bne.n	8005e9a <_printf_i+0x14e>
 8005e82:	6823      	ldr	r3, [r4, #0]
 8005e84:	07df      	lsls	r7, r3, #31
 8005e86:	d508      	bpl.n	8005e9a <_printf_i+0x14e>
 8005e88:	6923      	ldr	r3, [r4, #16]
 8005e8a:	6861      	ldr	r1, [r4, #4]
 8005e8c:	4299      	cmp	r1, r3
 8005e8e:	bfde      	ittt	le
 8005e90:	2330      	movle	r3, #48	; 0x30
 8005e92:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005e96:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005e9a:	1b92      	subs	r2, r2, r6
 8005e9c:	6122      	str	r2, [r4, #16]
 8005e9e:	464b      	mov	r3, r9
 8005ea0:	4621      	mov	r1, r4
 8005ea2:	4640      	mov	r0, r8
 8005ea4:	f8cd a000 	str.w	sl, [sp]
 8005ea8:	aa03      	add	r2, sp, #12
 8005eaa:	f7ff fedf 	bl	8005c6c <_printf_common>
 8005eae:	3001      	adds	r0, #1
 8005eb0:	d14c      	bne.n	8005f4c <_printf_i+0x200>
 8005eb2:	f04f 30ff 	mov.w	r0, #4294967295
 8005eb6:	b004      	add	sp, #16
 8005eb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ebc:	4834      	ldr	r0, [pc, #208]	; (8005f90 <_printf_i+0x244>)
 8005ebe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005ec2:	680e      	ldr	r6, [r1, #0]
 8005ec4:	6823      	ldr	r3, [r4, #0]
 8005ec6:	f856 5b04 	ldr.w	r5, [r6], #4
 8005eca:	061f      	lsls	r7, r3, #24
 8005ecc:	600e      	str	r6, [r1, #0]
 8005ece:	d514      	bpl.n	8005efa <_printf_i+0x1ae>
 8005ed0:	07d9      	lsls	r1, r3, #31
 8005ed2:	bf44      	itt	mi
 8005ed4:	f043 0320 	orrmi.w	r3, r3, #32
 8005ed8:	6023      	strmi	r3, [r4, #0]
 8005eda:	b91d      	cbnz	r5, 8005ee4 <_printf_i+0x198>
 8005edc:	6823      	ldr	r3, [r4, #0]
 8005ede:	f023 0320 	bic.w	r3, r3, #32
 8005ee2:	6023      	str	r3, [r4, #0]
 8005ee4:	2310      	movs	r3, #16
 8005ee6:	e7af      	b.n	8005e48 <_printf_i+0xfc>
 8005ee8:	6823      	ldr	r3, [r4, #0]
 8005eea:	f043 0320 	orr.w	r3, r3, #32
 8005eee:	6023      	str	r3, [r4, #0]
 8005ef0:	2378      	movs	r3, #120	; 0x78
 8005ef2:	4828      	ldr	r0, [pc, #160]	; (8005f94 <_printf_i+0x248>)
 8005ef4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005ef8:	e7e3      	b.n	8005ec2 <_printf_i+0x176>
 8005efa:	065e      	lsls	r6, r3, #25
 8005efc:	bf48      	it	mi
 8005efe:	b2ad      	uxthmi	r5, r5
 8005f00:	e7e6      	b.n	8005ed0 <_printf_i+0x184>
 8005f02:	4616      	mov	r6, r2
 8005f04:	e7bb      	b.n	8005e7e <_printf_i+0x132>
 8005f06:	680b      	ldr	r3, [r1, #0]
 8005f08:	6826      	ldr	r6, [r4, #0]
 8005f0a:	1d1d      	adds	r5, r3, #4
 8005f0c:	6960      	ldr	r0, [r4, #20]
 8005f0e:	600d      	str	r5, [r1, #0]
 8005f10:	0635      	lsls	r5, r6, #24
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	d501      	bpl.n	8005f1a <_printf_i+0x1ce>
 8005f16:	6018      	str	r0, [r3, #0]
 8005f18:	e002      	b.n	8005f20 <_printf_i+0x1d4>
 8005f1a:	0671      	lsls	r1, r6, #25
 8005f1c:	d5fb      	bpl.n	8005f16 <_printf_i+0x1ca>
 8005f1e:	8018      	strh	r0, [r3, #0]
 8005f20:	2300      	movs	r3, #0
 8005f22:	4616      	mov	r6, r2
 8005f24:	6123      	str	r3, [r4, #16]
 8005f26:	e7ba      	b.n	8005e9e <_printf_i+0x152>
 8005f28:	680b      	ldr	r3, [r1, #0]
 8005f2a:	1d1a      	adds	r2, r3, #4
 8005f2c:	600a      	str	r2, [r1, #0]
 8005f2e:	681e      	ldr	r6, [r3, #0]
 8005f30:	2100      	movs	r1, #0
 8005f32:	4630      	mov	r0, r6
 8005f34:	6862      	ldr	r2, [r4, #4]
 8005f36:	f000 fb25 	bl	8006584 <memchr>
 8005f3a:	b108      	cbz	r0, 8005f40 <_printf_i+0x1f4>
 8005f3c:	1b80      	subs	r0, r0, r6
 8005f3e:	6060      	str	r0, [r4, #4]
 8005f40:	6863      	ldr	r3, [r4, #4]
 8005f42:	6123      	str	r3, [r4, #16]
 8005f44:	2300      	movs	r3, #0
 8005f46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f4a:	e7a8      	b.n	8005e9e <_printf_i+0x152>
 8005f4c:	4632      	mov	r2, r6
 8005f4e:	4649      	mov	r1, r9
 8005f50:	4640      	mov	r0, r8
 8005f52:	6923      	ldr	r3, [r4, #16]
 8005f54:	47d0      	blx	sl
 8005f56:	3001      	adds	r0, #1
 8005f58:	d0ab      	beq.n	8005eb2 <_printf_i+0x166>
 8005f5a:	6823      	ldr	r3, [r4, #0]
 8005f5c:	079b      	lsls	r3, r3, #30
 8005f5e:	d413      	bmi.n	8005f88 <_printf_i+0x23c>
 8005f60:	68e0      	ldr	r0, [r4, #12]
 8005f62:	9b03      	ldr	r3, [sp, #12]
 8005f64:	4298      	cmp	r0, r3
 8005f66:	bfb8      	it	lt
 8005f68:	4618      	movlt	r0, r3
 8005f6a:	e7a4      	b.n	8005eb6 <_printf_i+0x16a>
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	4632      	mov	r2, r6
 8005f70:	4649      	mov	r1, r9
 8005f72:	4640      	mov	r0, r8
 8005f74:	47d0      	blx	sl
 8005f76:	3001      	adds	r0, #1
 8005f78:	d09b      	beq.n	8005eb2 <_printf_i+0x166>
 8005f7a:	3501      	adds	r5, #1
 8005f7c:	68e3      	ldr	r3, [r4, #12]
 8005f7e:	9903      	ldr	r1, [sp, #12]
 8005f80:	1a5b      	subs	r3, r3, r1
 8005f82:	42ab      	cmp	r3, r5
 8005f84:	dcf2      	bgt.n	8005f6c <_printf_i+0x220>
 8005f86:	e7eb      	b.n	8005f60 <_printf_i+0x214>
 8005f88:	2500      	movs	r5, #0
 8005f8a:	f104 0619 	add.w	r6, r4, #25
 8005f8e:	e7f5      	b.n	8005f7c <_printf_i+0x230>
 8005f90:	08006c87 	.word	0x08006c87
 8005f94:	08006c98 	.word	0x08006c98

08005f98 <_sbrk_r>:
 8005f98:	b538      	push	{r3, r4, r5, lr}
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	4d05      	ldr	r5, [pc, #20]	; (8005fb4 <_sbrk_r+0x1c>)
 8005f9e:	4604      	mov	r4, r0
 8005fa0:	4608      	mov	r0, r1
 8005fa2:	602b      	str	r3, [r5, #0]
 8005fa4:	f000 fc30 	bl	8006808 <_sbrk>
 8005fa8:	1c43      	adds	r3, r0, #1
 8005faa:	d102      	bne.n	8005fb2 <_sbrk_r+0x1a>
 8005fac:	682b      	ldr	r3, [r5, #0]
 8005fae:	b103      	cbz	r3, 8005fb2 <_sbrk_r+0x1a>
 8005fb0:	6023      	str	r3, [r4, #0]
 8005fb2:	bd38      	pop	{r3, r4, r5, pc}
 8005fb4:	200002b4 	.word	0x200002b4

08005fb8 <__swbuf_r>:
 8005fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fba:	460e      	mov	r6, r1
 8005fbc:	4614      	mov	r4, r2
 8005fbe:	4605      	mov	r5, r0
 8005fc0:	b118      	cbz	r0, 8005fca <__swbuf_r+0x12>
 8005fc2:	6983      	ldr	r3, [r0, #24]
 8005fc4:	b90b      	cbnz	r3, 8005fca <__swbuf_r+0x12>
 8005fc6:	f000 f9d9 	bl	800637c <__sinit>
 8005fca:	4b21      	ldr	r3, [pc, #132]	; (8006050 <__swbuf_r+0x98>)
 8005fcc:	429c      	cmp	r4, r3
 8005fce:	d12b      	bne.n	8006028 <__swbuf_r+0x70>
 8005fd0:	686c      	ldr	r4, [r5, #4]
 8005fd2:	69a3      	ldr	r3, [r4, #24]
 8005fd4:	60a3      	str	r3, [r4, #8]
 8005fd6:	89a3      	ldrh	r3, [r4, #12]
 8005fd8:	071a      	lsls	r2, r3, #28
 8005fda:	d52f      	bpl.n	800603c <__swbuf_r+0x84>
 8005fdc:	6923      	ldr	r3, [r4, #16]
 8005fde:	b36b      	cbz	r3, 800603c <__swbuf_r+0x84>
 8005fe0:	6923      	ldr	r3, [r4, #16]
 8005fe2:	6820      	ldr	r0, [r4, #0]
 8005fe4:	b2f6      	uxtb	r6, r6
 8005fe6:	1ac0      	subs	r0, r0, r3
 8005fe8:	6963      	ldr	r3, [r4, #20]
 8005fea:	4637      	mov	r7, r6
 8005fec:	4283      	cmp	r3, r0
 8005fee:	dc04      	bgt.n	8005ffa <__swbuf_r+0x42>
 8005ff0:	4621      	mov	r1, r4
 8005ff2:	4628      	mov	r0, r5
 8005ff4:	f000 f92e 	bl	8006254 <_fflush_r>
 8005ff8:	bb30      	cbnz	r0, 8006048 <__swbuf_r+0x90>
 8005ffa:	68a3      	ldr	r3, [r4, #8]
 8005ffc:	3001      	adds	r0, #1
 8005ffe:	3b01      	subs	r3, #1
 8006000:	60a3      	str	r3, [r4, #8]
 8006002:	6823      	ldr	r3, [r4, #0]
 8006004:	1c5a      	adds	r2, r3, #1
 8006006:	6022      	str	r2, [r4, #0]
 8006008:	701e      	strb	r6, [r3, #0]
 800600a:	6963      	ldr	r3, [r4, #20]
 800600c:	4283      	cmp	r3, r0
 800600e:	d004      	beq.n	800601a <__swbuf_r+0x62>
 8006010:	89a3      	ldrh	r3, [r4, #12]
 8006012:	07db      	lsls	r3, r3, #31
 8006014:	d506      	bpl.n	8006024 <__swbuf_r+0x6c>
 8006016:	2e0a      	cmp	r6, #10
 8006018:	d104      	bne.n	8006024 <__swbuf_r+0x6c>
 800601a:	4621      	mov	r1, r4
 800601c:	4628      	mov	r0, r5
 800601e:	f000 f919 	bl	8006254 <_fflush_r>
 8006022:	b988      	cbnz	r0, 8006048 <__swbuf_r+0x90>
 8006024:	4638      	mov	r0, r7
 8006026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006028:	4b0a      	ldr	r3, [pc, #40]	; (8006054 <__swbuf_r+0x9c>)
 800602a:	429c      	cmp	r4, r3
 800602c:	d101      	bne.n	8006032 <__swbuf_r+0x7a>
 800602e:	68ac      	ldr	r4, [r5, #8]
 8006030:	e7cf      	b.n	8005fd2 <__swbuf_r+0x1a>
 8006032:	4b09      	ldr	r3, [pc, #36]	; (8006058 <__swbuf_r+0xa0>)
 8006034:	429c      	cmp	r4, r3
 8006036:	bf08      	it	eq
 8006038:	68ec      	ldreq	r4, [r5, #12]
 800603a:	e7ca      	b.n	8005fd2 <__swbuf_r+0x1a>
 800603c:	4621      	mov	r1, r4
 800603e:	4628      	mov	r0, r5
 8006040:	f000 f80c 	bl	800605c <__swsetup_r>
 8006044:	2800      	cmp	r0, #0
 8006046:	d0cb      	beq.n	8005fe0 <__swbuf_r+0x28>
 8006048:	f04f 37ff 	mov.w	r7, #4294967295
 800604c:	e7ea      	b.n	8006024 <__swbuf_r+0x6c>
 800604e:	bf00      	nop
 8006050:	08006ccc 	.word	0x08006ccc
 8006054:	08006cec 	.word	0x08006cec
 8006058:	08006cac 	.word	0x08006cac

0800605c <__swsetup_r>:
 800605c:	4b32      	ldr	r3, [pc, #200]	; (8006128 <__swsetup_r+0xcc>)
 800605e:	b570      	push	{r4, r5, r6, lr}
 8006060:	681d      	ldr	r5, [r3, #0]
 8006062:	4606      	mov	r6, r0
 8006064:	460c      	mov	r4, r1
 8006066:	b125      	cbz	r5, 8006072 <__swsetup_r+0x16>
 8006068:	69ab      	ldr	r3, [r5, #24]
 800606a:	b913      	cbnz	r3, 8006072 <__swsetup_r+0x16>
 800606c:	4628      	mov	r0, r5
 800606e:	f000 f985 	bl	800637c <__sinit>
 8006072:	4b2e      	ldr	r3, [pc, #184]	; (800612c <__swsetup_r+0xd0>)
 8006074:	429c      	cmp	r4, r3
 8006076:	d10f      	bne.n	8006098 <__swsetup_r+0x3c>
 8006078:	686c      	ldr	r4, [r5, #4]
 800607a:	89a3      	ldrh	r3, [r4, #12]
 800607c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006080:	0719      	lsls	r1, r3, #28
 8006082:	d42c      	bmi.n	80060de <__swsetup_r+0x82>
 8006084:	06dd      	lsls	r5, r3, #27
 8006086:	d411      	bmi.n	80060ac <__swsetup_r+0x50>
 8006088:	2309      	movs	r3, #9
 800608a:	6033      	str	r3, [r6, #0]
 800608c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006090:	f04f 30ff 	mov.w	r0, #4294967295
 8006094:	81a3      	strh	r3, [r4, #12]
 8006096:	e03e      	b.n	8006116 <__swsetup_r+0xba>
 8006098:	4b25      	ldr	r3, [pc, #148]	; (8006130 <__swsetup_r+0xd4>)
 800609a:	429c      	cmp	r4, r3
 800609c:	d101      	bne.n	80060a2 <__swsetup_r+0x46>
 800609e:	68ac      	ldr	r4, [r5, #8]
 80060a0:	e7eb      	b.n	800607a <__swsetup_r+0x1e>
 80060a2:	4b24      	ldr	r3, [pc, #144]	; (8006134 <__swsetup_r+0xd8>)
 80060a4:	429c      	cmp	r4, r3
 80060a6:	bf08      	it	eq
 80060a8:	68ec      	ldreq	r4, [r5, #12]
 80060aa:	e7e6      	b.n	800607a <__swsetup_r+0x1e>
 80060ac:	0758      	lsls	r0, r3, #29
 80060ae:	d512      	bpl.n	80060d6 <__swsetup_r+0x7a>
 80060b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80060b2:	b141      	cbz	r1, 80060c6 <__swsetup_r+0x6a>
 80060b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80060b8:	4299      	cmp	r1, r3
 80060ba:	d002      	beq.n	80060c2 <__swsetup_r+0x66>
 80060bc:	4630      	mov	r0, r6
 80060be:	f7ff fbd7 	bl	8005870 <_free_r>
 80060c2:	2300      	movs	r3, #0
 80060c4:	6363      	str	r3, [r4, #52]	; 0x34
 80060c6:	89a3      	ldrh	r3, [r4, #12]
 80060c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80060cc:	81a3      	strh	r3, [r4, #12]
 80060ce:	2300      	movs	r3, #0
 80060d0:	6063      	str	r3, [r4, #4]
 80060d2:	6923      	ldr	r3, [r4, #16]
 80060d4:	6023      	str	r3, [r4, #0]
 80060d6:	89a3      	ldrh	r3, [r4, #12]
 80060d8:	f043 0308 	orr.w	r3, r3, #8
 80060dc:	81a3      	strh	r3, [r4, #12]
 80060de:	6923      	ldr	r3, [r4, #16]
 80060e0:	b94b      	cbnz	r3, 80060f6 <__swsetup_r+0x9a>
 80060e2:	89a3      	ldrh	r3, [r4, #12]
 80060e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80060e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060ec:	d003      	beq.n	80060f6 <__swsetup_r+0x9a>
 80060ee:	4621      	mov	r1, r4
 80060f0:	4630      	mov	r0, r6
 80060f2:	f000 fa07 	bl	8006504 <__smakebuf_r>
 80060f6:	89a0      	ldrh	r0, [r4, #12]
 80060f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80060fc:	f010 0301 	ands.w	r3, r0, #1
 8006100:	d00a      	beq.n	8006118 <__swsetup_r+0xbc>
 8006102:	2300      	movs	r3, #0
 8006104:	60a3      	str	r3, [r4, #8]
 8006106:	6963      	ldr	r3, [r4, #20]
 8006108:	425b      	negs	r3, r3
 800610a:	61a3      	str	r3, [r4, #24]
 800610c:	6923      	ldr	r3, [r4, #16]
 800610e:	b943      	cbnz	r3, 8006122 <__swsetup_r+0xc6>
 8006110:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006114:	d1ba      	bne.n	800608c <__swsetup_r+0x30>
 8006116:	bd70      	pop	{r4, r5, r6, pc}
 8006118:	0781      	lsls	r1, r0, #30
 800611a:	bf58      	it	pl
 800611c:	6963      	ldrpl	r3, [r4, #20]
 800611e:	60a3      	str	r3, [r4, #8]
 8006120:	e7f4      	b.n	800610c <__swsetup_r+0xb0>
 8006122:	2000      	movs	r0, #0
 8006124:	e7f7      	b.n	8006116 <__swsetup_r+0xba>
 8006126:	bf00      	nop
 8006128:	20000074 	.word	0x20000074
 800612c:	08006ccc 	.word	0x08006ccc
 8006130:	08006cec 	.word	0x08006cec
 8006134:	08006cac 	.word	0x08006cac

08006138 <abort>:
 8006138:	2006      	movs	r0, #6
 800613a:	b508      	push	{r3, lr}
 800613c:	f000 fa64 	bl	8006608 <raise>
 8006140:	2001      	movs	r0, #1
 8006142:	f000 fb77 	bl	8006834 <_exit>
	...

08006148 <__sflush_r>:
 8006148:	898a      	ldrh	r2, [r1, #12]
 800614a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800614e:	4605      	mov	r5, r0
 8006150:	0710      	lsls	r0, r2, #28
 8006152:	460c      	mov	r4, r1
 8006154:	d458      	bmi.n	8006208 <__sflush_r+0xc0>
 8006156:	684b      	ldr	r3, [r1, #4]
 8006158:	2b00      	cmp	r3, #0
 800615a:	dc05      	bgt.n	8006168 <__sflush_r+0x20>
 800615c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800615e:	2b00      	cmp	r3, #0
 8006160:	dc02      	bgt.n	8006168 <__sflush_r+0x20>
 8006162:	2000      	movs	r0, #0
 8006164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006168:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800616a:	2e00      	cmp	r6, #0
 800616c:	d0f9      	beq.n	8006162 <__sflush_r+0x1a>
 800616e:	2300      	movs	r3, #0
 8006170:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006174:	682f      	ldr	r7, [r5, #0]
 8006176:	602b      	str	r3, [r5, #0]
 8006178:	d032      	beq.n	80061e0 <__sflush_r+0x98>
 800617a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800617c:	89a3      	ldrh	r3, [r4, #12]
 800617e:	075a      	lsls	r2, r3, #29
 8006180:	d505      	bpl.n	800618e <__sflush_r+0x46>
 8006182:	6863      	ldr	r3, [r4, #4]
 8006184:	1ac0      	subs	r0, r0, r3
 8006186:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006188:	b10b      	cbz	r3, 800618e <__sflush_r+0x46>
 800618a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800618c:	1ac0      	subs	r0, r0, r3
 800618e:	2300      	movs	r3, #0
 8006190:	4602      	mov	r2, r0
 8006192:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006194:	4628      	mov	r0, r5
 8006196:	6a21      	ldr	r1, [r4, #32]
 8006198:	47b0      	blx	r6
 800619a:	1c43      	adds	r3, r0, #1
 800619c:	89a3      	ldrh	r3, [r4, #12]
 800619e:	d106      	bne.n	80061ae <__sflush_r+0x66>
 80061a0:	6829      	ldr	r1, [r5, #0]
 80061a2:	291d      	cmp	r1, #29
 80061a4:	d82c      	bhi.n	8006200 <__sflush_r+0xb8>
 80061a6:	4a2a      	ldr	r2, [pc, #168]	; (8006250 <__sflush_r+0x108>)
 80061a8:	40ca      	lsrs	r2, r1
 80061aa:	07d6      	lsls	r6, r2, #31
 80061ac:	d528      	bpl.n	8006200 <__sflush_r+0xb8>
 80061ae:	2200      	movs	r2, #0
 80061b0:	6062      	str	r2, [r4, #4]
 80061b2:	6922      	ldr	r2, [r4, #16]
 80061b4:	04d9      	lsls	r1, r3, #19
 80061b6:	6022      	str	r2, [r4, #0]
 80061b8:	d504      	bpl.n	80061c4 <__sflush_r+0x7c>
 80061ba:	1c42      	adds	r2, r0, #1
 80061bc:	d101      	bne.n	80061c2 <__sflush_r+0x7a>
 80061be:	682b      	ldr	r3, [r5, #0]
 80061c0:	b903      	cbnz	r3, 80061c4 <__sflush_r+0x7c>
 80061c2:	6560      	str	r0, [r4, #84]	; 0x54
 80061c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80061c6:	602f      	str	r7, [r5, #0]
 80061c8:	2900      	cmp	r1, #0
 80061ca:	d0ca      	beq.n	8006162 <__sflush_r+0x1a>
 80061cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80061d0:	4299      	cmp	r1, r3
 80061d2:	d002      	beq.n	80061da <__sflush_r+0x92>
 80061d4:	4628      	mov	r0, r5
 80061d6:	f7ff fb4b 	bl	8005870 <_free_r>
 80061da:	2000      	movs	r0, #0
 80061dc:	6360      	str	r0, [r4, #52]	; 0x34
 80061de:	e7c1      	b.n	8006164 <__sflush_r+0x1c>
 80061e0:	6a21      	ldr	r1, [r4, #32]
 80061e2:	2301      	movs	r3, #1
 80061e4:	4628      	mov	r0, r5
 80061e6:	47b0      	blx	r6
 80061e8:	1c41      	adds	r1, r0, #1
 80061ea:	d1c7      	bne.n	800617c <__sflush_r+0x34>
 80061ec:	682b      	ldr	r3, [r5, #0]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d0c4      	beq.n	800617c <__sflush_r+0x34>
 80061f2:	2b1d      	cmp	r3, #29
 80061f4:	d001      	beq.n	80061fa <__sflush_r+0xb2>
 80061f6:	2b16      	cmp	r3, #22
 80061f8:	d101      	bne.n	80061fe <__sflush_r+0xb6>
 80061fa:	602f      	str	r7, [r5, #0]
 80061fc:	e7b1      	b.n	8006162 <__sflush_r+0x1a>
 80061fe:	89a3      	ldrh	r3, [r4, #12]
 8006200:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006204:	81a3      	strh	r3, [r4, #12]
 8006206:	e7ad      	b.n	8006164 <__sflush_r+0x1c>
 8006208:	690f      	ldr	r7, [r1, #16]
 800620a:	2f00      	cmp	r7, #0
 800620c:	d0a9      	beq.n	8006162 <__sflush_r+0x1a>
 800620e:	0793      	lsls	r3, r2, #30
 8006210:	bf18      	it	ne
 8006212:	2300      	movne	r3, #0
 8006214:	680e      	ldr	r6, [r1, #0]
 8006216:	bf08      	it	eq
 8006218:	694b      	ldreq	r3, [r1, #20]
 800621a:	eba6 0807 	sub.w	r8, r6, r7
 800621e:	600f      	str	r7, [r1, #0]
 8006220:	608b      	str	r3, [r1, #8]
 8006222:	f1b8 0f00 	cmp.w	r8, #0
 8006226:	dd9c      	ble.n	8006162 <__sflush_r+0x1a>
 8006228:	4643      	mov	r3, r8
 800622a:	463a      	mov	r2, r7
 800622c:	4628      	mov	r0, r5
 800622e:	6a21      	ldr	r1, [r4, #32]
 8006230:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006232:	47b0      	blx	r6
 8006234:	2800      	cmp	r0, #0
 8006236:	dc06      	bgt.n	8006246 <__sflush_r+0xfe>
 8006238:	89a3      	ldrh	r3, [r4, #12]
 800623a:	f04f 30ff 	mov.w	r0, #4294967295
 800623e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006242:	81a3      	strh	r3, [r4, #12]
 8006244:	e78e      	b.n	8006164 <__sflush_r+0x1c>
 8006246:	4407      	add	r7, r0
 8006248:	eba8 0800 	sub.w	r8, r8, r0
 800624c:	e7e9      	b.n	8006222 <__sflush_r+0xda>
 800624e:	bf00      	nop
 8006250:	20400001 	.word	0x20400001

08006254 <_fflush_r>:
 8006254:	b538      	push	{r3, r4, r5, lr}
 8006256:	690b      	ldr	r3, [r1, #16]
 8006258:	4605      	mov	r5, r0
 800625a:	460c      	mov	r4, r1
 800625c:	b913      	cbnz	r3, 8006264 <_fflush_r+0x10>
 800625e:	2500      	movs	r5, #0
 8006260:	4628      	mov	r0, r5
 8006262:	bd38      	pop	{r3, r4, r5, pc}
 8006264:	b118      	cbz	r0, 800626e <_fflush_r+0x1a>
 8006266:	6983      	ldr	r3, [r0, #24]
 8006268:	b90b      	cbnz	r3, 800626e <_fflush_r+0x1a>
 800626a:	f000 f887 	bl	800637c <__sinit>
 800626e:	4b14      	ldr	r3, [pc, #80]	; (80062c0 <_fflush_r+0x6c>)
 8006270:	429c      	cmp	r4, r3
 8006272:	d11b      	bne.n	80062ac <_fflush_r+0x58>
 8006274:	686c      	ldr	r4, [r5, #4]
 8006276:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d0ef      	beq.n	800625e <_fflush_r+0xa>
 800627e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006280:	07d0      	lsls	r0, r2, #31
 8006282:	d404      	bmi.n	800628e <_fflush_r+0x3a>
 8006284:	0599      	lsls	r1, r3, #22
 8006286:	d402      	bmi.n	800628e <_fflush_r+0x3a>
 8006288:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800628a:	f000 f915 	bl	80064b8 <__retarget_lock_acquire_recursive>
 800628e:	4628      	mov	r0, r5
 8006290:	4621      	mov	r1, r4
 8006292:	f7ff ff59 	bl	8006148 <__sflush_r>
 8006296:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006298:	4605      	mov	r5, r0
 800629a:	07da      	lsls	r2, r3, #31
 800629c:	d4e0      	bmi.n	8006260 <_fflush_r+0xc>
 800629e:	89a3      	ldrh	r3, [r4, #12]
 80062a0:	059b      	lsls	r3, r3, #22
 80062a2:	d4dd      	bmi.n	8006260 <_fflush_r+0xc>
 80062a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80062a6:	f000 f908 	bl	80064ba <__retarget_lock_release_recursive>
 80062aa:	e7d9      	b.n	8006260 <_fflush_r+0xc>
 80062ac:	4b05      	ldr	r3, [pc, #20]	; (80062c4 <_fflush_r+0x70>)
 80062ae:	429c      	cmp	r4, r3
 80062b0:	d101      	bne.n	80062b6 <_fflush_r+0x62>
 80062b2:	68ac      	ldr	r4, [r5, #8]
 80062b4:	e7df      	b.n	8006276 <_fflush_r+0x22>
 80062b6:	4b04      	ldr	r3, [pc, #16]	; (80062c8 <_fflush_r+0x74>)
 80062b8:	429c      	cmp	r4, r3
 80062ba:	bf08      	it	eq
 80062bc:	68ec      	ldreq	r4, [r5, #12]
 80062be:	e7da      	b.n	8006276 <_fflush_r+0x22>
 80062c0:	08006ccc 	.word	0x08006ccc
 80062c4:	08006cec 	.word	0x08006cec
 80062c8:	08006cac 	.word	0x08006cac

080062cc <std>:
 80062cc:	2300      	movs	r3, #0
 80062ce:	b510      	push	{r4, lr}
 80062d0:	4604      	mov	r4, r0
 80062d2:	e9c0 3300 	strd	r3, r3, [r0]
 80062d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80062da:	6083      	str	r3, [r0, #8]
 80062dc:	8181      	strh	r1, [r0, #12]
 80062de:	6643      	str	r3, [r0, #100]	; 0x64
 80062e0:	81c2      	strh	r2, [r0, #14]
 80062e2:	6183      	str	r3, [r0, #24]
 80062e4:	4619      	mov	r1, r3
 80062e6:	2208      	movs	r2, #8
 80062e8:	305c      	adds	r0, #92	; 0x5c
 80062ea:	f7ff fa13 	bl	8005714 <memset>
 80062ee:	4b05      	ldr	r3, [pc, #20]	; (8006304 <std+0x38>)
 80062f0:	6224      	str	r4, [r4, #32]
 80062f2:	6263      	str	r3, [r4, #36]	; 0x24
 80062f4:	4b04      	ldr	r3, [pc, #16]	; (8006308 <std+0x3c>)
 80062f6:	62a3      	str	r3, [r4, #40]	; 0x28
 80062f8:	4b04      	ldr	r3, [pc, #16]	; (800630c <std+0x40>)
 80062fa:	62e3      	str	r3, [r4, #44]	; 0x2c
 80062fc:	4b04      	ldr	r3, [pc, #16]	; (8006310 <std+0x44>)
 80062fe:	6323      	str	r3, [r4, #48]	; 0x30
 8006300:	bd10      	pop	{r4, pc}
 8006302:	bf00      	nop
 8006304:	08006641 	.word	0x08006641
 8006308:	08006663 	.word	0x08006663
 800630c:	0800669b 	.word	0x0800669b
 8006310:	080066bf 	.word	0x080066bf

08006314 <_cleanup_r>:
 8006314:	4901      	ldr	r1, [pc, #4]	; (800631c <_cleanup_r+0x8>)
 8006316:	f000 b8af 	b.w	8006478 <_fwalk_reent>
 800631a:	bf00      	nop
 800631c:	08006255 	.word	0x08006255

08006320 <__sfmoreglue>:
 8006320:	b570      	push	{r4, r5, r6, lr}
 8006322:	2568      	movs	r5, #104	; 0x68
 8006324:	1e4a      	subs	r2, r1, #1
 8006326:	4355      	muls	r5, r2
 8006328:	460e      	mov	r6, r1
 800632a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800632e:	f7ff faeb 	bl	8005908 <_malloc_r>
 8006332:	4604      	mov	r4, r0
 8006334:	b140      	cbz	r0, 8006348 <__sfmoreglue+0x28>
 8006336:	2100      	movs	r1, #0
 8006338:	e9c0 1600 	strd	r1, r6, [r0]
 800633c:	300c      	adds	r0, #12
 800633e:	60a0      	str	r0, [r4, #8]
 8006340:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006344:	f7ff f9e6 	bl	8005714 <memset>
 8006348:	4620      	mov	r0, r4
 800634a:	bd70      	pop	{r4, r5, r6, pc}

0800634c <__sfp_lock_acquire>:
 800634c:	4801      	ldr	r0, [pc, #4]	; (8006354 <__sfp_lock_acquire+0x8>)
 800634e:	f000 b8b3 	b.w	80064b8 <__retarget_lock_acquire_recursive>
 8006352:	bf00      	nop
 8006354:	200002b0 	.word	0x200002b0

08006358 <__sfp_lock_release>:
 8006358:	4801      	ldr	r0, [pc, #4]	; (8006360 <__sfp_lock_release+0x8>)
 800635a:	f000 b8ae 	b.w	80064ba <__retarget_lock_release_recursive>
 800635e:	bf00      	nop
 8006360:	200002b0 	.word	0x200002b0

08006364 <__sinit_lock_acquire>:
 8006364:	4801      	ldr	r0, [pc, #4]	; (800636c <__sinit_lock_acquire+0x8>)
 8006366:	f000 b8a7 	b.w	80064b8 <__retarget_lock_acquire_recursive>
 800636a:	bf00      	nop
 800636c:	200002ab 	.word	0x200002ab

08006370 <__sinit_lock_release>:
 8006370:	4801      	ldr	r0, [pc, #4]	; (8006378 <__sinit_lock_release+0x8>)
 8006372:	f000 b8a2 	b.w	80064ba <__retarget_lock_release_recursive>
 8006376:	bf00      	nop
 8006378:	200002ab 	.word	0x200002ab

0800637c <__sinit>:
 800637c:	b510      	push	{r4, lr}
 800637e:	4604      	mov	r4, r0
 8006380:	f7ff fff0 	bl	8006364 <__sinit_lock_acquire>
 8006384:	69a3      	ldr	r3, [r4, #24]
 8006386:	b11b      	cbz	r3, 8006390 <__sinit+0x14>
 8006388:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800638c:	f7ff bff0 	b.w	8006370 <__sinit_lock_release>
 8006390:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006394:	6523      	str	r3, [r4, #80]	; 0x50
 8006396:	4b13      	ldr	r3, [pc, #76]	; (80063e4 <__sinit+0x68>)
 8006398:	4a13      	ldr	r2, [pc, #76]	; (80063e8 <__sinit+0x6c>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	62a2      	str	r2, [r4, #40]	; 0x28
 800639e:	42a3      	cmp	r3, r4
 80063a0:	bf08      	it	eq
 80063a2:	2301      	moveq	r3, #1
 80063a4:	4620      	mov	r0, r4
 80063a6:	bf08      	it	eq
 80063a8:	61a3      	streq	r3, [r4, #24]
 80063aa:	f000 f81f 	bl	80063ec <__sfp>
 80063ae:	6060      	str	r0, [r4, #4]
 80063b0:	4620      	mov	r0, r4
 80063b2:	f000 f81b 	bl	80063ec <__sfp>
 80063b6:	60a0      	str	r0, [r4, #8]
 80063b8:	4620      	mov	r0, r4
 80063ba:	f000 f817 	bl	80063ec <__sfp>
 80063be:	2200      	movs	r2, #0
 80063c0:	2104      	movs	r1, #4
 80063c2:	60e0      	str	r0, [r4, #12]
 80063c4:	6860      	ldr	r0, [r4, #4]
 80063c6:	f7ff ff81 	bl	80062cc <std>
 80063ca:	2201      	movs	r2, #1
 80063cc:	2109      	movs	r1, #9
 80063ce:	68a0      	ldr	r0, [r4, #8]
 80063d0:	f7ff ff7c 	bl	80062cc <std>
 80063d4:	2202      	movs	r2, #2
 80063d6:	2112      	movs	r1, #18
 80063d8:	68e0      	ldr	r0, [r4, #12]
 80063da:	f7ff ff77 	bl	80062cc <std>
 80063de:	2301      	movs	r3, #1
 80063e0:	61a3      	str	r3, [r4, #24]
 80063e2:	e7d1      	b.n	8006388 <__sinit+0xc>
 80063e4:	08006bc0 	.word	0x08006bc0
 80063e8:	08006315 	.word	0x08006315

080063ec <__sfp>:
 80063ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063ee:	4607      	mov	r7, r0
 80063f0:	f7ff ffac 	bl	800634c <__sfp_lock_acquire>
 80063f4:	4b1e      	ldr	r3, [pc, #120]	; (8006470 <__sfp+0x84>)
 80063f6:	681e      	ldr	r6, [r3, #0]
 80063f8:	69b3      	ldr	r3, [r6, #24]
 80063fa:	b913      	cbnz	r3, 8006402 <__sfp+0x16>
 80063fc:	4630      	mov	r0, r6
 80063fe:	f7ff ffbd 	bl	800637c <__sinit>
 8006402:	3648      	adds	r6, #72	; 0x48
 8006404:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006408:	3b01      	subs	r3, #1
 800640a:	d503      	bpl.n	8006414 <__sfp+0x28>
 800640c:	6833      	ldr	r3, [r6, #0]
 800640e:	b30b      	cbz	r3, 8006454 <__sfp+0x68>
 8006410:	6836      	ldr	r6, [r6, #0]
 8006412:	e7f7      	b.n	8006404 <__sfp+0x18>
 8006414:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006418:	b9d5      	cbnz	r5, 8006450 <__sfp+0x64>
 800641a:	4b16      	ldr	r3, [pc, #88]	; (8006474 <__sfp+0x88>)
 800641c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006420:	60e3      	str	r3, [r4, #12]
 8006422:	6665      	str	r5, [r4, #100]	; 0x64
 8006424:	f000 f847 	bl	80064b6 <__retarget_lock_init_recursive>
 8006428:	f7ff ff96 	bl	8006358 <__sfp_lock_release>
 800642c:	2208      	movs	r2, #8
 800642e:	4629      	mov	r1, r5
 8006430:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006434:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006438:	6025      	str	r5, [r4, #0]
 800643a:	61a5      	str	r5, [r4, #24]
 800643c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006440:	f7ff f968 	bl	8005714 <memset>
 8006444:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006448:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800644c:	4620      	mov	r0, r4
 800644e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006450:	3468      	adds	r4, #104	; 0x68
 8006452:	e7d9      	b.n	8006408 <__sfp+0x1c>
 8006454:	2104      	movs	r1, #4
 8006456:	4638      	mov	r0, r7
 8006458:	f7ff ff62 	bl	8006320 <__sfmoreglue>
 800645c:	4604      	mov	r4, r0
 800645e:	6030      	str	r0, [r6, #0]
 8006460:	2800      	cmp	r0, #0
 8006462:	d1d5      	bne.n	8006410 <__sfp+0x24>
 8006464:	f7ff ff78 	bl	8006358 <__sfp_lock_release>
 8006468:	230c      	movs	r3, #12
 800646a:	603b      	str	r3, [r7, #0]
 800646c:	e7ee      	b.n	800644c <__sfp+0x60>
 800646e:	bf00      	nop
 8006470:	08006bc0 	.word	0x08006bc0
 8006474:	ffff0001 	.word	0xffff0001

08006478 <_fwalk_reent>:
 8006478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800647c:	4606      	mov	r6, r0
 800647e:	4688      	mov	r8, r1
 8006480:	2700      	movs	r7, #0
 8006482:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006486:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800648a:	f1b9 0901 	subs.w	r9, r9, #1
 800648e:	d505      	bpl.n	800649c <_fwalk_reent+0x24>
 8006490:	6824      	ldr	r4, [r4, #0]
 8006492:	2c00      	cmp	r4, #0
 8006494:	d1f7      	bne.n	8006486 <_fwalk_reent+0xe>
 8006496:	4638      	mov	r0, r7
 8006498:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800649c:	89ab      	ldrh	r3, [r5, #12]
 800649e:	2b01      	cmp	r3, #1
 80064a0:	d907      	bls.n	80064b2 <_fwalk_reent+0x3a>
 80064a2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80064a6:	3301      	adds	r3, #1
 80064a8:	d003      	beq.n	80064b2 <_fwalk_reent+0x3a>
 80064aa:	4629      	mov	r1, r5
 80064ac:	4630      	mov	r0, r6
 80064ae:	47c0      	blx	r8
 80064b0:	4307      	orrs	r7, r0
 80064b2:	3568      	adds	r5, #104	; 0x68
 80064b4:	e7e9      	b.n	800648a <_fwalk_reent+0x12>

080064b6 <__retarget_lock_init_recursive>:
 80064b6:	4770      	bx	lr

080064b8 <__retarget_lock_acquire_recursive>:
 80064b8:	4770      	bx	lr

080064ba <__retarget_lock_release_recursive>:
 80064ba:	4770      	bx	lr

080064bc <__swhatbuf_r>:
 80064bc:	b570      	push	{r4, r5, r6, lr}
 80064be:	460e      	mov	r6, r1
 80064c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064c4:	4614      	mov	r4, r2
 80064c6:	2900      	cmp	r1, #0
 80064c8:	461d      	mov	r5, r3
 80064ca:	b096      	sub	sp, #88	; 0x58
 80064cc:	da07      	bge.n	80064de <__swhatbuf_r+0x22>
 80064ce:	2300      	movs	r3, #0
 80064d0:	602b      	str	r3, [r5, #0]
 80064d2:	89b3      	ldrh	r3, [r6, #12]
 80064d4:	061a      	lsls	r2, r3, #24
 80064d6:	d410      	bmi.n	80064fa <__swhatbuf_r+0x3e>
 80064d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80064dc:	e00e      	b.n	80064fc <__swhatbuf_r+0x40>
 80064de:	466a      	mov	r2, sp
 80064e0:	f000 f914 	bl	800670c <_fstat_r>
 80064e4:	2800      	cmp	r0, #0
 80064e6:	dbf2      	blt.n	80064ce <__swhatbuf_r+0x12>
 80064e8:	9a01      	ldr	r2, [sp, #4]
 80064ea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80064ee:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80064f2:	425a      	negs	r2, r3
 80064f4:	415a      	adcs	r2, r3
 80064f6:	602a      	str	r2, [r5, #0]
 80064f8:	e7ee      	b.n	80064d8 <__swhatbuf_r+0x1c>
 80064fa:	2340      	movs	r3, #64	; 0x40
 80064fc:	2000      	movs	r0, #0
 80064fe:	6023      	str	r3, [r4, #0]
 8006500:	b016      	add	sp, #88	; 0x58
 8006502:	bd70      	pop	{r4, r5, r6, pc}

08006504 <__smakebuf_r>:
 8006504:	898b      	ldrh	r3, [r1, #12]
 8006506:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006508:	079d      	lsls	r5, r3, #30
 800650a:	4606      	mov	r6, r0
 800650c:	460c      	mov	r4, r1
 800650e:	d507      	bpl.n	8006520 <__smakebuf_r+0x1c>
 8006510:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006514:	6023      	str	r3, [r4, #0]
 8006516:	6123      	str	r3, [r4, #16]
 8006518:	2301      	movs	r3, #1
 800651a:	6163      	str	r3, [r4, #20]
 800651c:	b002      	add	sp, #8
 800651e:	bd70      	pop	{r4, r5, r6, pc}
 8006520:	466a      	mov	r2, sp
 8006522:	ab01      	add	r3, sp, #4
 8006524:	f7ff ffca 	bl	80064bc <__swhatbuf_r>
 8006528:	9900      	ldr	r1, [sp, #0]
 800652a:	4605      	mov	r5, r0
 800652c:	4630      	mov	r0, r6
 800652e:	f7ff f9eb 	bl	8005908 <_malloc_r>
 8006532:	b948      	cbnz	r0, 8006548 <__smakebuf_r+0x44>
 8006534:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006538:	059a      	lsls	r2, r3, #22
 800653a:	d4ef      	bmi.n	800651c <__smakebuf_r+0x18>
 800653c:	f023 0303 	bic.w	r3, r3, #3
 8006540:	f043 0302 	orr.w	r3, r3, #2
 8006544:	81a3      	strh	r3, [r4, #12]
 8006546:	e7e3      	b.n	8006510 <__smakebuf_r+0xc>
 8006548:	4b0d      	ldr	r3, [pc, #52]	; (8006580 <__smakebuf_r+0x7c>)
 800654a:	62b3      	str	r3, [r6, #40]	; 0x28
 800654c:	89a3      	ldrh	r3, [r4, #12]
 800654e:	6020      	str	r0, [r4, #0]
 8006550:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006554:	81a3      	strh	r3, [r4, #12]
 8006556:	9b00      	ldr	r3, [sp, #0]
 8006558:	6120      	str	r0, [r4, #16]
 800655a:	6163      	str	r3, [r4, #20]
 800655c:	9b01      	ldr	r3, [sp, #4]
 800655e:	b15b      	cbz	r3, 8006578 <__smakebuf_r+0x74>
 8006560:	4630      	mov	r0, r6
 8006562:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006566:	f000 f8e3 	bl	8006730 <_isatty_r>
 800656a:	b128      	cbz	r0, 8006578 <__smakebuf_r+0x74>
 800656c:	89a3      	ldrh	r3, [r4, #12]
 800656e:	f023 0303 	bic.w	r3, r3, #3
 8006572:	f043 0301 	orr.w	r3, r3, #1
 8006576:	81a3      	strh	r3, [r4, #12]
 8006578:	89a0      	ldrh	r0, [r4, #12]
 800657a:	4305      	orrs	r5, r0
 800657c:	81a5      	strh	r5, [r4, #12]
 800657e:	e7cd      	b.n	800651c <__smakebuf_r+0x18>
 8006580:	08006315 	.word	0x08006315

08006584 <memchr>:
 8006584:	4603      	mov	r3, r0
 8006586:	b510      	push	{r4, lr}
 8006588:	b2c9      	uxtb	r1, r1
 800658a:	4402      	add	r2, r0
 800658c:	4293      	cmp	r3, r2
 800658e:	4618      	mov	r0, r3
 8006590:	d101      	bne.n	8006596 <memchr+0x12>
 8006592:	2000      	movs	r0, #0
 8006594:	e003      	b.n	800659e <memchr+0x1a>
 8006596:	7804      	ldrb	r4, [r0, #0]
 8006598:	3301      	adds	r3, #1
 800659a:	428c      	cmp	r4, r1
 800659c:	d1f6      	bne.n	800658c <memchr+0x8>
 800659e:	bd10      	pop	{r4, pc}

080065a0 <__malloc_lock>:
 80065a0:	4801      	ldr	r0, [pc, #4]	; (80065a8 <__malloc_lock+0x8>)
 80065a2:	f7ff bf89 	b.w	80064b8 <__retarget_lock_acquire_recursive>
 80065a6:	bf00      	nop
 80065a8:	200002ac 	.word	0x200002ac

080065ac <__malloc_unlock>:
 80065ac:	4801      	ldr	r0, [pc, #4]	; (80065b4 <__malloc_unlock+0x8>)
 80065ae:	f7ff bf84 	b.w	80064ba <__retarget_lock_release_recursive>
 80065b2:	bf00      	nop
 80065b4:	200002ac 	.word	0x200002ac

080065b8 <_raise_r>:
 80065b8:	291f      	cmp	r1, #31
 80065ba:	b538      	push	{r3, r4, r5, lr}
 80065bc:	4604      	mov	r4, r0
 80065be:	460d      	mov	r5, r1
 80065c0:	d904      	bls.n	80065cc <_raise_r+0x14>
 80065c2:	2316      	movs	r3, #22
 80065c4:	6003      	str	r3, [r0, #0]
 80065c6:	f04f 30ff 	mov.w	r0, #4294967295
 80065ca:	bd38      	pop	{r3, r4, r5, pc}
 80065cc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80065ce:	b112      	cbz	r2, 80065d6 <_raise_r+0x1e>
 80065d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80065d4:	b94b      	cbnz	r3, 80065ea <_raise_r+0x32>
 80065d6:	4620      	mov	r0, r4
 80065d8:	f000 f830 	bl	800663c <_getpid_r>
 80065dc:	462a      	mov	r2, r5
 80065de:	4601      	mov	r1, r0
 80065e0:	4620      	mov	r0, r4
 80065e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80065e6:	f000 b817 	b.w	8006618 <_kill_r>
 80065ea:	2b01      	cmp	r3, #1
 80065ec:	d00a      	beq.n	8006604 <_raise_r+0x4c>
 80065ee:	1c59      	adds	r1, r3, #1
 80065f0:	d103      	bne.n	80065fa <_raise_r+0x42>
 80065f2:	2316      	movs	r3, #22
 80065f4:	6003      	str	r3, [r0, #0]
 80065f6:	2001      	movs	r0, #1
 80065f8:	e7e7      	b.n	80065ca <_raise_r+0x12>
 80065fa:	2400      	movs	r4, #0
 80065fc:	4628      	mov	r0, r5
 80065fe:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006602:	4798      	blx	r3
 8006604:	2000      	movs	r0, #0
 8006606:	e7e0      	b.n	80065ca <_raise_r+0x12>

08006608 <raise>:
 8006608:	4b02      	ldr	r3, [pc, #8]	; (8006614 <raise+0xc>)
 800660a:	4601      	mov	r1, r0
 800660c:	6818      	ldr	r0, [r3, #0]
 800660e:	f7ff bfd3 	b.w	80065b8 <_raise_r>
 8006612:	bf00      	nop
 8006614:	20000074 	.word	0x20000074

08006618 <_kill_r>:
 8006618:	b538      	push	{r3, r4, r5, lr}
 800661a:	2300      	movs	r3, #0
 800661c:	4d06      	ldr	r5, [pc, #24]	; (8006638 <_kill_r+0x20>)
 800661e:	4604      	mov	r4, r0
 8006620:	4608      	mov	r0, r1
 8006622:	4611      	mov	r1, r2
 8006624:	602b      	str	r3, [r5, #0]
 8006626:	f000 f8d7 	bl	80067d8 <_kill>
 800662a:	1c43      	adds	r3, r0, #1
 800662c:	d102      	bne.n	8006634 <_kill_r+0x1c>
 800662e:	682b      	ldr	r3, [r5, #0]
 8006630:	b103      	cbz	r3, 8006634 <_kill_r+0x1c>
 8006632:	6023      	str	r3, [r4, #0]
 8006634:	bd38      	pop	{r3, r4, r5, pc}
 8006636:	bf00      	nop
 8006638:	200002b4 	.word	0x200002b4

0800663c <_getpid_r>:
 800663c:	f000 b8bc 	b.w	80067b8 <_getpid>

08006640 <__sread>:
 8006640:	b510      	push	{r4, lr}
 8006642:	460c      	mov	r4, r1
 8006644:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006648:	f000 f894 	bl	8006774 <_read_r>
 800664c:	2800      	cmp	r0, #0
 800664e:	bfab      	itete	ge
 8006650:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006652:	89a3      	ldrhlt	r3, [r4, #12]
 8006654:	181b      	addge	r3, r3, r0
 8006656:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800665a:	bfac      	ite	ge
 800665c:	6563      	strge	r3, [r4, #84]	; 0x54
 800665e:	81a3      	strhlt	r3, [r4, #12]
 8006660:	bd10      	pop	{r4, pc}

08006662 <__swrite>:
 8006662:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006666:	461f      	mov	r7, r3
 8006668:	898b      	ldrh	r3, [r1, #12]
 800666a:	4605      	mov	r5, r0
 800666c:	05db      	lsls	r3, r3, #23
 800666e:	460c      	mov	r4, r1
 8006670:	4616      	mov	r6, r2
 8006672:	d505      	bpl.n	8006680 <__swrite+0x1e>
 8006674:	2302      	movs	r3, #2
 8006676:	2200      	movs	r2, #0
 8006678:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800667c:	f000 f868 	bl	8006750 <_lseek_r>
 8006680:	89a3      	ldrh	r3, [r4, #12]
 8006682:	4632      	mov	r2, r6
 8006684:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006688:	81a3      	strh	r3, [r4, #12]
 800668a:	4628      	mov	r0, r5
 800668c:	463b      	mov	r3, r7
 800668e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006692:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006696:	f000 b817 	b.w	80066c8 <_write_r>

0800669a <__sseek>:
 800669a:	b510      	push	{r4, lr}
 800669c:	460c      	mov	r4, r1
 800669e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066a2:	f000 f855 	bl	8006750 <_lseek_r>
 80066a6:	1c43      	adds	r3, r0, #1
 80066a8:	89a3      	ldrh	r3, [r4, #12]
 80066aa:	bf15      	itete	ne
 80066ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80066ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80066b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80066b6:	81a3      	strheq	r3, [r4, #12]
 80066b8:	bf18      	it	ne
 80066ba:	81a3      	strhne	r3, [r4, #12]
 80066bc:	bd10      	pop	{r4, pc}

080066be <__sclose>:
 80066be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066c2:	f000 b813 	b.w	80066ec <_close_r>
	...

080066c8 <_write_r>:
 80066c8:	b538      	push	{r3, r4, r5, lr}
 80066ca:	4604      	mov	r4, r0
 80066cc:	4608      	mov	r0, r1
 80066ce:	4611      	mov	r1, r2
 80066d0:	2200      	movs	r2, #0
 80066d2:	4d05      	ldr	r5, [pc, #20]	; (80066e8 <_write_r+0x20>)
 80066d4:	602a      	str	r2, [r5, #0]
 80066d6:	461a      	mov	r2, r3
 80066d8:	f000 f8a4 	bl	8006824 <_write>
 80066dc:	1c43      	adds	r3, r0, #1
 80066de:	d102      	bne.n	80066e6 <_write_r+0x1e>
 80066e0:	682b      	ldr	r3, [r5, #0]
 80066e2:	b103      	cbz	r3, 80066e6 <_write_r+0x1e>
 80066e4:	6023      	str	r3, [r4, #0]
 80066e6:	bd38      	pop	{r3, r4, r5, pc}
 80066e8:	200002b4 	.word	0x200002b4

080066ec <_close_r>:
 80066ec:	b538      	push	{r3, r4, r5, lr}
 80066ee:	2300      	movs	r3, #0
 80066f0:	4d05      	ldr	r5, [pc, #20]	; (8006708 <_close_r+0x1c>)
 80066f2:	4604      	mov	r4, r0
 80066f4:	4608      	mov	r0, r1
 80066f6:	602b      	str	r3, [r5, #0]
 80066f8:	f000 f84e 	bl	8006798 <_close>
 80066fc:	1c43      	adds	r3, r0, #1
 80066fe:	d102      	bne.n	8006706 <_close_r+0x1a>
 8006700:	682b      	ldr	r3, [r5, #0]
 8006702:	b103      	cbz	r3, 8006706 <_close_r+0x1a>
 8006704:	6023      	str	r3, [r4, #0]
 8006706:	bd38      	pop	{r3, r4, r5, pc}
 8006708:	200002b4 	.word	0x200002b4

0800670c <_fstat_r>:
 800670c:	b538      	push	{r3, r4, r5, lr}
 800670e:	2300      	movs	r3, #0
 8006710:	4d06      	ldr	r5, [pc, #24]	; (800672c <_fstat_r+0x20>)
 8006712:	4604      	mov	r4, r0
 8006714:	4608      	mov	r0, r1
 8006716:	4611      	mov	r1, r2
 8006718:	602b      	str	r3, [r5, #0]
 800671a:	f000 f845 	bl	80067a8 <_fstat>
 800671e:	1c43      	adds	r3, r0, #1
 8006720:	d102      	bne.n	8006728 <_fstat_r+0x1c>
 8006722:	682b      	ldr	r3, [r5, #0]
 8006724:	b103      	cbz	r3, 8006728 <_fstat_r+0x1c>
 8006726:	6023      	str	r3, [r4, #0]
 8006728:	bd38      	pop	{r3, r4, r5, pc}
 800672a:	bf00      	nop
 800672c:	200002b4 	.word	0x200002b4

08006730 <_isatty_r>:
 8006730:	b538      	push	{r3, r4, r5, lr}
 8006732:	2300      	movs	r3, #0
 8006734:	4d05      	ldr	r5, [pc, #20]	; (800674c <_isatty_r+0x1c>)
 8006736:	4604      	mov	r4, r0
 8006738:	4608      	mov	r0, r1
 800673a:	602b      	str	r3, [r5, #0]
 800673c:	f000 f844 	bl	80067c8 <_isatty>
 8006740:	1c43      	adds	r3, r0, #1
 8006742:	d102      	bne.n	800674a <_isatty_r+0x1a>
 8006744:	682b      	ldr	r3, [r5, #0]
 8006746:	b103      	cbz	r3, 800674a <_isatty_r+0x1a>
 8006748:	6023      	str	r3, [r4, #0]
 800674a:	bd38      	pop	{r3, r4, r5, pc}
 800674c:	200002b4 	.word	0x200002b4

08006750 <_lseek_r>:
 8006750:	b538      	push	{r3, r4, r5, lr}
 8006752:	4604      	mov	r4, r0
 8006754:	4608      	mov	r0, r1
 8006756:	4611      	mov	r1, r2
 8006758:	2200      	movs	r2, #0
 800675a:	4d05      	ldr	r5, [pc, #20]	; (8006770 <_lseek_r+0x20>)
 800675c:	602a      	str	r2, [r5, #0]
 800675e:	461a      	mov	r2, r3
 8006760:	f000 f842 	bl	80067e8 <_lseek>
 8006764:	1c43      	adds	r3, r0, #1
 8006766:	d102      	bne.n	800676e <_lseek_r+0x1e>
 8006768:	682b      	ldr	r3, [r5, #0]
 800676a:	b103      	cbz	r3, 800676e <_lseek_r+0x1e>
 800676c:	6023      	str	r3, [r4, #0]
 800676e:	bd38      	pop	{r3, r4, r5, pc}
 8006770:	200002b4 	.word	0x200002b4

08006774 <_read_r>:
 8006774:	b538      	push	{r3, r4, r5, lr}
 8006776:	4604      	mov	r4, r0
 8006778:	4608      	mov	r0, r1
 800677a:	4611      	mov	r1, r2
 800677c:	2200      	movs	r2, #0
 800677e:	4d05      	ldr	r5, [pc, #20]	; (8006794 <_read_r+0x20>)
 8006780:	602a      	str	r2, [r5, #0]
 8006782:	461a      	mov	r2, r3
 8006784:	f000 f838 	bl	80067f8 <_read>
 8006788:	1c43      	adds	r3, r0, #1
 800678a:	d102      	bne.n	8006792 <_read_r+0x1e>
 800678c:	682b      	ldr	r3, [r5, #0]
 800678e:	b103      	cbz	r3, 8006792 <_read_r+0x1e>
 8006790:	6023      	str	r3, [r4, #0]
 8006792:	bd38      	pop	{r3, r4, r5, pc}
 8006794:	200002b4 	.word	0x200002b4

08006798 <_close>:
 8006798:	2258      	movs	r2, #88	; 0x58
 800679a:	4b02      	ldr	r3, [pc, #8]	; (80067a4 <_close+0xc>)
 800679c:	f04f 30ff 	mov.w	r0, #4294967295
 80067a0:	601a      	str	r2, [r3, #0]
 80067a2:	4770      	bx	lr
 80067a4:	200002b4 	.word	0x200002b4

080067a8 <_fstat>:
 80067a8:	2258      	movs	r2, #88	; 0x58
 80067aa:	4b02      	ldr	r3, [pc, #8]	; (80067b4 <_fstat+0xc>)
 80067ac:	f04f 30ff 	mov.w	r0, #4294967295
 80067b0:	601a      	str	r2, [r3, #0]
 80067b2:	4770      	bx	lr
 80067b4:	200002b4 	.word	0x200002b4

080067b8 <_getpid>:
 80067b8:	2258      	movs	r2, #88	; 0x58
 80067ba:	4b02      	ldr	r3, [pc, #8]	; (80067c4 <_getpid+0xc>)
 80067bc:	f04f 30ff 	mov.w	r0, #4294967295
 80067c0:	601a      	str	r2, [r3, #0]
 80067c2:	4770      	bx	lr
 80067c4:	200002b4 	.word	0x200002b4

080067c8 <_isatty>:
 80067c8:	2258      	movs	r2, #88	; 0x58
 80067ca:	4b02      	ldr	r3, [pc, #8]	; (80067d4 <_isatty+0xc>)
 80067cc:	2000      	movs	r0, #0
 80067ce:	601a      	str	r2, [r3, #0]
 80067d0:	4770      	bx	lr
 80067d2:	bf00      	nop
 80067d4:	200002b4 	.word	0x200002b4

080067d8 <_kill>:
 80067d8:	2258      	movs	r2, #88	; 0x58
 80067da:	4b02      	ldr	r3, [pc, #8]	; (80067e4 <_kill+0xc>)
 80067dc:	f04f 30ff 	mov.w	r0, #4294967295
 80067e0:	601a      	str	r2, [r3, #0]
 80067e2:	4770      	bx	lr
 80067e4:	200002b4 	.word	0x200002b4

080067e8 <_lseek>:
 80067e8:	2258      	movs	r2, #88	; 0x58
 80067ea:	4b02      	ldr	r3, [pc, #8]	; (80067f4 <_lseek+0xc>)
 80067ec:	f04f 30ff 	mov.w	r0, #4294967295
 80067f0:	601a      	str	r2, [r3, #0]
 80067f2:	4770      	bx	lr
 80067f4:	200002b4 	.word	0x200002b4

080067f8 <_read>:
 80067f8:	2258      	movs	r2, #88	; 0x58
 80067fa:	4b02      	ldr	r3, [pc, #8]	; (8006804 <_read+0xc>)
 80067fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006800:	601a      	str	r2, [r3, #0]
 8006802:	4770      	bx	lr
 8006804:	200002b4 	.word	0x200002b4

08006808 <_sbrk>:
 8006808:	4b04      	ldr	r3, [pc, #16]	; (800681c <_sbrk+0x14>)
 800680a:	4602      	mov	r2, r0
 800680c:	6819      	ldr	r1, [r3, #0]
 800680e:	b909      	cbnz	r1, 8006814 <_sbrk+0xc>
 8006810:	4903      	ldr	r1, [pc, #12]	; (8006820 <_sbrk+0x18>)
 8006812:	6019      	str	r1, [r3, #0]
 8006814:	6818      	ldr	r0, [r3, #0]
 8006816:	4402      	add	r2, r0
 8006818:	601a      	str	r2, [r3, #0]
 800681a:	4770      	bx	lr
 800681c:	200002a0 	.word	0x200002a0
 8006820:	200002b8 	.word	0x200002b8

08006824 <_write>:
 8006824:	2258      	movs	r2, #88	; 0x58
 8006826:	4b02      	ldr	r3, [pc, #8]	; (8006830 <_write+0xc>)
 8006828:	f04f 30ff 	mov.w	r0, #4294967295
 800682c:	601a      	str	r2, [r3, #0]
 800682e:	4770      	bx	lr
 8006830:	200002b4 	.word	0x200002b4

08006834 <_exit>:
 8006834:	e7fe      	b.n	8006834 <_exit>
	...

08006838 <_init>:
 8006838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800683a:	bf00      	nop
 800683c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800683e:	bc08      	pop	{r3}
 8006840:	469e      	mov	lr, r3
 8006842:	4770      	bx	lr

08006844 <_fini>:
 8006844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006846:	bf00      	nop
 8006848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800684a:	bc08      	pop	{r3}
 800684c:	469e      	mov	lr, r3
 800684e:	4770      	bx	lr
